{"version":3,"file":"index-f2492b30.js","sources":["../../../../node_modules/@formkit/utils/dist/index.mjs","../../../../node_modules/@formkit/core/dist/index.mjs","../../../../node_modules/@formkit/inputs/dist/index.mjs","../../../../node_modules/@formkit/rules/dist/index.mjs","../../../../node_modules/@formkit/observer/dist/index.mjs","../../../../node_modules/@formkit/validation/dist/index.mjs","../../../../node_modules/@formkit/i18n/dist/index.mjs","../../../../node_modules/@formkit/themes/dist/index.mjs","../../../../node_modules/@formkit/dev/dist/index.mjs","../../../../node_modules/@formkit/vue/dist/index.mjs"],"sourcesContent":["/**\n * Commonly shared utility functions between official FormKit packages.\n *\n * You can add this package by using `npm install @formkit/utils` or `yarn add @formkit/utils`.\n *\n * @packageDocumentation\n */\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Explicit keys that should always be cloned.\n */\nconst explicitKeys = [\n    '__key',\n    '__init',\n    '__shim',\n    '__original',\n    '__index',\n    '__prevKey',\n];\n/**\n * Generates a random string.\n *\n * @example\n *\n * ```javascript\n * import { token } from '@formkit/utils'\n *\n * const tk = token()\n * // 'jkbyqnphqm'\n * ```\n *\n * @returns string\n *\n * @public\n */\nfunction token() {\n    return Math.random().toString(36).substring(2, 15);\n}\n/**\n * Creates a new set of the specified type and uses the values from an Array or\n * an existing Set.\n *\n * @example\n *\n * ```javascript\n * import { setify } from '@formkit/utils'\n *\n * const tk = setify(['a', 'b'])\n * // Set(2) {'a', 'b'}\n * ```\n *\n * @param items - An array or a Set.\n *\n * @returns `Set<T>`\n *\n * @public\n */\nfunction setify(items) {\n    return items instanceof Set ? items : new Set(items);\n}\n/**\n * Given 2 arrays, return them as a combined array with no duplicates.\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n *\n * @returns `any[]`\n *\n * @public\n */\nfunction dedupe(arr1, arr2) {\n    const original = arr1 instanceof Set ? arr1 : new Set(arr1);\n    if (arr2)\n        arr2.forEach((item) => original.add(item));\n    return [...original];\n}\n/**\n * Checks if the given property exists on the given object.\n *\n * @param obj - An object to check.\n * @param property - The property to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction has(obj, property) {\n    return Object.prototype.hasOwnProperty.call(obj, property);\n}\n/**\n * Compare two values for equality, optionally at depth.\n *\n * @param valA - First value.\n * @param valB - Second value.\n * @param deep - If it will compare deeply if it's an object.\n * @param explicit - An array of keys to explicity check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction eq(valA, // eslint-disable-line\nvalB, // eslint-disable-line\ndeep = true, explicit = ['__key']) {\n    if (valA === valB)\n        return true;\n    if (typeof valB === 'object' && typeof valA === 'object') {\n        if (valA instanceof Map)\n            return false;\n        if (valA instanceof Set)\n            return false;\n        if (valA instanceof Date && valB instanceof Date)\n            return valA.getTime() === valB.getTime();\n        if (valA instanceof RegExp && valB instanceof RegExp)\n            return eqRegExp(valA, valB);\n        if (valA === null || valB === null)\n            return false;\n        if (Object.keys(valA).length !== Object.keys(valB).length)\n            return false;\n        for (const k of explicit) {\n            if ((k in valA || k in valB) && valA[k] !== valB[k])\n                return false;\n        }\n        for (const key in valA) {\n            if (!(key in valB))\n                return false;\n            if (valA[key] !== valB[key] && !deep)\n                return false;\n            if (deep && !eq(valA[key], valB[key], deep, explicit))\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * A regular expression to test for a valid date string.\n * @param x - A RegExp to compare.\n * @param y - A RegExp to compare.\n */\nfunction eqRegExp(x, y) {\n    return (x.source === y.source &&\n        x.flags.split('').sort().join('') === y.flags.split('').sort().join(''));\n}\n/**\n * Determines if a value is empty or not.\n *\n * @param value - The value to check if it's empty.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction empty(value // eslint-disable-line\n) {\n    const type = typeof value;\n    if (type === 'number')\n        return false;\n    if (value === undefined)\n        return true;\n    if (type === 'string') {\n        return value === '';\n    }\n    if (type === 'object') {\n        if (value === null)\n            return true;\n        for (const _i in value)\n            return false;\n        if (value instanceof RegExp)\n            return false;\n        if (value instanceof Date)\n            return false;\n        return true;\n    }\n    return false;\n}\n/**\n * Escape a string for use in regular expressions.\n *\n * @param string - String to be escaped.\n *\n * @returns `string`\n *\n * @public\n */\nfunction escapeExp(string) {\n    // $& means the whole matched string\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n/**\n * Given a string date format, return a regex to match against.\n *\n * @param format - String to be transformed to RegExp.\n *\n * @example\n *\n * ```javascript\n * regexForFormat('MM') // returns '(0[1-9]|1[012])'\n * ```\n *\n * @returns `RegExp`\n *\n * @public\n */\nfunction regexForFormat(format) {\n    const escaped = `^${escapeExp(format)}$`;\n    const formats = {\n        MM: '(0[1-9]|1[012])',\n        M: '([1-9]|1[012])',\n        DD: '([012][0-9]|3[01])',\n        D: '([012]?[0-9]|3[01])',\n        YYYY: '\\\\d{4}',\n        YY: '\\\\d{2}',\n    };\n    const tokens = Object.keys(formats);\n    return new RegExp(tokens.reduce((regex, format) => {\n        return regex.replace(format, formats[format]);\n    }, escaped));\n}\n/**\n * Given a FormKit input type, returns the correct lowerCased() type.\n *\n * @param type - String to return to check for correct type\n *\n * @returns `'list' | 'group' | 'input'`\n *\n * @public\n */\nfunction nodeType(type) {\n    const t = type.toLowerCase();\n    if (t === 'list')\n        return 'list';\n    if (t === 'group')\n        return 'group';\n    return 'input';\n}\n/**\n * Determines if an object is an object.\n *\n * @param o - The value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isRecord(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n/**\n * Checks if an object is a simple array or record.\n *\n * @param o - Value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isObject(o) {\n    return isRecord(o) || Array.isArray(o);\n}\n/**\n * Attempts to determine if an object is a POJO (Plain Old JavaScript Object).\n * Mostly lifted from is-plain-object: https://github.com/jonschlinkert/is-plain-object\n * Copyright (c) 2014-2017, Jon Schlinkert.\n *\n * @param o - The value to be checked.\n *\n * @returns `boolean`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isPojo(o) {\n    if (isRecord(o) === false)\n        return false;\n    if (o.__FKNode__ || o.__POJO__ === false)\n        return false;\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    const prot = ctor.prototype;\n    if (isRecord(prot) === false)\n        return false;\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Recursively merge data from additional into original returning a new object.\n *\n * @param original - The original array.\n * @param additional - The array to merge.\n * @param extendArrays - If it will extend/concatenate array values instead of\n * replacing them.\n * @param ignoreUndefined - If it will preserve values from the original object\n * even if the additional object has those values set to undefined.\n *\n * @returns `Record<string, any> | string | null`\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nfunction extend(original, additional, extendArrays = false, ignoreUndefined = false) {\n    if (additional === null)\n        return null;\n    const merged = {};\n    if (typeof additional === 'string')\n        return additional;\n    for (const key in original) {\n        if (has(additional, key) &&\n            (additional[key] !== undefined || !ignoreUndefined)) {\n            if (extendArrays &&\n                Array.isArray(original[key]) &&\n                Array.isArray(additional[key])) {\n                merged[key] = original[key].concat(additional[key]);\n                continue;\n            }\n            if (additional[key] === undefined) {\n                continue;\n            }\n            if (isPojo(original[key]) && isPojo(additional[key])) {\n                merged[key] = extend(original[key], additional[key], extendArrays, ignoreUndefined);\n            }\n            else {\n                merged[key] = additional[key];\n            }\n        }\n        else {\n            merged[key] = original[key];\n        }\n    }\n    for (const key in additional) {\n        if (!has(merged, key) && additional[key] !== undefined) {\n            merged[key] = additional[key];\n        }\n    }\n    return merged;\n}\n/**\n * Determine if the given string is fully quoted.\n *\n * @example\n *\n * ```javascript\n * hello - false\n * \"hello\" - true\n * 'world' - true\n * \"hello\"==\"world\" - false\n * \"hello'this'\" - false\n * \"hello\"'there' - false\n * \"hello\"\"there\" - false\n * 'hello === world' - true\n * ```\n *\n * @param str - The string to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isQuotedString(str) {\n    // quickly return false if the value is note quoted\n    if (str[0] !== '\"' && str[0] !== \"'\")\n        return false;\n    if (str[0] !== str[str.length - 1])\n        return false;\n    const quoteType = str[0];\n    for (let p = 1; p < str.length; p++) {\n        if (str[p] === quoteType &&\n            (p === 1 || str[p - 1] !== '\\\\') &&\n            p !== str.length - 1) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Remove extra escape characters.\n *\n * @param str - String to remove extra escape characters from.\n *\n * @returns `string`\n *\n * @public\n */\nfunction rmEscapes(str) {\n    if (!str.length)\n        return '';\n    let clean = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char !== '\\\\' || lastChar === '\\\\') {\n            clean += char;\n        }\n        lastChar = char;\n    }\n    return clean;\n}\n/**\n * Performs a recursive `Object.assign`-like operation.\n *\n * @param a - An object to be assigned.\n * @param b - An object to get values from.\n *\n * @returns `A & B`\n *\n * @public\n */\nfunction assignDeep(a, b) {\n    for (const key in a) {\n        if (has(b, key) &&\n            a[key] !== b[key] &&\n            !(isPojo(a[key]) && isPojo(b[key]))) {\n            a[key] = b[key];\n        }\n        else if (isPojo(a[key]) && isPojo(b[key])) {\n            assignDeep(a[key], b[key]);\n        }\n    }\n    for (const key in b) {\n        if (!has(a, key)) {\n            a[key] = b[key];\n        }\n    }\n    return a;\n}\n/**\n * Filters out values from an object that should not be considered \"props\" of\n * a core node, like \"value\" and \"name\".\n *\n * @param sets - The arrays to get values filtered out of.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction nodeProps(...sets) {\n    return sets.reduce((valid, props) => {\n        const { value, name, modelValue, config, plugins, ...validProps } = props; // eslint-disable-line\n        return Object.assign(valid, validProps);\n    }, {});\n}\n/**\n * Parse a string for comma-separated arguments.\n *\n * @param str - String to parse arguments from.\n *\n * @returns `string[]`\n *\n * @public\n */\nfunction parseArgs(str) {\n    const args = [];\n    let arg = '';\n    let depth = 0;\n    let quote = '';\n    let lastChar = '';\n    for (let p = 0; p < str.length; p++) {\n        const char = str.charAt(p);\n        if (char === quote && lastChar !== '\\\\') {\n            quote = '';\n        }\n        else if ((char === \"'\" || char === '\"') && !quote && lastChar !== '\\\\') {\n            quote = char;\n        }\n        else if (char === '(' && !quote) {\n            depth++;\n        }\n        else if (char === ')' && !quote) {\n            depth--;\n        }\n        if (char === ',' && !quote && depth === 0) {\n            args.push(arg);\n            arg = '';\n        }\n        else if (char !== ' ' || quote) {\n            arg += char;\n        }\n        lastChar = char;\n    }\n    if (arg) {\n        args.push(arg);\n    }\n    return args;\n}\n/**\n * Return a new (shallow) object with any desired props removed.\n *\n * @param obj - The starting object.\n * @param toRemove - The array of properties to remove. Accepts strings or\n * regular expressions.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction except(obj, toRemove) {\n    const clean = {};\n    const exps = toRemove.filter((n) => n instanceof RegExp);\n    const keysToRemove = new Set(toRemove);\n    for (const key in obj) {\n        if (!keysToRemove.has(key) && !exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    }\n    return clean;\n}\n/**\n * Extracts a set of keys from a given object. Importantly, this will extract\n * values even if they are not set on the original object — they will just have\n * an undefined value.\n *\n * @param obj - The object to get values from.\n * @param include - The array of items to get.\n *\n * @returns `Record<string, any>`\n *\n * @public\n */\nfunction only(obj, include) {\n    const clean = {};\n    const exps = include.filter((n) => n instanceof RegExp);\n    include.forEach((key) => {\n        if (!(key instanceof RegExp)) {\n            clean[key] = obj[key];\n        }\n    });\n    Object.keys(obj).forEach((key) => {\n        if (exps.some((exp) => exp.test(key))) {\n            clean[key] = obj[key];\n        }\n    });\n    return clean;\n}\n/**\n * This converts kebab-case to camelCase. It ONLY converts from kebab to camel.\n *\n * @param str - String to be camel cased.\n *\n * @returns `string`\n *\n * @public\n */\nfunction camel(str) {\n    return str.replace(/-([a-z0-9])/gi, (_s, g) => g.toUpperCase());\n}\n/**\n * This converts camel-case to kebab case. It ONLY converts from camel to kebab.\n *\n * @param str - String to be kebabed.\n *\n * @returns `string`\n *\n * @public\n */\nfunction kebab(str) {\n    return str\n        .replace(/([a-z0-9])([A-Z])/g, (_s, trail, cap) => trail + '-' + cap.toLowerCase())\n        .replace(' ', '-')\n        .toLowerCase();\n}\n/**\n * Shallowly clones the given object.\n *\n * @param obj - Object to be shallowly cloned.\n * @param explicit - The array of keys to be explicity cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction shallowClone(obj, explicit = explicitKeys) {\n    if (obj !== null && typeof obj === 'object') {\n        let returnObject;\n        if (Array.isArray(obj))\n            returnObject = [...obj];\n        else if (isPojo(obj))\n            returnObject = { ...obj };\n        if (returnObject) {\n            applyExplicit(obj, returnObject, explicit);\n            return returnObject;\n        }\n    }\n    return obj;\n}\n/**\n * Perform a recursive clone on a given object. Only intended to be used\n * for simple objects like arrays and POJOs.\n *\n * @param obj - Object to be cloned.\n * @param explicit - Array of items to be explicity cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction clone(obj, explicit = explicitKeys) {\n    if (obj === null ||\n        obj instanceof RegExp ||\n        obj instanceof Date ||\n        obj instanceof Map ||\n        obj instanceof Set ||\n        (typeof File === 'function' && obj instanceof File))\n        return obj;\n    let returnObject;\n    if (Array.isArray(obj)) {\n        returnObject = obj.map((value) => {\n            if (typeof value === 'object')\n                return clone(value, explicit);\n            return value;\n        });\n    }\n    else {\n        returnObject = Object.keys(obj).reduce((newObj, key) => {\n            newObj[key] =\n                typeof obj[key] === 'object'\n                    ? clone(obj[key], explicit)\n                    : obj[key];\n            return newObj;\n        }, {});\n    }\n    for (const key of explicit) {\n        if (key in obj) {\n            Object.defineProperty(returnObject, key, {\n                enumerable: false,\n                value: obj[key],\n            });\n        }\n    }\n    return returnObject;\n}\n/**\n * Clones anything. If the item is scalar, no worries, it passes it back. If it\n * is an object, it performs a (fast/loose) clone operation.\n *\n * @param obj - The value to be cloned.\n *\n * @returns `T`\n *\n * @public\n */\nfunction cloneAny(obj) {\n    return typeof obj === 'object'\n        ? clone(obj)\n        : obj;\n}\n/**\n * Get a specific value via dot notation.\n *\n * @param obj - An object to fetch data from.\n * @param addr - An \"address\" in dot notation.\n *\n * @returns `unknown`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction getAt(obj, addr) {\n    if (!obj || typeof obj !== 'object')\n        return null;\n    const segments = addr.split('.');\n    let o = obj;\n    for (const i in segments) {\n        const segment = segments[i];\n        if (has(o, segment)) {\n            o = o[segment];\n        }\n        if (+i === segments.length - 1)\n            return o;\n        if (!o || typeof o !== 'object')\n            return null;\n    }\n    return null;\n}\n/**\n * Determines if the value of a prop that is either present (true) or not\n * present (undefined). For example, the prop disabled should disable\n * by just existing, but what if it is set to the string \"false\" — then it\n * should not be disabled.\n *\n * @param value - Value to check for undefined.\n *\n * @returns `true | undefined`\n *\n * @public\n */\nfunction undefine(value) {\n    return value !== undefined && value !== 'false' && value !== false\n        ? true\n        : undefined;\n}\n/**\n * Defines an object as an initial value.\n *\n * @param obj - Object to be added an initial value.\n *\n * @returns `T & { __init?: true }`\n *\n * @public\n */\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nfunction init(obj) {\n    return !Object.isFrozen(obj)\n        ? Object.defineProperty(obj, '__init', {\n            enumerable: false,\n            value: true,\n        })\n        : obj;\n}\n/**\n * Turn any string into a URL/DOM-safe string.\n *\n * @param str - String to be slugified to a URL-safe string.\n *\n * @returns `string`\n *\n * @public\n */\nfunction slugify(str) {\n    return str\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[^a-z0-9]/g, ' ')\n        .trim()\n        .replace(/\\s+/g, '-');\n}\n/**\n * Spreads an object or an array, otherwise returns the same value.\n *\n * @param obj - The object to be spread.\n * @param explicit - The array of items to be explicity spread.\n *\n * @returns `T`\n *\n * @public\n */\nfunction spread(obj, explicit = explicitKeys) {\n    if (obj && typeof obj === 'object') {\n        if (obj instanceof RegExp)\n            return obj;\n        if (obj instanceof Date)\n            return obj;\n        let spread;\n        if (Array.isArray(obj)) {\n            spread = [...obj];\n        }\n        else {\n            spread = { ...obj };\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        return applyExplicit(obj, spread, explicit);\n    }\n    return obj;\n}\n/**\n * Apply non enumerable properties to an object.\n *\n * @param original - Original object\n * @param obj - Objecto to aplly the values\n * @param explicit - Array of items to be explicity added.\n *\n * @returns `T`\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction applyExplicit(original, obj, explicit) {\n    for (const key of explicit) {\n        if (key in original) {\n            Object.defineProperty(obj, key, {\n                enumerable: false,\n                value: original[key],\n            });\n        }\n    }\n    return obj;\n}\n/**\n * Uses a global mutation observer to wait for a given element to appear in the\n * DOM.\n * @param childId - The id of the child node.\n * @param callback - The callback to call when the child node is found.\n *\n * @public\n */\nfunction whenAvailable(childId, callback, root) {\n    if (!isBrowser)\n        return;\n    if (!root)\n        root = document;\n    const el = root.getElementById(childId);\n    if (el)\n        return callback(el);\n    const observer = new MutationObserver(() => {\n        const el = root === null || root === void 0 ? void 0 : root.getElementById(childId);\n        if (el) {\n            observer === null || observer === void 0 ? void 0 : observer.disconnect();\n            callback(el);\n        }\n    });\n    observer.observe(root, { childList: true, subtree: true });\n}\n/**\n * Given a function only 1 call will be made per call stack. All others will\n * be discarded.\n * @param fn - The function to be called once per tick.\n * @returns\n * @public\n */\nfunction oncePerTick(fn) {\n    let called = false;\n    return ((...args) => {\n        if (called)\n            return;\n        called = true;\n        queueMicrotask(() => (called = false));\n        return fn(...args);\n    });\n}\n\nexport { assignDeep, camel, clone, cloneAny, dedupe, empty, eq, eqRegExp, escapeExp, except, extend, getAt, has, init, isObject, isPojo, isQuotedString, isRecord, kebab, nodeProps, nodeType, oncePerTick, only, parseArgs, regexForFormat, rmEscapes, setify, shallowClone, slugify, spread, token, undefine, whenAvailable };\n","import { token, has, slugify, cloneAny, empty, isObject, init, eq, clone, camel, undefine, kebab, dedupe, parseArgs, getAt, isQuotedString, rmEscapes } from '@formkit/utils';\n\n/**\n * Creates a new dispatcher that allows the addition/removal of middleware\n * functions, and the ability to dispatch a payload to all middleware.\n *\n * @returns FormKitDispatcher\n *\n * @internal\n */\nfunction createDispatcher() {\n    const middleware = [];\n    let currentIndex = 0;\n    const use = (dispatchable) => middleware.push(dispatchable);\n    const dispatch = (payload) => {\n        const current = middleware[currentIndex];\n        if (typeof current === 'function') {\n            return current(payload, (explicitPayload) => {\n                currentIndex++;\n                return dispatch(explicitPayload);\n            });\n        }\n        currentIndex = 0;\n        return payload;\n    };\n    use.dispatch = dispatch;\n    use.unshift = (dispatchable) => middleware.unshift(dispatchable);\n    use.remove = (dispatchable) => {\n        const index = middleware.indexOf(dispatchable);\n        if (index > -1)\n            middleware.splice(index, 1);\n    };\n    return use;\n}\n\n/**\n * Creates a new event emitter, each node uses one of these to allow it to emit\n * events to local listeners and tree listeners.\n *\n * @returns FormKitEventEmitter\n *\n * @internal\n */\nfunction createEmitter() {\n    const listeners = new Map();\n    const receipts = new Map();\n    let buffer = undefined;\n    const emitter = (node, event) => {\n        if (buffer) {\n            buffer.set(event.name, [node, event]);\n            return;\n        }\n        if (listeners.has(event.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            listeners.get(event.name).forEach((wrapper) => {\n                if (event.origin === node || wrapper.modifiers.includes('deep')) {\n                    wrapper.listener(event);\n                }\n            });\n        }\n        if (event.bubble) {\n            node.bubble(event);\n        }\n    };\n    /**\n     * Completely remove all listeners and receipts and buffers from the emitter.\n     */\n    emitter.flush = () => {\n        listeners.clear();\n        receipts.clear();\n        buffer === null || buffer === void 0 ? void 0 : buffer.clear();\n    };\n    /**\n     * Add an event listener\n     *\n     * @param eventName - The name of the event to listen to\n     * @param listener - The callback\n     *\n     * @returns string\n     *\n     * @internal\n     */\n    emitter.on = (eventName, listener) => {\n        const [event, ...modifiers] = eventName.split('.');\n        const receipt = listener.receipt || token();\n        const wrapper = {\n            modifiers,\n            event,\n            listener,\n            receipt,\n        };\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        listeners.has(event)\n            ? listeners.get(event).push(wrapper)\n            : listeners.set(event, [wrapper]);\n        receipts.has(receipt)\n            ? receipts.get(receipt).push(event)\n            : receipts.set(receipt, [event]);\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        return receipt;\n    };\n    /**\n     * Remove an event listener\n     *\n     * @param listenerOrReceipt - Either a receipt or the callback function.\n     *\n     * @internal\n     */\n    emitter.off = (receipt) => {\n        var _a;\n        if (receipts.has(receipt)) {\n            (_a = receipts.get(receipt)) === null || _a === void 0 ? void 0 : _a.forEach((event) => {\n                const eventListeners = listeners.get(event);\n                if (Array.isArray(eventListeners)) {\n                    listeners.set(event, eventListeners.filter((wrapper) => wrapper.receipt !== receipt));\n                }\n            });\n            receipts.delete(receipt);\n        }\n    };\n    /**\n     * Pause emitting values. Any events emitted while paused will not be emitted\n     * but rather \"stored\" — and whichever events are emitted last will be output.\n     * For example:\n     * pause()\n     * emit('foo', 1)\n     * emit('foo', 2)\n     * emit('bar', 3)\n     * emit('bar', 4)\n     * play()\n     * // would result in\n     * emit('foo', 2)\n     * emit('bar', 4)\n     * Optionally pauses all children as well.\n     *\n     * @param node - A node to pause all children on.\n     *\n     * @internal\n     */\n    emitter.pause = (node) => {\n        if (!buffer)\n            buffer = new Map();\n        if (node) {\n            node.walk((child) => child._e.pause());\n        }\n    };\n    /**\n     * Release the current event buffer.\n     *\n     * @param node - A node to unpause all children on.\n     *\n     * @internal\n     */\n    emitter.play = (node) => {\n        if (!buffer)\n            return;\n        const events = buffer;\n        buffer = undefined;\n        events.forEach(([node, event]) => emitter(node, event));\n        if (node) {\n            node.walk((child) => child._e.play());\n        }\n    };\n    return emitter;\n}\n/**\n * Emit an event from this node.\n *\n * @param node - The node that is emitting\n * @param context - The context of that node\n * @param name - The name of the event\n * @param payload - The payload to emit\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction emit$1(node, context, name, payload, // eslint-disable-line @typescript-eslint/explicit-module-boundary-types,\nbubble = true, meta) {\n    context._e(node, {\n        payload,\n        name,\n        bubble,\n        origin: node,\n        meta,\n    });\n    return node;\n}\n/**\n * Send an event from the given node up it's ancestor tree.\n *\n * @param node -\n * @param _context -\n * @param event -\n *\n * @internal\n */\nfunction bubble(node, _context, event) {\n    if (isNode(node.parent)) {\n        node.parent._e(node.parent, event);\n    }\n    return node;\n}\n/**\n * Adds an event listener to the node for a specific event. The event name is a\n * simple string matching the name of the event to listen to. It can optionally\n * include modifiers like eventName.deep\n *\n * @param node -\n * @param context -\n * @param name -\n * @param listener -\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction on(_node, context, name, listener) {\n    return context._e.on(name, listener);\n}\n/**\n * Removes an event listener from a node by the returned receipt from .on().\n *\n * @param node - The node to remote the listener from\n * @param context - The context to remove\n * @param receipt - The receipt returned by .on()\n *\n * @returns FormKitNode\n *\n * @internal\n */\nfunction off(node, context, receipt) {\n    context._e.off(receipt);\n    return node;\n}\n\n/**\n * FormKit's global error handler.\n *\n * @public\n */\nconst errorHandler = createDispatcher();\nerrorHandler((error, next) => {\n    if (!error.message)\n        error.message = String(`E${error.code}`);\n    return next(error);\n});\n/**\n * FormKit's global warning handler.\n *\n * @public\n */\nconst warningHandler = createDispatcher();\nwarningHandler((warning, next) => {\n    if (!warning.message)\n        warning.message = String(`W${warning.code}`);\n    const result = next(warning);\n    if (console && typeof console.warn === 'function')\n        console.warn(result.message);\n    return result;\n});\n/**\n * Globally emits a warning.\n *\n * @param code - The integer warning code.\n * @param data - Usually an object of information to include.\n *\n * @public\n */\nfunction warn(code, data = {}) {\n    warningHandler.dispatch({ code, data });\n}\n/**\n * Emits an error. Generally should result in an exception.\n *\n * @param code - The integer error code.\n * @param data - Usually an object of information to include.\n *\n * @public\n */\nfunction error(code, data = {}) {\n    throw Error(errorHandler.dispatch({ code, data }).message);\n}\n\n/**\n * Creates a new FormKitMessage object.\n *\n * @param conf - An object of optional properties of {@link FormKitMessage | FormKitMessage}.\n * @param node - A {@link @formkit/node#FormKitNode | FormKitNode}.\n *\n * @returns A {@link FormKitMessageProps | FormKitMessageProps}.\n *\n * @public\n */\nfunction createMessage(conf, node) {\n    const m = {\n        blocking: false,\n        key: token(),\n        meta: {},\n        type: 'state',\n        visible: true,\n        ...conf,\n    };\n    if (node && m.value && m.meta.localize !== false) {\n        m.value = node.t(m);\n        m.meta.locale = node.config.locale;\n    }\n    return m;\n}\n/**\n * The available traps on the node's store.\n *\n * @internal\n */\nconst storeTraps = {\n    apply: applyMessages,\n    set: setMessage,\n    remove: removeMessage,\n    filter: filterMessages,\n    reduce: reduceMessages,\n    release: releaseBuffer,\n    touch: touchMessages,\n};\n/**\n * Creates a new FormKit message store.\n *\n * @internal\n */\nfunction createStore(_buffer = false) {\n    const messages = {};\n    let node;\n    let buffer = _buffer;\n    let _b = [];\n    const _m = new Map();\n    let _r = undefined;\n    const store = new Proxy(messages, {\n        get(...args) {\n            const [_target, property] = args;\n            if (property === 'buffer')\n                return buffer;\n            if (property === '_b')\n                return _b;\n            if (property === '_m')\n                return _m;\n            if (property === '_r')\n                return _r;\n            if (has(storeTraps, property)) {\n                return storeTraps[property].bind(null, messages, store, node);\n            }\n            return Reflect.get(...args);\n        },\n        set(_t, prop, value) {\n            if (prop === '_n') {\n                node = value;\n                if (_r === '__n')\n                    releaseMissed(node, store);\n                return true;\n            }\n            else if (prop === '_b') {\n                _b = value;\n                return true;\n            }\n            else if (prop === 'buffer') {\n                buffer = value;\n                return true;\n            }\n            else if (prop === '_r') {\n                _r = value;\n                return true;\n            }\n            error(101, node);\n            return false;\n        },\n    });\n    return store;\n}\n/**\n * Adds a new value to a FormKit message bag.\n *\n * @param messageStore - The message store itself\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param message - The message object\n *\n * @internal\n */\nfunction setMessage(messageStore, store, node, message) {\n    if (store.buffer) {\n        store._b.push([[message]]);\n        return store;\n    }\n    if (messageStore[message.key] !== message) {\n        if (typeof message.value === 'string' && message.meta.localize !== false) {\n            // Expose the value to translation\n            const previous = message.value;\n            message.value = node.t(message);\n            if (message.value !== previous) {\n                message.meta.locale = node.props.locale;\n            }\n        }\n        const e = `message-${has(messageStore, message.key) ? 'updated' : 'added'}`;\n        messageStore[message.key] = Object.freeze(node.hook.message.dispatch(message));\n        node.emit(e, message);\n    }\n    return store;\n}\n/**\n * Run through each message in the store, and ensure it has been translated\n * to the proper language. This most frequently happens after a locale change.\n *\n * @internal\n */\nfunction touchMessages(messageStore, store) {\n    for (const key in messageStore) {\n        const message = { ...messageStore[key] };\n        store.set(message);\n    }\n}\n/**\n * Remove a message from the store.\n *\n * @param messageStore - The message store\n * @param store - The store interface\n * @param node - The node this store belongs to\n * @param key - The message key\n *\n * @returns FormKitStore\n *\n * @internal\n */\nfunction removeMessage(messageStore, store, node, key) {\n    if (has(messageStore, key)) {\n        const message = messageStore[key];\n        delete messageStore[key];\n        node.emit('message-removed', message);\n    }\n    if (store.buffer === true) {\n        store._b = store._b.filter((buffered) => {\n            buffered[0] = buffered[0].filter((m) => m.key !== key);\n            return buffered[1] || buffered[0].length;\n        });\n    }\n    return store;\n}\n/**\n * Iterates over all messages removing those that are no longer wanted.\n *\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n * @param callback - A callback accepting a message and returning a boolean\n * @param type - Pre filtered by a given message type\n *\n * @internal\n */\nfunction filterMessages(messageStore, store, node, callback, type) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        if ((!type || message.type === type) && !callback(message)) {\n            removeMessage(messageStore, store, node, key);\n        }\n    }\n}\n/**\n * Reduce the message store to some other generic value.\n *\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param _node - The node owner of this store\n * @param reducer - The callback that performs the reduction\n * @param accumulator - The initial value\n *\n * @returns\n *\n * @internal\n */\nfunction reduceMessages(messageStore, _store, _node, reducer, accumulator) {\n    for (const key in messageStore) {\n        const message = messageStore[key];\n        accumulator = reducer(accumulator, message);\n    }\n    return accumulator;\n}\n/**\n * @param messageStore - The store itself\n * @param _store - Unused but curried — the store interface itself\n * @param node - The node owner of this store\n * @param messages - An array of FormKitMessages to apply to this input, or an object of messages to apply to children.\n *\n * @internal\n */\nfunction applyMessages(_messageStore, store, node, messages, clear) {\n    if (Array.isArray(messages)) {\n        if (store.buffer) {\n            store._b.push([messages, clear]);\n            return;\n        }\n        // In this case we are applying messages to this node’s store.\n        const applied = new Set(messages.map((message) => {\n            store.set(message);\n            return message.key;\n        }));\n        // Remove any messages that were not part of the initial apply:\n        if (typeof clear === 'string') {\n            store.filter((message) => message.type !== clear || applied.has(message.key));\n        }\n        else if (typeof clear === 'function') {\n            store.filter((message) => !clear(message) || applied.has(message.key));\n        }\n    }\n    else {\n        for (const address in messages) {\n            const child = node.at(address);\n            if (child) {\n                child.store.apply(messages[address], clear);\n            }\n            else {\n                missed(node, store, address, messages[address], clear);\n            }\n        }\n    }\n}\n/**\n * Creates an array of message arrays from strings.\n *\n * @param node - FormKitNode\n * @param errors - Arrays or objects of form errors or input errors\n *\n * @internal\n */\nfunction createMessages(node, ...errors) {\n    const sourceKey = `${node.name}-set`;\n    const make = (error) => createMessage({\n        key: slugify(error),\n        type: 'error',\n        value: error,\n        meta: { source: sourceKey, autoClear: true },\n    });\n    return errors\n        .filter((m) => !!m)\n        .map((errorSet) => {\n        if (typeof errorSet === 'string')\n            errorSet = [errorSet];\n        if (Array.isArray(errorSet)) {\n            return errorSet.map((error) => make(error));\n        }\n        else {\n            const errors = {};\n            for (const key in errorSet) {\n                if (Array.isArray(errorSet[key])) {\n                    errors[key] = errorSet[key].map((error) => make(error));\n                }\n                else {\n                    errors[key] = [make(errorSet[key])];\n                }\n            }\n            return errors;\n        }\n    });\n}\n/**\n * @param store - The store to apply this missed applications.\n * @param address - The address that was missed (a node path that didn't yet exist)\n * @param messages - The messages that should have been applied.\n * @param clear - The clearing function (if any)\n *\n * @internal\n */\nfunction missed(node, store, address, messages, clear) {\n    var _a;\n    const misses = store._m;\n    if (!misses.has(address))\n        misses.set(address, []);\n    // The created receipt\n    if (!store._r)\n        store._r = releaseMissed(node, store);\n    (_a = misses.get(address)) === null || _a === void 0 ? void 0 : _a.push([messages, clear]);\n}\n/**\n * Releases messages that were applied to a child via parent, but the child did\n * not exist. Once the child does exist, the created event for that child will\n * bubble to this point, and any stored applications will be applied serially.\n *\n * @param store - The store object.\n *\n * @internal\n */\nfunction releaseMissed(node, store) {\n    return node.on('child.deep', ({ payload: child }) => {\n        store._m.forEach((misses, address) => {\n            if (node.at(address) === child) {\n                misses.forEach(([messages, clear]) => {\n                    child.store.apply(messages, clear);\n                });\n                store._m.delete(address);\n            }\n        });\n        // If all the stored misses were applied, remove the listener.\n        if (store._m.size === 0 && store._r) {\n            node.off(store._r);\n            store._r = undefined;\n        }\n    });\n}\n/**\n * Iterates over all buffered messages and applies them in sequence.\n *\n * @param messageStore - The store itself\n * @param store - The store interface\n * @param node - The node to filter for\n *\n * @internal\n */\nfunction releaseBuffer(_messageStore, store) {\n    store.buffer = false;\n    store._b.forEach(([messages, clear]) => store.apply(messages, clear));\n    store._b = [];\n}\n\n/**\n * Creates a new ledger for use on a single node's context.\n *\n * @internal\n */\nfunction createLedger() {\n    const ledger = {};\n    let n;\n    return {\n        count: (...args) => createCounter(n, ledger, ...args),\n        init(node) {\n            n = node;\n            node.on('message-added.deep', add(ledger, 1));\n            node.on('message-removed.deep', add(ledger, -1));\n        },\n        merge: (child) => merge(n, ledger, child),\n        settled(counterName) {\n            return has(ledger, counterName)\n                ? ledger[counterName].promise\n                : Promise.resolve();\n        },\n        unmerge: (child) => merge(n, ledger, child, true),\n        value(counterName) {\n            return has(ledger, counterName) ? ledger[counterName].count : 0;\n        },\n    };\n}\n/**\n * Creates a new counter object in the counting ledger.\n *\n * @param node - FormKitNode\n * @param ledger - The actual ledger storage object\n * @param counterName - The name of the counter, can be arbitrary\n * @param condition - The condition function (or string) that filters messages\n * @param increment - The increment value\n *\n * @internal\n */\nfunction createCounter(node, ledger, counterName, condition, increment = 0) {\n    condition = parseCondition(condition || counterName);\n    if (!has(ledger, counterName)) {\n        const counter = {\n            condition,\n            count: 0,\n            name: counterName,\n            node,\n            promise: Promise.resolve(),\n            resolve: () => { }, // eslint-disable-line @typescript-eslint/no-empty-function\n        };\n        ledger[counterName] = counter;\n        increment = node.store.reduce((sum, m) => sum + counter.condition(m) * 1, increment);\n        node.each((child) => {\n            child.ledger.count(counter.name, counter.condition);\n            increment += child.ledger.value(counter.name);\n        });\n    }\n    return count(ledger[counterName], increment).promise;\n}\n/**\n * We parse the condition to allow flexibility in how counters are specified.\n *\n * @param condition - The condition that, if true, allows a message to change a counter's value\n *\n * @internal\n */\nfunction parseCondition(condition) {\n    if (typeof condition === 'function') {\n        return condition;\n    }\n    return (m) => m.type === condition;\n}\n/**\n * Perform a counting action on the a given counter object of the ledger.\n *\n * @param counter - A counter object\n * @param increment - The amount by which we are changing the count value\n *\n * @internal\n */\nfunction count(counter, increment) {\n    const initial = counter.count;\n    const post = counter.count + increment;\n    counter.count = post;\n    if (initial === 0 && post !== 0) {\n        counter.node.emit(`unsettled:${counter.name}`, counter.count, false);\n        counter.promise = new Promise((r) => (counter.resolve = r));\n    }\n    else if (initial !== 0 && post === 0) {\n        counter.node.emit(`settled:${counter.name}`, counter.count, false);\n        counter.resolve();\n    }\n    counter.node.emit(`count:${counter.name}`, counter.count, false);\n    return counter;\n}\n/**\n * Returns a function to be used as an event listener for message events.\n *\n * @param ledger - A ledger to operate on\n * @param delta - The amount to add or subtract\n *\n * @internal\n */\nfunction add(ledger, delta) {\n    return (e) => {\n        for (const name in ledger) {\n            const counter = ledger[name];\n            if (counter.condition(e.payload)) {\n                count(counter, delta);\n            }\n        }\n    };\n}\n/**\n * Given a child node, add the parent node's counters to the child and then\n * rectify the upstream ledger counts. Generally used when attaching a child\n * to an already counted tree.\n *\n * @param parent - The parent that is \"receiving\" the child\n * @param ledger - The ledger object\n * @param child - The child (can be a subtree) that is being attached\n * @param remove - If the merge is removing instead of adding\n *\n * @internal\n */\nfunction merge(parent, ledger, child, remove = false) {\n    const originalParent = parent;\n    for (const key in ledger) {\n        const condition = ledger[key].condition;\n        if (!remove)\n            child.ledger.count(key, condition);\n        const increment = child.ledger.value(key) * (remove ? -1 : 1);\n        if (!parent)\n            continue;\n        do {\n            parent.ledger.count(key, condition, increment);\n            parent = parent.parent;\n        } while (parent);\n        parent = originalParent;\n    }\n}\n\n/**\n * A global registry of nodes by their alias or name (if root).\n */\nconst registry = new Map();\nconst reflected = new Map();\n/**\n * An event emitter for registered/set/unset nodes\n */\nconst emit = createEmitter();\n/**\n * Receipts of listeners.\n */\nconst receipts = [];\n/**\n * Registers a node to the registry _if_ the node is a root node, _or_ if the\n * node has an explicit node.props.alias. If these two things are not true,\n * then no node is registered (idempotent).\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction register(node) {\n    if (node.props.id) {\n        registry.set(node.props.id, node);\n        reflected.set(node, node.props.id);\n        emit(node, {\n            payload: node,\n            name: node.props.id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Deregister a node from the registry.\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction deregister(node) {\n    if (reflected.has(node)) {\n        const id = reflected.get(node); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        reflected.delete(node);\n        registry.delete(id);\n        emit(node, {\n            payload: null,\n            name: id,\n            bubble: false,\n            origin: node,\n        });\n    }\n}\n/**\n * Get a node by a particular id.\n *\n * @param id - Get a node by a given id.\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`.\n *\n * @public\n */\nfunction getNode$1(id) {\n    return registry.get(id);\n}\n/**\n * Resets the entire registry. Deregisters all nodes and removes all listeners.\n *\n * @public\n */\nfunction resetRegistry() {\n    registry.forEach((node) => {\n        deregister(node);\n    });\n    receipts.forEach((receipt) => emit.off(receipt));\n}\n/**\n * A way of watching changes in the global registry.\n *\n * @param id - A dot-syntax id where the node is located.\n * @param callback - A callback in the format of {@link FormKitEventListener | FormKitEventListener} to notify when the node is set or removed.\n *\n * @public\n */\nfunction watchRegistry(id, callback) {\n    // register a listener\n    receipts.push(emit.on(id, callback));\n}\n\n/**\n * Applies a given config change to the node.\n *\n * @param node - The node to check for config change\n * @param prop - Checks if this property exists in the local config or props\n * @param value - The value to set\n *\n * @internal\n */\nfunction configChange(node, prop, value) {\n    // When we return false, node.walk will not continue into that child.\n    let usingFallback = true;\n    !(prop in node.config._t)\n        ? node.emit(`config:${prop}`, value, false)\n        : (usingFallback = false);\n    if (!(prop in node.props)) {\n        node.emit('prop', { prop, value });\n        node.emit(`prop:${prop}`, value);\n    }\n    return usingFallback;\n}\n/**\n * Creates a new instance of a global configuration option. This object is\n * essentially just a FormKitOption object, but it can be used as the root for\n * FormKitConfig's proxy and retain event \"emitting\".\n *\n * @param options - An object of optional properties of {@link FormKitConfig | FormKitConfig}.\n *\n * @returns A {@link FormKitRootConfig | FormKitRootConfig}.\n *\n * @public\n */\nfunction createConfig$1(options = {}) {\n    const nodes = new Set();\n    const target = {\n        ...options,\n        ...{\n            _add: (node) => nodes.add(node),\n            _rm: (node) => nodes.delete(node),\n        },\n    };\n    const rootConfig = new Proxy(target, {\n        set(t, prop, value, r) {\n            if (typeof prop === 'string') {\n                nodes.forEach((node) => configChange(node, prop, value));\n            }\n            return Reflect.set(t, prop, value, r);\n        },\n    });\n    return rootConfig;\n}\n\n/**\n * Submits a FormKit form programmatically.\n *\n * @param id - The id of the form.\n *\n * @public\n */\nfunction submitForm(id) {\n    const formElement = document.getElementById(id);\n    if (formElement instanceof HTMLFormElement) {\n        const event = new Event('submit', { cancelable: true, bubbles: true });\n        formElement.dispatchEvent(event);\n        return;\n    }\n    warn(151, id);\n}\n\n/**\n * Clear all state and error messages.\n *\n * @internal\n */\nfunction clearState(node) {\n    const clear = (n) => {\n        for (const key in n.store) {\n            const message = n.store[key];\n            if (message.type === 'error' ||\n                (message.type === 'ui' && key === 'incomplete')) {\n                n.store.remove(key);\n            }\n            else if (message.type === 'state') {\n                n.store.set({ ...message, value: false });\n            }\n        }\n    };\n    clear(node);\n    node.walk(clear);\n}\n/**\n * Resets an input to its \"initial\" value. If the input is a group or list it\n * resets all the children as well.\n *\n * @param id - The id of an input to reset.\n * @param resetTo - A value to reset the node to.\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`.\n *\n * @public\n */\nfunction reset(id, resetTo) {\n    const node = typeof id === 'string' ? getNode$1(id) : id;\n    if (node) {\n        const initial = (n) => cloneAny(n.props.initial) ||\n            (n.type === 'group' ? {} : n.type === 'list' ? [] : undefined);\n        // pause all events in this tree.\n        node._e.pause(node);\n        // Set it back to basics\n        const resetValue = cloneAny(resetTo);\n        if (resetTo && !empty(resetTo)) {\n            node.props.initial = isObject(resetValue) ? init(resetValue) : resetValue;\n            node.props._init = node.props.initial;\n        }\n        node.input(initial(node), false);\n        // Set children back to basics in case they were additive (had their own value for example)\n        node.walk((child) => {\n            // Skip resetting synced lists to default.\n            if (child.type === 'list' && child.sync)\n                return;\n            child.input(initial(child), false);\n        });\n        // Finally we need to lay any values back on top (if it is a group/list) since group values\n        // take precedence over child values.\n        node.input(empty(resetValue) && resetValue ? resetValue : initial(node), false);\n        // If this is a deep reset, we need to make sure the \"initial\" state of all\n        // children are also reset. Fixes https://github.com/formkit/formkit/issues/791#issuecomment-1651213253\n        const isDeepReset = node.type !== 'input' && resetTo && !empty(resetTo) && isObject(resetTo);\n        if (isDeepReset) {\n            node.walk((child) => {\n                child.props.initial = isObject(child.value)\n                    ? init(child.value)\n                    : child.value;\n                child.props._init = node.props.initial;\n            });\n        }\n        // release the events.\n        node._e.play(node);\n        clearState(node);\n        node.emit('reset', node);\n        return node;\n    }\n    warn(152, id);\n    return;\n}\n\n/**\n * Default configuration options.\n */\nconst defaultConfig = {\n    delimiter: '.',\n    delay: 0,\n    locale: 'en',\n    rootClasses: (key) => ({ [`formkit-${kebab(key)}`]: true }),\n};\n/**\n * If a node’s name is set to useIndex, it replaces the node’s name with the\n * index of the node relative to its parent’s children.\n *\n * @internal\n */\nconst useIndex = Symbol('index');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * removed.\n *\n * @internal\n */\nconst valueRemoved = Symbol('removed');\n/**\n * When propagating values up a tree, this value indicates the child should be\n * moved.\n *\n * @internal\n */\nconst valueMoved = Symbol('moved');\n/**\n * When creating a new node and having its value injected directly at a specific\n * location.\n *\n * @internal\n */\nconst valueInserted = Symbol('inserted');\n/**\n * A simple type guard to determine if the context being evaluated is a list\n * type.\n *\n * @param arg - A {@link FormKitContextShape | FormKitContextShape}.\n *\n * @returns Returns a `boolean`.\n *\n * @public\n */\nfunction isList(arg) {\n    return arg.type === 'list' && Array.isArray(arg._value);\n}\n/**\n * Determine if a given object is a node.\n *\n * @example\n *\n * ```javascript\n * import { isNode, createNode } from '@formkit/core'\n *\n * const input = createNode({\n *   type: 'input', // defaults to 'input' if not specified\n *   value: 'hello node world',\n * })\n *\n * const obj = {};\n *\n * isNode(obj)\n * // false\n *\n * isNode(input)\n * // true\n * ```\n *\n * @param node - Any value.\n *\n * @returns Returns a `boolean`.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction isNode(node) {\n    return node && typeof node === 'object' && node.__FKNode__ === true;\n}\n/**\n * The setter you are trying to access is invalid.\n */\nconst invalidSetter = (node, _context, property) => {\n    error(102, [node, property]);\n};\nconst traps = {\n    _c: trap(getContext, invalidSetter, false),\n    add: trap(addChild),\n    addProps: trap(addProps),\n    address: trap(getAddress, invalidSetter, false),\n    at: trap(getNode),\n    bubble: trap(bubble),\n    clearErrors: trap(clearErrors$1),\n    calm: trap(calm),\n    config: trap(false),\n    define: trap(define),\n    disturb: trap(disturb),\n    destroy: trap(destroy),\n    extend: trap(extend),\n    hydrate: trap(hydrate),\n    index: trap(getIndex, setIndex, false),\n    input: trap(input),\n    each: trap(eachChild),\n    emit: trap(emit$1),\n    find: trap(find),\n    on: trap(on),\n    off: trap(off),\n    parent: trap(false, setParent),\n    plugins: trap(false),\n    remove: trap(removeChild),\n    root: trap(getRoot, invalidSetter, false),\n    reset: trap(resetValue),\n    resetConfig: trap(resetConfig),\n    setErrors: trap(setErrors$1),\n    submit: trap(submit),\n    t: trap(text),\n    use: trap(use),\n    name: trap(getName, false, false),\n    walk: trap(walkTree),\n};\n/**\n * These are all the available \"traps\" for a given node. You can think of these\n * a little bit like methods, but they are really Proxy interceptors.\n */\nfunction createTraps() {\n    return new Map(Object.entries(traps));\n}\n/**\n * Creates a getter/setter trap and curries the context/node pair\n *\n * @param getter - The getter function\n * @param setter - The setter function\n * @param curryGetter - Indicates if the getter should be curried or not\n *\n * @returns A {@link FormKitTrap | FormKitTrap}\n */\nfunction trap(getter, setter, curryGetter = true) {\n    return {\n        get: getter\n            ? (node, context) => curryGetter\n                ? (...args) => getter(node, context, ...args)\n                : getter(node, context)\n            : false,\n        set: setter !== undefined ? setter : invalidSetter.bind(null),\n    };\n}\n/**\n * Create all of the node's hook dispatchers.\n */\nfunction createHooks() {\n    const hooks = new Map();\n    return new Proxy(hooks, {\n        get(_, property) {\n            if (!hooks.has(property)) {\n                hooks.set(property, createDispatcher());\n            }\n            return hooks.get(property);\n        },\n    });\n}\n/**\n * This is a simple integer counter of every createName() where the name needs\n * to be generated.\n */\nlet nameCount = 0;\n/**\n * This is a simple integer counter of every default id created.\n */\nlet idCount = 0;\n/**\n * Resets the global number of node registrations, useful for deterministic\n * node naming.\n *\n * @public\n */\nfunction resetCount() {\n    nameCount = 0;\n    idCount = 0;\n}\n/**\n * Create a name-based dictionary of all children in an array.\n *\n * @param children - An array of {@link FormKitNode | FormKitNode}.\n *\n * @returns A dictionary of named {@link FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction names(children) {\n    return children.reduce((named, child) => Object.assign(named, { [child.name]: child }), {});\n}\n/**\n * This node is responsible for deterministically generating an id for this\n * node. This cannot just be a random id, it _must_ be deterministic to ensure\n * re-hydration of the form (like post-SSR) produces the same names/ids.\n *\n * @param options - A {@link FormKitOptions | FormKitOptions}\n *\n * @returns `string | symbol`\n *\n * @internal\n */\nfunction createName(options) {\n    var _a, _b;\n    if (((_a = options.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return useIndex;\n    return options.name || `${((_b = options.props) === null || _b === void 0 ? void 0 : _b.type) || 'input'}_${++nameCount}`;\n}\n/**\n * Creates the initial value for a node based on the options passed in and the\n * type of the input.\n *\n * @param options - A {@link FormKitOptions | FormKitOptions}.\n *\n * @returns `unknown`\n *\n * @public\n */\nfunction createValue(options) {\n    if (options.type === 'group') {\n        return init(options.value &&\n            typeof options.value === 'object' &&\n            !Array.isArray(options.value)\n            ? options.value\n            : {});\n    }\n    else if (options.type === 'list') {\n        return init(Array.isArray(options.value) ? options.value : []);\n    }\n    return options.value;\n}\n/**\n * Sets the internal value of the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param value - A input value to the node\n * @param async - If its an async call\n *\n * @returns `Promise<unknown>`\n *\n * @internal\n */\nfunction input(node, context, value, async = true) {\n    context._value = validateInput(node, node.hook.input.dispatch(value));\n    node.emit('input', context._value);\n    if (node.isCreated &&\n        node.type === 'input' &&\n        eq(context._value, context.value)) {\n        node.emit('commitRaw', context.value);\n        // Perform an early return if the value hasn't changed during this input.\n        return context.settled;\n    }\n    if (context.isSettled)\n        node.disturb();\n    if (async) {\n        if (context._tmo)\n            clearTimeout(context._tmo);\n        context._tmo = setTimeout(commit, node.props.delay, node, context);\n    }\n    else {\n        commit(node, context);\n    }\n    return context.settled;\n}\n/**\n * Validate that the current input is allowed.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param value - The value that is being validated\n *\n * @returns `T`\n *\n * @internal\n */\nfunction validateInput(node, value) {\n    switch (node.type) {\n        // Inputs are allowed to have any type\n        case 'input':\n            break;\n        case 'group':\n            if (!value || typeof value !== 'object')\n                error(107, [node, value]);\n            break;\n        case 'list':\n            if (!Array.isArray(value))\n                error(108, [node, value]);\n            break;\n    }\n    return value;\n}\n/**\n * Commits the working value to the node graph as the value of this node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param calm - If it calms the node\n * @param hydrate - If it hydrates the node\n *\n * @internal\n */\nfunction commit(node, context, calm = true, hydrate = true) {\n    context._value = context.value = node.hook.commit.dispatch(context._value);\n    if (node.type !== 'input' && hydrate)\n        node.hydrate();\n    node.emit('commitRaw', context.value);\n    node.emit('commit', context.value);\n    if (calm)\n        node.calm();\n}\n/**\n * Perform a modification to a single element of a parent aggregate value. This\n * is only performed on the pre-committed value (_value), although typically\n * the value and _value are both linked in memory.\n *\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction partial(context, { name, value, from }) {\n    if (Object.isFrozen(context._value))\n        return;\n    if (isList(context)) {\n        const insert = value === valueRemoved\n            ? []\n            : value === valueMoved && typeof from === 'number'\n                ? context._value.splice(from, 1)\n                : [value];\n        context._value.splice(name, value === valueMoved || from === valueInserted ? 0 : 1, ...insert);\n        return;\n    }\n    // In this case we know for sure we're dealing with a group, TS doesn't\n    // know that however, so we use some unpleasant casting here\n    if (value !== valueRemoved) {\n        context._value[name] = value;\n    }\n    else {\n        delete context._value[name];\n    }\n}\n/**\n * Hydrate node and its children\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction hydrate(node, context) {\n    const _value = context._value;\n    // For \"synced\" lists the underlying nodes need to be synced to their values\n    // before hydration.\n    if (node.type === 'list' && node.sync)\n        syncListNodes(node, context);\n    context.children.forEach((child) => {\n        if (typeof _value !== 'object')\n            return;\n        if (child.name in _value) {\n            // In this case, the parent has a value to give to the child, so we\n            // perform a down-tree synchronous input which will cascade values down\n            // and then ultimately back up.\n            const childValue = child.type !== 'input' ||\n                (_value[child.name] && typeof _value[child.name] === 'object')\n                ? init(_value[child.name])\n                : _value[child.name];\n            // If the two are already equal or the child is currently disturbed then\n            // don’t send the value down since it will squash the child’s value.\n            if (!child.isSettled ||\n                (!isObject(childValue) && eq(childValue, child._value)))\n                return;\n            // If there is a change to the child, push the new value down.\n            child.input(childValue, false);\n        }\n        else {\n            if (node.type !== 'list' || typeof child.name === 'number') {\n                // In this case, the parent’s values have no knowledge of the child\n                // value — this typically occurs on the commit at the end of addChild()\n                // we need to create a value reservation for this node’s name. This is\n                // especially important when dealing with lists where index matters.\n                partial(context, { name: child.name, value: child.value });\n            }\n            if (!_value.__init) {\n                // In this case, someone has explicitly set the value to an empty object\n                // with node.input({}) so we do not define the __init property:\n                if (child.type === 'group')\n                    child.input({}, false);\n                else if (child.type === 'list')\n                    child.input([], false);\n                else\n                    child.input(undefined, false);\n            }\n        }\n    });\n    return node;\n}\n/**\n * Hydrate a list node and its children. There are some assumptions about the\n * child nodes that are made here:\n * 1. The child nodes are either:\n *    - Are scalars and their values can be exchanged.\n *    - Are groups and should maintain node identity.\n * 2. The value of the list will be a 1-1 representation of the children.\n * 3. If new values are *added* to the list, those nodes must be created by some\n *   other means — adding a value does not add a node automatically.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n */\nfunction syncListNodes(node, context) {\n    const _value = node._value;\n    if (!Array.isArray(_value))\n        return;\n    const newChildren = [];\n    const unused = new Set(context.children);\n    const placeholderValues = new Map();\n    // 1. Iterate over the values and if the values at the same index are equal\n    //    then we can reuse the node. Otherwise we add a `null` placeholder.\n    _value.forEach((value, i) => {\n        if (context.children[i] && context.children[i]._value === value) {\n            newChildren.push(context.children[i]);\n            unused.delete(context.children[i]);\n        }\n        else {\n            newChildren.push(null);\n            const indexes = placeholderValues.get(value) || [];\n            indexes.push(i);\n            placeholderValues.set(value, indexes);\n        }\n    });\n    // 2. If there are unused nodes, and there are null nodes in the new children\n    //    then we attempt to match those irregardless of their index.\n    if (unused.size && placeholderValues.size) {\n        unused.forEach((child) => {\n            if (placeholderValues.has(child._value)) {\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                const indexes = placeholderValues.get(child._value);\n                const index = indexes.shift();\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n                newChildren[index] = child;\n                unused.delete(child);\n                if (!indexes.length)\n                    placeholderValues.delete(child._value);\n            }\n        });\n    }\n    // 3. If there are still unused nodes, and unused placeholders, we assign the\n    //    unused nodes to the unused placeholders in order.\n    const emptyIndexes = [];\n    placeholderValues.forEach((indexes) => {\n        emptyIndexes.push(...indexes);\n    });\n    while (unused.size && emptyIndexes.length) {\n        const child = unused.values().next().value;\n        const index = emptyIndexes.shift();\n        if (index === undefined)\n            break;\n        newChildren[index] = child;\n        unused.delete(child);\n    }\n    // 4. If there are placeholders in the children, we create true placeholders.\n    emptyIndexes.forEach((index, value) => {\n        newChildren[index] = createPlaceholder({ value });\n    });\n    // 5. If there are unused nodes, we remove them. To ensure we don’t remove any\n    //    values we explicitly remove each child’s parent and manually unmerge the\n    //    child from the parent’s ledger before destroying the subtree.\n    if (unused.size) {\n        unused.forEach((child) => {\n            if (!('__FKP' in child)) {\n                const parent = child._c.parent;\n                if (!parent || isPlaceholder(parent))\n                    return;\n                parent.ledger.unmerge(child);\n                child._c.parent = null;\n                child.destroy();\n            }\n        });\n    }\n    // 6. Finally, we assign the new children to the context.\n    context.children = newChildren;\n}\n/**\n * Disturbs the state of a node from settled to unsettled — creating appropriate\n * promises and resolutions.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction disturb(node, context) {\n    var _a;\n    if (context._d <= 0) {\n        context.isSettled = false;\n        node.emit('settled', false, false);\n        context.settled = new Promise((resolve) => {\n            context._resolve = resolve;\n        });\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.disturb();\n    }\n    context._d++;\n    return node;\n}\n/**\n * Calms the given node's disturbed state by one.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param value - A {@link FormKitChildValue | FormKitChildValue}\n *\n * @internal\n */\nfunction calm(node, context, value) {\n    var _a;\n    if (value !== undefined && node.type !== 'input') {\n        partial(context, value);\n        // Commit the value up, but do not hydrate back down\n        return commit(node, context, true, false);\n    }\n    if (context._d > 0)\n        context._d--;\n    if (context._d === 0) {\n        context.isSettled = true;\n        node.emit('settled', true, false);\n        if (node.parent)\n            (_a = node.parent) === null || _a === void 0 ? void 0 : _a.calm({ name: node.name, value: context.value });\n        if (context._resolve)\n            context._resolve(context.value);\n    }\n}\n/**\n * This node is being removed and needs to be cleaned up.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction destroy(node, context) {\n    node.emit('destroying', node);\n    // flush all messages out\n    node.store.filter(() => false);\n    if (node.parent) {\n        node.parent.emit('childRemoved', node);\n        node.parent.remove(node);\n    }\n    deregister(node);\n    node.emit('destroyed', node);\n    context._e.flush();\n    context._value = context.value = undefined;\n    for (const property in context.context) {\n        delete context.context[property];\n    }\n    context.plugins.clear();\n    context.context = null; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n}\n/**\n * Defines the current input type concretely.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param definition - A {@link FormKitTypeDefinition | FormKitTypeDefinition}\n *\n * @internal\n */\nfunction define(node, context, definition) {\n    // Assign the type\n    context.type = definition.type;\n    // Assign the definition\n    context.props.definition = clone(definition);\n    // Ensure the type is seeded with the `__init` value.\n    context.value = context._value = createValue({\n        type: node.type,\n        value: context.value,\n    });\n    /**\n     * If the user has a typename defined, use it here.\n     */\n    if (definition.forceTypeProp) {\n        if (node.props.type)\n            node.props.originalType = node.props.type;\n        context.props.type = definition.forceTypeProp;\n    }\n    /**\n     * If the input is part of a family of inputs, add that prop.\n     */\n    if (definition.family) {\n        context.props.family = definition.family;\n    }\n    // Apply any input features before resetting the props.\n    if (definition.features) {\n        definition.features.forEach((feature) => feature(node));\n    }\n    // Its possible that input-defined \"props\" have ended up in the context attrs\n    // these should be moved back out of the attrs object.\n    if (definition.props) {\n        node.addProps(definition.props);\n    }\n    node.emit('defined', definition);\n}\n/**\n * Adds props to a given node by stripping them out of the node.props.attrs and\n * then adding them to the nodes.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param props - An array of prop strings (in camelCase!)\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction addProps(node, context, props) {\n    var _a;\n    if (node.props.attrs) {\n        const attrs = { ...node.props.attrs };\n        // Temporarily disable prop emits\n        node.props._emit = false;\n        for (const attr in attrs) {\n            const camelName = camel(attr);\n            if (props.includes(camelName)) {\n                node.props[camelName] = attrs[attr];\n                delete attrs[attr];\n            }\n        }\n        const initial = cloneAny(context._value);\n        node.props.initial =\n            node.type !== 'input' ? init(initial) : initial;\n        // Re-enable prop emits\n        node.props._emit = true;\n        node.props.attrs = attrs;\n        if (node.props.definition) {\n            node.props.definition.props = [\n                ...(((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.props) || []),\n                ...props,\n            ];\n        }\n    }\n    node.emit('added-props', props);\n    return node;\n}\n/**\n * Adds a child to the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A parent {@link FormKitContext | FormKitContext}\n * @param child - A {@link FormKitNode | FormKitNode}\n * @param listIndex - A index number to be added at\n *\n * @internal\n */\nfunction addChild(parent, parentContext, child, listIndex) {\n    if (parent.type === 'input')\n        error(100, parent);\n    if (child.parent && child.parent !== parent) {\n        child.parent.remove(child);\n    }\n    // Synchronously set the initial value on the parent\n    if (!parentContext.children.includes(child)) {\n        if (listIndex !== undefined && parent.type === 'list') {\n            // Inject the child:\n            const existingNode = parentContext.children[listIndex];\n            if (existingNode && '__FKP' in existingNode) {\n                // The node index is populated by a placeholderNode so we need to\n                // remove that replace it with the real node (the current child).\n                child._c.uid = existingNode.uid;\n                parentContext.children.splice(listIndex, 1, child);\n            }\n            else {\n                parentContext.children.splice(listIndex, 0, child);\n            }\n            if (Array.isArray(parent.value) &&\n                parent.value.length < parentContext.children.length) {\n                // When adding an node or value to a list it is absolutely critical to\n                // know if, at the moment of injection, the parent’s value or the node\n                // children are the source of truth. For example, if a user pushes or\n                // splices a new value onto the lists’s array then we want to use that\n                // value as the value of the new node, but if a user adds a node to the\n                // list then we want the node’s value. In this specific case, we\n                // assume (due to length) that a new node was injected into the list, so\n                // we want that new node’s value injected into the parent list value.\n                parent.disturb().calm({\n                    name: listIndex,\n                    value: child.value,\n                    from: valueInserted,\n                });\n            }\n        }\n        else {\n            parentContext.children.push(child);\n        }\n        if (!child.isSettled)\n            parent.disturb();\n    }\n    if (child.parent !== parent) {\n        child.parent = parent;\n        // In this edge case middleware changed the parent assignment so we need to\n        // re-add the child\n        if (child.parent !== parent) {\n            parent.remove(child);\n            child.parent.add(child);\n            return parent;\n        }\n    }\n    else {\n        // When a parent is properly assigned, we inject the parent's plugins on the\n        // child.\n        child.use(parent.plugins);\n    }\n    // Finally we call commit here, which sub-calls hydrate(), hydrate() will\n    // resolve any conflict between the parent and child values, and also ensure\n    // proper \"placeholders\" are made on the parent.\n    commit(parent, parentContext, false);\n    parent.ledger.merge(child);\n    parent.emit('child', child);\n    return parent;\n}\n/**\n * The setter for node.parent = FormKitNode\n * @param child - A child {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param _property - A property to be setted\n * @param parent - A parent {@link FormKitNode | FormKitNode}\n *\n * @returns `boolean`\n *\n * @internal\n */\nfunction setParent(child, context, _property, parent) {\n    if (isNode(parent)) {\n        if (child.parent && child.parent !== parent) {\n            child.parent.remove(child);\n        }\n        context.parent = parent;\n        child.resetConfig();\n        !parent.children.includes(child)\n            ? parent.add(child)\n            : child.use(parent.plugins);\n        return true;\n    }\n    if (parent === null) {\n        context.parent = null;\n        return true;\n    }\n    return false;\n}\n/**\n * Removes a child from the node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param child - A child {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction removeChild(node, context, child) {\n    const childIndex = context.children.indexOf(child);\n    if (childIndex !== -1) {\n        if (child.isSettled)\n            node.disturb();\n        context.children.splice(childIndex, 1);\n        // If an ancestor uses the preserve prop, then we are expected to not remove\n        // our values on this node either, see #53\n        let preserve = undefine(child.props.preserve);\n        let parent = child.parent;\n        while (preserve === undefined && parent) {\n            preserve = undefine(parent.props.preserve);\n            parent = parent.parent;\n        }\n        if (!preserve) {\n            node.calm({\n                name: node.type === 'list' ? childIndex : child.name,\n                value: valueRemoved,\n            });\n        }\n        else {\n            node.calm();\n        }\n        child.parent = null;\n        // Remove the child from the config. Is this weird? Yes. Is it ok? Yes.\n        child.config._rmn = child;\n    }\n    node.ledger.unmerge(child);\n    return node;\n}\n/**\n * Iterate over each immediate child and perform a callback.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param callback - A {@link FormKitChildCallback | FormKitChildCallback}\n *\n * @internal\n */\nfunction eachChild(_node, context, callback) {\n    context.children.forEach((child) => !('__FKP' in child) && callback(child));\n}\n/**\n * Walk all nodes below this one and execute a callback.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param callback - A {@link FormKitChildCallback | FormKitChildCallback}\n * @param stopIfFalse - Boolean to stop running on children\n * @param skipSubtreeOnFalse - Boolean that when true prevents recursion into a deeper node when the callback returns false\n *\n * @internal\n */\nfunction walkTree(_node, context, callback, stopIfFalse = false, skipSubtreeOnFalse = false) {\n    context.children.some((child) => {\n        if ('__FKP' in child)\n            return false;\n        const val = callback(child);\n        // return true to stop the walk early\n        if (stopIfFalse && val === false)\n            return true;\n        if (skipSubtreeOnFalse && val === false)\n            return false;\n        return child.walk(callback, stopIfFalse, skipSubtreeOnFalse);\n    });\n}\n/**\n * Set the configuration options of the node and it's subtree.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction resetConfig(node, context) {\n    const parent = node.parent || undefined;\n    context.config = createConfig(node.config._t, parent);\n    node.walk((n) => n.resetConfig());\n}\n/**\n * Adds a plugin to the node, its children, and executes it.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param plugin -\n * {@link FormKitPlugin | FormKitPlugin}\n * {@link FormKitPlugin | FormKitPlugin[]}\n * {@link FormKitPlugin | Set<FormKitPlugin>}\n * @param run - If it will run on creation\n * @param library - If it will run on library creation\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction use(node, context, plugin, run = true, library = true) {\n    if (Array.isArray(plugin) || plugin instanceof Set) {\n        plugin.forEach((p) => use(node, context, p));\n        return node;\n    }\n    if (!context.plugins.has(plugin)) {\n        if (library && typeof plugin.library === 'function')\n            plugin.library(node);\n        // When plugins return false, they are never added as to the plugins Set\n        // meaning they only ever have access to the single node they were added on.\n        if (run && plugin(node) !== false) {\n            context.plugins.add(plugin);\n            node.children.forEach((child) => child.use(plugin));\n        }\n    }\n    return node;\n}\n/**\n * Moves a node in the parent’s children to the given index.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param _property - A property to add\n * @param setIndex - The index to move the node\n *\n * @internal\n */\nfunction setIndex(node, _context, _property, setIndex) {\n    if (isNode(node.parent)) {\n        const children = node.parent.children;\n        const index = setIndex >= children.length\n            ? children.length - 1\n            : setIndex < 0\n                ? 0\n                : setIndex;\n        const oldIndex = children.indexOf(node);\n        if (oldIndex === -1)\n            return false;\n        children.splice(oldIndex, 1);\n        children.splice(index, 0, node);\n        node.parent.children = children;\n        if (node.parent.type === 'list')\n            node.parent\n                .disturb()\n                .calm({ name: index, value: valueMoved, from: oldIndex });\n        return true;\n    }\n    return false;\n}\n/**\n * Retrieves the index of a node from the parent’s children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getIndex(node) {\n    if (node.parent) {\n        const index = [...node.parent.children].indexOf(node);\n        // If the index is currently -1 then the node isnt finished booting, so it\n        // must be the next node.\n        return index === -1 ? node.parent.children.length : index;\n    }\n    return -1;\n}\n/**\n * Retrieves the context object of a given node. This is intended to be a\n * private trap and should absolutely not be used in plugins or user-land code.\n *\n * @param _node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getContext(_node, context) {\n    return context;\n}\n/**\n * Get the name of the current node, allowing for slight mutations.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getName(node, context) {\n    var _a;\n    if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'list')\n        return node.index;\n    return context.name !== useIndex ? context.name : node.index;\n}\n/**\n * Returns the address of the current node.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction getAddress(node, context) {\n    return context.parent\n        ? context.parent.address.concat([node.name])\n        : [node.name];\n}\n/**\n * Fetches a node from the tree by its address.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param locator - A string or {@link FormKitAddress | FormKitAddress} to find in the tree.\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getNode(node, _context, locator) {\n    const address = typeof locator === 'string' ? locator.split(node.config.delimiter) : locator;\n    if (!address.length)\n        return undefined;\n    const first = address[0];\n    let pointer = node.parent;\n    if (!pointer) {\n        // This address names the root node, remove it to get child name:\n        if (String(address[0]) === String(node.name))\n            address.shift();\n        // All root nodes start at themselves ultimately:\n        pointer = node;\n    }\n    // Any addresses starting with $parent should discard it\n    if (first === '$parent')\n        address.shift();\n    while (pointer && address.length) {\n        const name = address.shift();\n        switch (name) {\n            case '$root':\n                pointer = node.root;\n                break;\n            case '$parent':\n                pointer = pointer.parent;\n                break;\n            case '$self':\n                pointer = node;\n                break;\n            default:\n                pointer =\n                    pointer.children.find((c) => !('__FKP' in c) && String(c.name) === String(name)) || select(pointer, name);\n        }\n    }\n    return pointer || undefined;\n}\n/**\n * Perform selections on a subtree using the address \"selector\" methods.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param selector - A `string | number` to find in the node\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`\n *\n * @internal\n */\nfunction select(node, selector) {\n    const matches = String(selector).match(/^(find)\\((.*)\\)$/);\n    if (matches) {\n        const [, action, argStr] = matches;\n        const args = argStr.split(',').map((arg) => arg.trim());\n        switch (action) {\n            case 'find':\n                return node.find(args[0], args[1]);\n            default:\n                return undefined;\n        }\n    }\n    return undefined;\n}\n/**\n * Perform a breadth first search and return the first instance of a node that\n * is found in the subtree or undefined.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param searchTerm - The term we are searching for\n * @param searcher - Either a key of {@link FormKitNode | FormKitNode}, or a {@link FormKitSearchFunction | FormKitSearchFunction}\n *\n * @returns A {@link FormKitNode | FormKitNode} or `undefined`\n *\n * @internal\n */\nfunction find(node, _context, searchTerm, searcher) {\n    return bfs(node, searchTerm, searcher);\n}\n/**\n * Perform a breadth-first search on a node subtree and locate the first\n * instance of a match.\n *\n * @param tree - A {@link FormKitNode | FormKitNode} to start from.\n * @param searchValue - A value to be searched.\n * @param searchGoal - A goal value.\n *\n * @returns A {@link FormKitNode | FormKitNode } or `undefined`.\n *\n * @public\n */\nfunction bfs(tree, searchValue, searchGoal = 'name') {\n    const search = typeof searchGoal === 'string'\n        ? (n) => n[searchGoal] == searchValue // non-strict comparison is intentional\n        : searchGoal;\n    const stack = [tree];\n    while (stack.length) {\n        const node = stack.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        if ('__FKP' in node)\n            continue;\n        if (search(node, searchValue))\n            return node;\n        stack.push(...node.children);\n    }\n    return undefined;\n}\n/**\n * Get the root node of the tree.\n *\n * @param n - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction getRoot(n) {\n    let node = n;\n    while (node.parent) {\n        node = node.parent;\n    }\n    return node;\n}\n/**\n * Creates a new configuration option.\n *\n * @param target - An object of optional properties of {@link FormKitConfig | FormKitConfig}\n * @param parent - A parent {@link FormKitNode | FormKitNode}\n *\n * @returns {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction createConfig(target = {}, parent) {\n    let node = undefined;\n    return new Proxy(target, {\n        get(...args) {\n            const prop = args[1];\n            if (prop === '_t')\n                return target;\n            const localValue = Reflect.get(...args);\n            // Check our local values first\n            if (localValue !== undefined)\n                return localValue;\n            // Then check our parent values next\n            if (parent) {\n                const parentVal = parent.config[prop];\n                if (parentVal !== undefined)\n                    return parentVal;\n            }\n            if (target.rootConfig && typeof prop === 'string') {\n                const rootValue = target.rootConfig[prop];\n                if (rootValue !== undefined)\n                    return rootValue;\n            }\n            // The default delay value should be 20\n            if (prop === 'delay' && (node === null || node === void 0 ? void 0 : node.type) === 'input')\n                return 20;\n            // Finally check the default values\n            return defaultConfig[prop];\n        },\n        set(...args) {\n            const prop = args[1];\n            const value = args[2];\n            if (prop === '_n') {\n                node = value;\n                if (target.rootConfig)\n                    target.rootConfig._add(node);\n                return true;\n            }\n            if (prop === '_rmn') {\n                if (target.rootConfig)\n                    target.rootConfig._rm(node);\n                node = undefined;\n                return true;\n            }\n            if (!eq(target[prop], value, false)) {\n                const didSet = Reflect.set(...args);\n                if (node) {\n                    node.emit(`config:${prop}`, value, false);\n                    configChange(node, prop, value);\n                    // Walk the node tree and notify of config/prop changes where relevant\n                    node.walk((n) => configChange(n, prop, value), false, true);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * Given a string of text, expose it for modification, translation, or full\n * replacement.\n\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param key - A {@link FormKitTextFragment | FormKitTextFragment}, or generic string of text\n * @param type - A string to represent the text type\n *\n * @returns `string`\n *\n * @internal\n */\nfunction text(node, _context, key, type = 'ui') {\n    const fragment = typeof key === 'string' ? { key, value: key, type } : key;\n    const value = node.hook.text.dispatch(fragment);\n    node.emit('text', value, false);\n    return value.value;\n}\n/**\n * Submits the nearest ancestor that is a FormKit \"form\". It determines which\n * node is a form by locating an ancestor where node.props.isForm = true.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction submit(node) {\n    const name = node.name;\n    do {\n        if (node.props.isForm === true)\n            break;\n        if (!node.parent)\n            error(106, name);\n        node = node.parent;\n    } while (node);\n    if (node.props.id) {\n        submitForm(node.props.id);\n    }\n}\n/**\n * Reset to the original value.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param value - The value to reset to\n *\n * @internal\n */\nfunction resetValue(node, _context, value) {\n    return reset(node, value);\n}\n/**\n * Sets errors on the node and optionally its children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param localErrors - An array of {@link ErrorMessages | ErrorMessages} to set on this node\n * @param childErrors - An object of name of {@link ErrorMessages | ErrorMessages} to set on children.\n *\n * @internal\n */\nfunction setErrors$1(node, _context, localErrors, childErrors) {\n    const sourceKey = `${node.name}-set`;\n    const errors = node.hook.setErrors.dispatch({ localErrors, childErrors });\n    createMessages(node, errors.localErrors, errors.childErrors).forEach((errors) => {\n        node.store.apply(errors, (message) => message.meta.source === sourceKey);\n    });\n    return node;\n}\n/**\n * Clears errors on the node and optionally its children.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param _context - A {@link FormKitContext | FormKitContext}\n * @param clearChildErrors - A boolean to clear children error or not.\n * @param sourceKey - The source key string to reset.\n *\n * @internal\n */\nfunction clearErrors$1(node, context, clearChildErrors = true, sourceKey) {\n    setErrors$1(node, context, []);\n    if (clearChildErrors) {\n        sourceKey = sourceKey || `${node.name}-set`;\n        node.walk((child) => {\n            child.store.filter((message) => {\n                return !(message.type === 'error' &&\n                    message.meta &&\n                    message.meta.source === sourceKey);\n            });\n        });\n    }\n    return node;\n}\n/**\n * Create props based on initial values\n *\n * @param initial - An initial value to be transformed\n *\n * @internal\n */\nfunction createProps(initial) {\n    const props = {\n        initial: typeof initial === 'object' ? cloneAny(initial) : initial,\n    };\n    let node;\n    let isEmitting = true;\n    return new Proxy(props, {\n        get(...args) {\n            const [_t, prop] = args;\n            if (has(props, prop))\n                return Reflect.get(...args);\n            if (node && typeof prop === 'string' && node.config[prop] !== undefined)\n                return node.config[prop];\n            return undefined;\n        },\n        set(target, property, originalValue, receiver) {\n            if (property === '_n') {\n                node = originalValue;\n                return true;\n            }\n            if (property === '_emit') {\n                isEmitting = originalValue;\n                return true;\n            }\n            const { prop, value } = node.hook.prop.dispatch({\n                prop: property,\n                value: originalValue,\n            });\n            // Typescript compiler cannot handle a symbol index, even though js can:\n            if (!eq(props[prop], value, false) ||\n                typeof value === 'object') {\n                const didSet = Reflect.set(target, prop, value, receiver);\n                if (isEmitting) {\n                    node.emit('prop', { prop, value });\n                    if (typeof prop === 'string')\n                        node.emit(`prop:${prop}`, value);\n                }\n                return didSet;\n            }\n            return true;\n        },\n    });\n}\n/**\n * Applies a new trap to the FormKitNode allowing plugins to extend the\n * base functionality of a FormKitNode.\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param context - A {@link FormKitContext | FormKitContext}\n * @param property - A string of the property name\n * @param trap - A {@link FormKitTrap | FormKitTrap}\n * @returns\n */\nfunction extend(node, context, property, trap) {\n    context.traps.set(property, trap);\n    return node;\n}\n/**\n * A cheap function that iterates over all plugins and stops once node.define\n * is called.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param plugins - An array of {@link FormKitPlugin | FormKitPlugin}\n *\n * @internal\n */\nfunction findDefinition(node, plugins) {\n    // If the definition is already there, force call to define.\n    if (node.props.definition)\n        return node.define(node.props.definition);\n    for (const plugin of plugins) {\n        if (node.props.definition)\n            return;\n        if (typeof plugin.library === 'function') {\n            plugin.library(node);\n        }\n    }\n}\n/**\n * Create a new context object for our a FormKit node, given default information\n *\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link FormKitContext | FormKitContext}\n *\n * @internal\n */\nfunction createContext(options) {\n    const value = createValue(options);\n    const config = createConfig(options.config || {}, options.parent);\n    return {\n        _d: 0,\n        _e: createEmitter(),\n        uid: Symbol(),\n        _resolve: false,\n        _tmo: false,\n        _value: value,\n        children: dedupe(options.children || []),\n        config,\n        hook: createHooks(),\n        isCreated: false,\n        isSettled: true,\n        ledger: createLedger(),\n        name: createName(options),\n        parent: options.parent || null,\n        plugins: new Set(),\n        props: createProps(value),\n        settled: Promise.resolve(value),\n        store: createStore(true),\n        sync: options.sync || false,\n        traps: createTraps(),\n        type: options.type || 'input',\n        value,\n    };\n}\n/**\n * Initialize a node object's internal properties.\n *\n * @param node - A {@link FormKitNode | FormKitNode}\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link FormKitNode | FormKitNode}\n *\n * @internal\n */\nfunction nodeInit(node, options) {\n    var _a, _b, _f;\n    const hasInitialId = (_a = options.props) === null || _a === void 0 ? void 0 : _a.id;\n    if (!hasInitialId)\n        (_b = options.props) === null || _b === void 0 ? true : delete _b.id;\n    // Set the internal node on the props, config, ledger and store\n    node.ledger.init((node.store._n = node.props._n = node.config._n = node));\n    // Apply given in options to the node.\n    node.props._emit = false;\n    // Sets the initial props and initial ID if not provided.\n    Object.assign(node.props, hasInitialId ? {} : { id: `input_${idCount++}` }, (_f = options.props) !== null && _f !== void 0 ? _f : {});\n    node.props._emit = true;\n    // Attempt to find a definition from the pre-existing plugins.\n    findDefinition(node, new Set([\n        ...(options.plugins || []),\n        ...(node.parent ? node.parent.plugins : []),\n    ]));\n    // Then we apply each plugin's root code, we do this with an explicit loop\n    // for that ity-bitty performance bump.\n    if (options.plugins) {\n        for (const plugin of options.plugins) {\n            use(node, node._c, plugin, true, false);\n        }\n    }\n    // Apply the parent to each child.\n    node.each((child) => node.add(child));\n    // If the node has a parent, ensure it's properly nested bi-directionally.\n    if (node.parent)\n        node.parent.add(node, options.index);\n    // Inputs are leafs, and cannot have children\n    if (node.type === 'input' && node.children.length)\n        error(100, node);\n    // Apply the input hook to the initial value.\n    input(node, node._c, node._value, false);\n    // Release the store buffer\n    node.store.release();\n    // Register the node globally if someone explicitly gave it an id\n    if (hasInitialId)\n        register(node);\n    // Our node is finally ready, emit it to the world\n    node.emit('created', node);\n    node.isCreated = true;\n    return node;\n}\n/**\n * Creates a placeholder node that can be used to hold a place in a the children\n * array until the actual node is created.\n * @param options - FormKitOptions\n * @internal\n */\nfunction createPlaceholder(options) {\n    var _a, _b, _f, _g;\n    return {\n        __FKP: true,\n        uid: Symbol(),\n        name: (_a = options === null || options === void 0 ? void 0 : options.name) !== null && _a !== void 0 ? _a : `p_${nameCount++}`,\n        value: (_b = options === null || options === void 0 ? void 0 : options.value) !== null && _b !== void 0 ? _b : null,\n        _value: (_f = options === null || options === void 0 ? void 0 : options.value) !== null && _f !== void 0 ? _f : null,\n        type: (_g = options === null || options === void 0 ? void 0 : options.type) !== null && _g !== void 0 ? _g : 'input',\n        use: () => {\n            // noop\n        },\n        input(value) {\n            this._value = value;\n            this.value = value;\n            return Promise.resolve();\n        },\n        isSettled: true,\n    };\n}\n/**\n * Determines if a node is a placeholder node.\n * @param node - A {@link FormKitNode | FormKitNode}\n * @returns\n * @public\n */\nfunction isPlaceholder(node) {\n    return '__FKP' in node;\n}\n/**\n * Creates a new instance of a FormKit Node. Nodes are the atomic unit of a FormKit graph.\n *\n * @example\n *\n * ```javascript\n * import { createNode } from '@formkit/core'\n *\n * const input = createNode({\n *   type: 'input', // defaults to 'input' if not specified\n *   value: 'hello node world',\n * })\n *\n * console.log(input.value)\n * // 'hello node world'\n * ```\n *\n * @param options - An options object of {@link FormKitOptions | FormKitOptions} to override the defaults.\n *\n * @returns A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction createNode(options) {\n    const ops = options || {};\n    const context = createContext(ops);\n    // Note: The typing for the proxy object cannot be fully modeled, thus we are\n    // force-typing to a FormKitNode. See:\n    // https://github.com/microsoft/TypeScript/issues/28067\n    const node = new Proxy(context, {\n        get(...args) {\n            const [, property] = args;\n            if (property === '__FKNode__')\n                return true;\n            const trap = context.traps.get(property);\n            if (trap && trap.get)\n                return trap.get(node, context);\n            return Reflect.get(...args);\n        },\n        set(...args) {\n            const [, property, value] = args;\n            const trap = context.traps.get(property);\n            if (trap && trap.set)\n                return trap.set(node, context, property, value);\n            return Reflect.set(...args);\n        },\n    });\n    return nodeInit(node, ops);\n}\n\n/**\n * Type narrow that a node is a DOM node.\n *\n * @param node - A schema node to check\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isDOM(node) {\n    return typeof node !== 'string' && has(node, '$el');\n}\n/**\n * Type narrow that a node is a DOM node.\n *\n * @param node - A schema node to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isComponent(node) {\n    return typeof node !== 'string' && has(node, '$cmp');\n}\n/**\n * Root declaration.\n *\n * @param node - An object to check.\n */\nfunction isConditional(node) {\n    if (!node || typeof node === 'string')\n        return false;\n    return has(node, 'if') && has(node, 'then');\n}\n/**\n * Determines if the node is syntactic sugar or not.\n *\n * @param node - A schema node to check.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSugar(node) {\n    return typeof node !== 'string' && '$formkit' in node;\n}\n/**\n * Converts syntactic sugar nodes to standard nodes.\n *\n * @param node - A node to covert.\n *\n * @returns A {@link FormKitSchemaNode | FormKitSchemaNode} without the properties of {@link FormKitSchemaFormKit | FormKitSchemaFormKit}.\n *\n * @public\n */\nfunction sugar(node) {\n    if (typeof node === 'string') {\n        return {\n            $el: 'text',\n            children: node,\n        };\n    }\n    if (isSugar(node)) {\n        const { $formkit: type, for: iterator, if: condition, children, bind, ...props } = node;\n        return Object.assign({\n            $cmp: 'FormKit',\n            props: { ...props, type },\n        }, condition ? { if: condition } : {}, iterator ? { for: iterator } : {}, children ? { children } : {}, bind ? { bind } : {});\n    }\n    return node;\n}\n\n/**\n * Compiles a logical string like `\"a != z || b == c\"` into a single function.\n * The return value is an object with a \"provide\" method that iterates over all\n * requirement tokens to use as replacements.\n *\n * @example\n *\n * ```typescript\n * let name = {\n *   value: 'jon'\n * }\n * const condition = compile(\"$name == 'bob'\").provide((token) => {\n *  return () => name.value // must return a function!\n * })\n *\n * condition() // false\n * ```\n *\n * @param expr - A string to compile.\n *\n * @returns A {@link FormKitCompilerOutput | FormKitCompilerOutput}.\n *\n * @public\n */\nfunction compile(expr) {\n    /**\n     * These tokens are replacements used in evaluating a given condition.\n     */\n    // const tokens: FormKitTokens = {}\n    /**\n     * The value of the provide() callback. Used for late binding.\n     */\n    let provideTokens;\n    /**\n     * These are token requirements like \"$name.value\" that are need to fulfill\n     * a given condition call.\n     */\n    const requirements = new Set();\n    /**\n     * Expands the current value if it is a function.\n     * @param operand - A left or right hand operand\n     * @returns\n     */\n    const x = function expand(operand, tokens) {\n        return typeof operand === 'function' ? operand(tokens) : operand;\n    };\n    /**\n     * Comprehensive list of operators. This list MUST be\n     * ordered by the length of the operator characters in descending order.\n     */\n    const operatorRegistry = [\n        {\n            '&&': (l, r, t) => x(l, t) && x(r, t),\n            '||': (l, r, t) => x(l, t) || x(r, t),\n        },\n        {\n            '===': (l, r, t) => !!(x(l, t) === x(r, t)),\n            '!==': (l, r, t) => !!(x(l, t) !== x(r, t)),\n            '==': (l, r, t) => !!(x(l, t) == x(r, t)),\n            '!=': (l, r, t) => !!(x(l, t) != x(r, t)),\n            '>=': (l, r, t) => !!(x(l, t) >= x(r, t)),\n            '<=': (l, r, t) => !!(x(l, t) <= x(r, t)),\n            '>': (l, r, t) => !!(x(l, t) > x(r, t)),\n            '<': (l, r, t) => !!(x(l, t) < x(r, t)),\n        },\n        {\n            '+': (l, r, t) => x(l, t) + x(r, t),\n            '-': (l, r, t) => x(l, t) - x(r, t),\n        },\n        {\n            '*': (l, r, t) => x(l, t) * x(r, t),\n            '/': (l, r, t) => x(l, t) / x(r, t),\n            '%': (l, r, t) => x(l, t) % x(r, t),\n        },\n    ];\n    /**\n     * A full list of all operator symbols.\n     */\n    const operatorSymbols = operatorRegistry.reduce((s, g) => {\n        return s.concat(Object.keys(g));\n    }, []);\n    /**\n     * An array of the first character of each operator.\n     */\n    const operatorChars = new Set(operatorSymbols.map((key) => key.charAt(0)));\n    /**\n     * Determines if the current character is the start of an operator symbol, if it\n     * is, it returns that symbol.\n     * @param symbols - An array of symbols that are considered operators\n     * @param char - The current character being operated on\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @returns\n     */\n    function getOp(symbols, char, p, expression) {\n        const candidates = symbols.filter((s) => s.startsWith(char));\n        if (!candidates.length)\n            return false;\n        return candidates.find((symbol) => {\n            if (expression.length >= p + symbol.length) {\n                const nextChars = expression.substring(p, p + symbol.length);\n                if (nextChars === symbol)\n                    return symbol;\n            }\n            return false;\n        });\n    }\n    /**\n     * Determines the step number of the right or left hand operator.\n     * @param p - The position of the pointer\n     * @param expression - The full string expression\n     * @param direction - 1 = right, 0 = left\n     */\n    function getStep(p, expression, direction = 1) {\n        let next = direction\n            ? expression.substring(p + 1).trim()\n            : expression.substring(0, p).trim();\n        if (!next.length)\n            return -1;\n        if (!direction) {\n            // left hand direction could include a function name we need to remove\n            const reversed = next.split('').reverse();\n            const start = reversed.findIndex((char) => operatorChars.has(char));\n            next = reversed.slice(start).join('');\n        }\n        const char = next[0];\n        return operatorRegistry.findIndex((operators) => {\n            const symbols = Object.keys(operators);\n            return !!getOp(symbols, char, 0, next);\n        });\n    }\n    /**\n     * Extracts a tail call. For example:\n     * ```\n     * $foo().bar(baz) + 7\n     * ```\n     * Would extract \"bar(baz)\" and return p of 15 (after the (baz)).\n     *\n     * @param p - The position of a closing parenthetical.\n     * @param expression - The full expression being parsed.\n     */\n    function getTail(pos, expression) {\n        let tail = '';\n        const length = expression.length;\n        let depth = 0;\n        for (let p = pos; p < length; p++) {\n            const char = expression.charAt(p);\n            if (char === '(') {\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n            }\n            else if (depth === 0 && char === ' ') {\n                continue;\n            }\n            if (depth === 0 && getOp(operatorSymbols, char, p, expression)) {\n                return [tail, p - 1];\n            }\n            else {\n                tail += char;\n            }\n        }\n        return [tail, expression.length - 1];\n    }\n    /**\n     * Parse a string expression into a function that returns a boolean. This is\n     * the magic behind schema logic like $if.\n     * @param expression - A string expression to parse\n     * @returns\n     */\n    function parseLogicals(expression, step = 0) {\n        const operators = operatorRegistry[step];\n        const length = expression.length;\n        const symbols = Object.keys(operators);\n        let depth = 0;\n        let quote = false;\n        let op = null;\n        let operand = '';\n        let left = null;\n        let operation;\n        let lastChar = '';\n        let char = '';\n        let parenthetical = '';\n        let parenQuote = '';\n        let startP = 0;\n        const addTo = (depth, char) => {\n            depth ? (parenthetical += char) : (operand += char);\n        };\n        for (let p = 0; p < length; p++) {\n            lastChar = char;\n            char = expression.charAt(p);\n            if ((char === \"'\" || char === '\"') &&\n                lastChar !== '\\\\' &&\n                ((depth === 0 && !quote) || (depth && !parenQuote))) {\n                if (depth) {\n                    parenQuote = char;\n                }\n                else {\n                    quote = char;\n                }\n                addTo(depth, char);\n                continue;\n            }\n            else if ((quote && (char !== quote || lastChar === '\\\\')) ||\n                (parenQuote && (char !== parenQuote || lastChar === '\\\\'))) {\n                addTo(depth, char);\n                continue;\n            }\n            else if (quote === char) {\n                quote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (parenQuote === char) {\n                parenQuote = false;\n                addTo(depth, char);\n                continue;\n            }\n            else if (char === ' ') {\n                continue;\n            }\n            else if (char === '(') {\n                if (depth === 0) {\n                    startP = p;\n                }\n                else {\n                    parenthetical += char;\n                }\n                depth++;\n            }\n            else if (char === ')') {\n                depth--;\n                if (depth === 0) {\n                    // Parenthetical statements cannot be grouped up in the implicit order\n                    // of left/right statements based on which step they are on because\n                    // they are parsed on every step and then must be applied to the\n                    // operator. Example:\n                    //\n                    // 5 + (3) * 2\n                    //\n                    // This should yield 11 not 16. This order is normally implicit in the\n                    // sequence of operators being parsed, but with parenthesis the parse\n                    // happens each time. Instead we need to know if the resulting value\n                    // should be applied to the left or the right hand operator. The\n                    // general algorithm is:\n                    //\n                    // 1. Does this paren have an operator on the left or right side\n                    // 2. If not, it's unnecessarily wrapped (3 + 2)\n                    // 3. If it does, then which order of operation is highest?\n                    // 4. Wait for the highest order of operation to bind to an operator.\n                    // If the parenthetical has a preceding token like $fn(1 + 2) then we\n                    // need to subtract the existing operand length from the start\n                    // to determine if this is a left or right operation\n                    const fn = typeof operand === 'string' && operand.startsWith('$')\n                        ? operand\n                        : undefined;\n                    const hasTail = fn && expression.charAt(p + 1) === '.';\n                    // It's possible the function has a chained tail call:\n                    let tail = '';\n                    if (hasTail) {\n                        [tail, p] = getTail(p + 2, expression);\n                    }\n                    const lStep = op ? step : getStep(startP, expression, 0);\n                    const rStep = getStep(p, expression);\n                    if (lStep === -1 && rStep === -1) {\n                        // This parenthetical was unnecessarily wrapped at the root, or\n                        // these are args of a function call.\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                        // If the operand is still a string after evaluation, then it was a\n                        // quoted string like (\"1 + 2\") which should actually evaluate to\n                        // a literal of \"1 + 2\". It will be cleaned/trimmed as a string a\n                        // little further on in this block at `if (!op && operand)`.\n                        if (typeof operand === 'string')\n                            operand = parenthetical;\n                    }\n                    else if (op && (lStep >= rStep || rStep === -1) && step === lStep) {\n                        // has a left hand operator with a higher order of operation\n                        left = op.bind(null, evaluate(parenthetical, -1, fn, tail));\n                        op = null;\n                        operand = '';\n                    }\n                    else if (rStep > lStep && step === rStep) {\n                        // should be applied to the right hand operator when it gets one\n                        operand = evaluate(parenthetical, -1, fn, tail);\n                    }\n                    else {\n                        operand += `(${parenthetical})${hasTail ? `.${tail}` : ''}`;\n                    }\n                    parenthetical = '';\n                }\n                else {\n                    parenthetical += char;\n                }\n            }\n            else if (depth === 0 &&\n                (operation = getOp(symbols, char, p, expression))) {\n                if (p === 0) {\n                    error(103, [operation, expression]);\n                }\n                // We identified the operator by looking ahead in the string, so we need\n                // our position to move past the operator\n                p += operation.length - 1;\n                if (p === expression.length - 1) {\n                    error(104, [operation, expression]);\n                }\n                if (!op) {\n                    // Bind the left hand operand\n                    if (left) {\n                        // In this case we've already parsed the left hand operator\n                        op = operators[operation].bind(null, evaluate(left, step));\n                        left = null;\n                    }\n                    else {\n                        op = operators[operation].bind(null, evaluate(operand, step));\n                        operand = '';\n                    }\n                }\n                else if (operand) {\n                    // Bind the right hand operand, and return the resulting expression as a new left hand operator\n                    left = op.bind(null, evaluate(operand, step));\n                    op = operators[operation].bind(null, left);\n                    operand = '';\n                }\n                continue;\n            }\n            else {\n                addTo(depth, char);\n            }\n        }\n        if (operand && op) {\n            // If we were left with an operand after the loop, and an op, it should\n            // be the right hand assignment.\n            op = op.bind(null, evaluate(operand, step));\n        }\n        // If we don't have an op, but we do have a left hand assignment, then that\n        // is actually our operator, so just re-assign it to op\n        op = !op && left ? left : op;\n        if (!op && operand) {\n            // If we don't have any op but we do have an operand so there is no boolean\n            // logic to perform, but that operand still means something so we need to\n            // evaluate it and return it as a function\n            op = (v, t) => {\n                return typeof v === 'function' ? v(t) : v;\n            };\n            op = op.bind(null, evaluate(operand, step));\n        }\n        if (!op && !operand) {\n            error(105, expression);\n        }\n        return op;\n    }\n    /**\n     * Given a string like '$name==bobby' evaluate it to true or false\n     * @param operand - A left or right boolean operand — usually conditions\n     * @param step - The current order of operation\n     * @param fnToken - The token (string) representation of a function being called\n     * @returns\n     */\n    function evaluate(operand, step, fnToken, tail //eslint-disable-line\n    ) {\n        if (fnToken) {\n            const fn = evaluate(fnToken, operatorRegistry.length);\n            let userFuncReturn;\n            // \"Tail calls\" are dot accessors after a function $foo().value. We need\n            // to compile tail calls, and then provide the function result to the\n            // exposed tokens.\n            let tailCall = tail\n                ? compile(`$${tail}`)\n                : false;\n            if (typeof fn === 'function') {\n                const args = parseArgs(String(operand)).map((arg) => evaluate(arg, -1));\n                return (tokens) => {\n                    const userFunc = fn(tokens);\n                    if (typeof userFunc !== 'function') {\n                        warn(150, fnToken);\n                        return userFunc;\n                    }\n                    userFuncReturn = userFunc(...args.map((arg) => typeof arg === 'function' ? arg(tokens) : arg));\n                    if (tailCall) {\n                        tailCall = tailCall.provide((subTokens) => {\n                            const rootTokens = provideTokens(subTokens);\n                            const t = subTokens.reduce((tokenSet, token) => {\n                                const isTail = token === tail || (tail === null || tail === void 0 ? void 0 : tail.startsWith(`${token}(`));\n                                if (isTail) {\n                                    const value = getAt(userFuncReturn, token);\n                                    tokenSet[token] = () => value;\n                                }\n                                else {\n                                    tokenSet[token] = rootTokens[token];\n                                }\n                                return tokenSet;\n                            }, {});\n                            return t;\n                        });\n                    }\n                    return tailCall ? tailCall() : userFuncReturn;\n                };\n            }\n        }\n        else if (typeof operand === 'string') {\n            // the word true or false will never contain further operations\n            if (operand === 'true')\n                return true;\n            if (operand === 'false')\n                return false;\n            if (operand === 'undefined')\n                return undefined;\n            // Truly quotes strings cannot contain an operation, return the string\n            if (isQuotedString(operand))\n                return rmEscapes(operand.substring(1, operand.length - 1));\n            // Actual numbers cannot be contain an operation\n            if (!isNaN(+operand))\n                return Number(operand);\n            if (step < operatorRegistry.length - 1) {\n                return parseLogicals(operand, step + 1);\n            }\n            else {\n                if (operand.startsWith('$')) {\n                    const cleaned = operand.substring(1);\n                    requirements.add(cleaned);\n                    return function getToken(tokens) {\n                        return cleaned in tokens ? tokens[cleaned]() : undefined;\n                    };\n                }\n                // In this case we are dealing with an unquoted string, just treat it\n                // as a plain string.\n                return operand;\n            }\n        }\n        return operand;\n    }\n    /**\n     * Compile the string.\n     */\n    const compiled = parseLogicals(expr.startsWith('$:') ? expr.substring(2) : expr);\n    /**\n     * Convert compiled requirements to an array.\n     */\n    const reqs = Array.from(requirements);\n    /**\n     * Provides token values via callback to compiled output.\n     * @param callback - A callback that needs to provide all token requirements\n     * @returns\n     */\n    function provide(callback) {\n        provideTokens = callback;\n        return Object.assign(\n        // @ts-ignore - @rollup/plugin-typescript doesn't like this\n        compiled.bind(null, callback(reqs)), { provide });\n    }\n    return Object.assign(compiled, {\n        provide,\n    });\n}\n\n/**\n * Function that produces a standardized object representation of CSS classes.\n *\n * @param propertyKey - the section key.\n * @param node - A {@link FormKitNode | FormKitNode}.\n * @param sectionClassList - A `string | Record<string, boolean>` or a {@link FormKitClasses | FormKitClasses}.\n *\n * @returns `Record<string, boolean>`\n *\n * @public\n */\nfunction createClasses(propertyKey, node, sectionClassList) {\n    if (!sectionClassList)\n        return {};\n    if (typeof sectionClassList === 'string') {\n        const classKeys = sectionClassList.split(' ');\n        return classKeys.reduce((obj, key) => Object.assign(obj, { [key]: true }), {});\n    }\n    else if (typeof sectionClassList === 'function') {\n        return createClasses(propertyKey, node, sectionClassList(node, propertyKey));\n    }\n    return sectionClassList;\n}\n/**\n * Combines multiple class lists into a single list.\n *\n * @param node - A {@link FormKitNode | FormKitNode}.\n * @param property - The property key to which the class list will be applied.\n * @param args - And array of `Record<string, boolean>` of CSS class list(s).\n *\n * @returns `string | null`\n *\n * @public\n */\nfunction generateClassList(node, property, ...args) {\n    const combinedClassList = args.reduce((finalClassList, currentClassList) => {\n        if (!currentClassList)\n            return handleNegativeClasses(finalClassList);\n        const { $reset, ...classList } = currentClassList;\n        if ($reset) {\n            return handleNegativeClasses(classList);\n        }\n        return handleNegativeClasses(Object.assign(finalClassList, classList));\n    }, {});\n    return Object.keys(node.hook.classes.dispatch({ property, classes: combinedClassList })\n        .classes)\n        .filter((key) => combinedClassList[key])\n        .join(' ') || null;\n}\nfunction handleNegativeClasses(classList) {\n    const removalToken = '$remove:';\n    let hasNegativeClassValue = false;\n    const applicableClasses = Object.keys(classList).filter((className) => {\n        if (classList[className] && className.startsWith(removalToken)) {\n            hasNegativeClassValue = true;\n        }\n        return classList[className];\n    });\n    if (applicableClasses.length > 1 && hasNegativeClassValue) {\n        const negativeClasses = applicableClasses.filter(className => className.startsWith(removalToken));\n        negativeClasses.map((negativeClass) => {\n            const targetClass = negativeClass.substring(removalToken.length);\n            classList[targetClass] = false;\n            classList[negativeClass] = false;\n        });\n    }\n    return classList;\n}\n\n/**\n * Sets errors on a form, group, or input.\n *\n * @param id - The id of a form.\n * @param localErrors - The errors to set on the form or the form’s inputs in\n * the format of {@link ErrorMessages | ErrorMessages}.\n * @param childErrors - (optional) The errors to set on the form or the form’s\n * inputs in the format of {@link ErrorMessages | ErrorMessages}.\n *\n * @public\n */\nfunction setErrors(id, localErrors, childErrors) {\n    const node = getNode$1(id);\n    if (node) {\n        node.setErrors(localErrors, childErrors);\n    }\n    else {\n        warn(651, id);\n    }\n}\n/**\n * Clears errors on the node and optionally its children.\n *\n * @param id - The id of the node you want to clear errors for.\n * @param clearChildren - Determines if the children of this node should have\n * their errors cleared.\n *\n * @public\n */\nfunction clearErrors(id, clearChildren = true) {\n    const node = getNode$1(id);\n    if (node) {\n        node.clearErrors(clearChildren);\n    }\n    else {\n        warn(652, id);\n    }\n}\n\n/**\n * The official FormKit core library. This package is responsible for most of FormKit’s internal functionality.\n * You can read documentation specifically on how it works at formkit.com.\n *\n * You can add this package by using `npm install @formkit/core` or `yarn add @formkit/core`.\n *\n * @packageDocumentation\n */\n/**\n * The current version of FormKit at the time the package is published. Is replaced\n * as part of the publishing script.\n *\n * @internal\n */\nconst FORMKIT_VERSION = '1.2.2';\n\nexport { FORMKIT_VERSION, bfs, clearErrors, compile, createClasses, createConfig$1 as createConfig, createMessage, createNode, createPlaceholder, createValue, deregister, error, errorHandler, generateClassList, getNode$1 as getNode, isComponent, isConditional, isDOM, isList, isNode, isPlaceholder, isSugar, names, register, reset, resetCount, resetRegistry, setErrors, submitForm, sugar, use, useIndex, valueInserted, valueMoved, valueRemoved, warn, warningHandler, watchRegistry };\n","import { extend, camel, has, isPojo, eq, slugify, undefine, clone, token, isObject } from '@formkit/utils';\nimport { isDOM, isComponent, createMessage, warn, isConditional } from '@formkit/core';\n\n/**\n * Creates a plugin based on a list of {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @param libraries - One or many {@link @formkit/core#FormKitLibrary | FormKitLibrary}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nfunction createLibraryPlugin(...libraries) {\n    /**\n     * Merge all provided library items.\n     */\n    const library = libraries.reduce((merged, lib) => extend(merged, lib), {});\n    /* eslint-disable-next-line @typescript-eslint/no-empty-function */\n    const plugin = () => { };\n    /**\n     * Enables the hook that exposes all library inputs.\n     * @param node - The primary plugin\n     */\n    plugin.library = function (node) {\n        const type = camel(node.props.type);\n        if (has(library, type)) {\n            node.define(library[type]);\n        }\n    };\n    return plugin;\n}\n\n/**\n * All the explicit FormKit props that need to be passed to FormKit’s Vue\n * component instance.\n * @public\n */\nconst runtimeProps = [\n    'classes',\n    'config',\n    'delay',\n    'errors',\n    'id',\n    'index',\n    'inputErrors',\n    'modelValue',\n    'onUpdate:modelValue',\n    'name',\n    'number',\n    'parent',\n    'plugins',\n    'sectionsSchema',\n    'type',\n    'validation',\n    'validationLabel',\n    'validationMessages',\n    'validationRules',\n    // Runtime event props:\n    'onInput',\n    'onInputRaw',\n    'onUpdate:modelValue',\n    'onNode',\n    'onSubmit',\n    'onSubmitInvalid',\n    'onSubmitRaw',\n];\n/**\n * A helper to determine if an option is a group or an option.\n * @param option - An option\n */\nfunction isGroupOption(option) {\n    return (option &&\n        typeof option === 'object' &&\n        'group' in option &&\n        Array.isArray(option));\n}\n\n/**\n * A function to normalize an array of objects, array of strings, or object of\n * key-values to use an array of objects with value and label properties.\n *\n * @param options - An un-normalized {@link FormKitOptionsProp | FormKitOptionsProp}.\n *\n * @returns A list of {@link FormKitOptionsList | FormKitOptionsList}.\n *\n * @public\n */\nfunction normalizeOptions(options) {\n    let i = 1;\n    if (Array.isArray(options)) {\n        return options.map((option) => {\n            if (typeof option === 'string' || typeof option === 'number') {\n                return {\n                    label: String(option),\n                    value: String(option),\n                };\n            }\n            if (typeof option == 'object') {\n                if ('group' in option) {\n                    option.options = normalizeOptions(option.options || []);\n                    return option;\n                }\n                else if ('value' in option && typeof option.value !== 'string') {\n                    Object.assign(option, {\n                        value: `__mask_${i++}`,\n                        __original: option.value,\n                    });\n                }\n            }\n            return option;\n        });\n    }\n    return Object.keys(options).map((value) => {\n        return {\n            label: options[value],\n            value,\n        };\n    });\n}\n/**\n * Given an {@link FormKitOptionsList | FormKitOptionsListWithGroups}, find the real value in the options.\n *\n * @param options - The {@link FormKitOptionsList | FormKitOptionsListWithGroups} to check for a given value\n * @param value - The value to return\n *\n * @returns `unknown`\n *\n * @public\n */\nfunction optionValue(options, value) {\n    if (Array.isArray(options)) {\n        for (const option of options) {\n            if (typeof option !== 'object' && option)\n                continue;\n            if (isGroupOption(option)) {\n                const found = optionValue(option.options, value);\n                if (found !== undefined) {\n                    return found;\n                }\n            }\n            else if (value == option.value) {\n                return '__original' in option ? option.__original : option.value;\n            }\n        }\n    }\n    return value;\n}\n/**\n * Determines if the value should be selected.\n *\n * @param valueA - Any type of value\n * @param valueB - Any type of value\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction shouldSelect(valueA, valueB) {\n    if ((valueA === null && valueB === undefined) ||\n        (valueA === undefined && valueB === null))\n        return false;\n    if (valueA == valueB)\n        return true;\n    if (isPojo(valueA) && isPojo(valueB))\n        return eq(valueA, valueB);\n    return false;\n}\n/**\n * A feature that converts the options prop to usable values, to be used by a\n * feature or a plugin.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction options(node) {\n    node.hook.prop((prop, next) => {\n        if (prop.prop === 'options') {\n            if (typeof prop.value === 'function') {\n                node.props.optionsLoader = prop.value;\n                prop.value = [];\n            }\n            else {\n                prop.value = normalizeOptions(prop.value);\n            }\n        }\n        return next(prop);\n    });\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction createSection(section, el, fragment = false) {\n    return (...children) => {\n        const extendable = (extensions) => {\n            const node = !el || typeof el === 'string' ? { $el: el } : el();\n            if (isDOM(node) || isComponent(node)) {\n                if (!node.meta) {\n                    node.meta = { section };\n                }\n                if (children.length && !node.children) {\n                    node.children = [\n                        ...children.map((child) => typeof child === 'function' ? child(extensions) : child),\n                    ];\n                }\n                if (isDOM(node)) {\n                    node.attrs = {\n                        class: `$classes.${section}`,\n                        ...(node.attrs || {}),\n                    };\n                }\n            }\n            return {\n                if: `$slots.${section}`,\n                then: `$slots.${section}`,\n                else: section in extensions\n                    ? extendSchema(node, extensions[section])\n                    : node,\n            };\n        };\n        extendable._s = section;\n        return fragment ? createRoot(extendable) : extendable;\n    };\n}\n/**\n * Returns an extendable schema root node.\n *\n * @param rootSection - Creates the root node.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @internal\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction createRoot(rootSection) {\n    return (extensions) => {\n        return [rootSection(extensions)];\n    };\n}\n/**\n * Type guard for schema objects.\n *\n * @param schema - returns `true` if the node is a schema node but not a string\n * or conditional.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isSchemaObject(schema) {\n    return (typeof schema === 'object' &&\n        ('$el' in schema || '$cmp' in schema || '$formkit' in schema));\n}\n/**\n * Extends a single schema node with an extension. The extension can be any\n * partial node including strings.\n *\n * @param schema - The base schema node.\n * @param extension - The values to extend on the base schema node.\n *\n * @returns {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction extendSchema(schema, extension = {}) {\n    if (typeof schema === 'string') {\n        return isSchemaObject(extension) || typeof extension === 'string'\n            ? extension\n            : schema;\n    }\n    else if (Array.isArray(schema)) {\n        return isSchemaObject(extension) ? extension : schema;\n    }\n    return extend(schema, extension);\n}\n\n/**\n * Actions section that shows the action buttons\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst actions = createSection('actions', () => ({\n    $el: 'div',\n    if: '$actions',\n}));\n\n/**\n * Box section used for grouping options\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst box = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        name: '$node.props.altName || $node.name',\n        disabled: '$option.attrs.disabled || $disabled',\n        onInput: '$handlers.toggleChecked',\n        checked: '$fns.eq($_value, $onValue)',\n        onBlur: '$handlers.blur',\n        value: '$: true',\n        id: '$id',\n        'aria-describedby': {\n            if: '$options.length',\n            then: {\n                if: '$option.help',\n                then: '$: \"help-\" + $option.attrs.id',\n                else: undefined,\n            },\n            else: {\n                if: '$help',\n                then: '$: \"help-\" + $id',\n                else: undefined,\n            },\n        },\n    },\n}));\n\n/**\n * Option help section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxHelp = createSection('optionHelp', () => ({\n    $el: 'div',\n    if: '$option.help',\n    attrs: {\n        id: '$: \"help-\" + $option.attrs.id',\n    },\n}));\n\n/**\n * Box Inner section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxInner = createSection('inner', 'span');\n\n/**\n * Label section for options\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxLabel = createSection('label', 'span');\n\n/**\n * Option section used to show an option\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxOption = createSection('option', () => ({\n    $el: 'li',\n    for: ['option', '$options'],\n    attrs: {\n        'data-disabled': '$option.attrs.disabled || $disabled',\n    },\n}));\n\n/**\n * Options section used to wrap all option sections in a list\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxOptions = createSection('options', 'ul');\n\n/**\n * Wrapper section for options\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst boxWrapper = createSection('wrapper', () => ({\n    $el: 'label',\n    attrs: {\n        'data-disabled': {\n            if: '$options.length',\n            then: undefined,\n            else: '$disabled || undefined',\n        },\n        'data-checked': {\n            if: '$options == undefined',\n            then: '$fns.eq($_value, $onValue) || undefined',\n            else: '$fns.isChecked($option.value) || undefined',\n        },\n    },\n}));\n\n/**\n * Input section for a button\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst buttonInput = createSection('input', () => ({\n    $el: 'button',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        name: '$node.name',\n        id: '$id',\n    },\n}));\n\n/**\n * Default section for a button\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst buttonLabel = createSection('default', null);\n\n/**\n * Decorator section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst decorator = createSection('decorator', () => ({\n    $el: 'span',\n    attrs: {\n        'aria-hidden': 'true',\n    },\n}));\n\n/**\n * Fieldset section, used to describe help\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fieldset = createSection('fieldset', () => ({\n    $el: 'fieldset',\n    attrs: {\n        id: '$id',\n        'aria-describedby': {\n            if: '$help',\n            then: '$: \"help-\" + $id',\n            else: undefined,\n        },\n    },\n}));\n\n/**\n * Input section for a file input\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fileInput = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: 'file',\n        disabled: '$disabled',\n        name: '$node.name',\n        onChange: '$handlers.files',\n        onBlur: '$handlers.blur',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * File item section for showing a file name\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fileItem = createSection('fileItem', () => ({\n    $el: 'li',\n    for: ['file', '$value'],\n}));\n\n/**\n * File list section to show all file names\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fileList = createSection('fileList', () => ({\n    $el: 'ul',\n    if: '$value.length',\n    attrs: {\n        'data-has-multiple': {\n            if: '$value.length > 1',\n            then: 'true',\n        },\n    },\n}));\n\n/**\n * File name section to show the file name\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fileName = createSection('fileName', () => ({\n    $el: 'span',\n    attrs: {\n        class: '$classes.fileName',\n    },\n}));\n\n/**\n * File remove section to show a remove button for files\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fileRemove = createSection('fileRemove', () => ({\n    $el: 'button',\n    attrs: {\n        type: 'button',\n        onClick: '$handlers.resetFiles',\n    },\n}));\n\n/**\n * Form section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst formInput = createSection('form', () => ({\n    $el: 'form',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        name: '$node.name',\n        onSubmit: '$handlers.submit',\n        'data-loading': '$state.loading || undefined',\n    },\n}));\n\n/**\n * A simple fragment section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst fragment = createSection('wrapper', null, true);\n\n/**\n * Help section that shows help text\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst help = createSection('help', () => ({\n    $el: 'div',\n    if: '$help',\n    attrs: {\n        id: '$: \"help-\" + $id',\n    },\n}));\n\n/**\n * Icon section used by all icons\n *\n * @public\n */\nconst icon = (sectionKey, el) => {\n    return createSection(`${sectionKey}Icon`, () => {\n        const rawIconProp = `_raw${sectionKey\n            .charAt(0)\n            .toUpperCase()}${sectionKey.slice(1)}Icon`;\n        return {\n            if: `$${sectionKey}Icon && $${rawIconProp}`,\n            $el: `${el ? el : 'span'}`,\n            attrs: {\n                class: `$classes.${sectionKey}Icon + \" \" + $classes.icon`,\n                innerHTML: `$${rawIconProp}`,\n                onClick: `$handlers.iconClick(${sectionKey})`,\n                for: {\n                    if: `${el === 'label'}`,\n                    then: '$id',\n                },\n            },\n        };\n    })();\n};\n\n/**\n * Inner section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst inner = createSection('inner', 'div');\n\n/**\n * Label section with label element\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst label = createSection('label', () => ({\n    $el: 'label',\n    if: '$label',\n    attrs: {\n        for: '$id',\n    },\n}));\n\n/**\n * Legend section, used instead of label when its grouping fields.\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst legend = createSection('legend', () => ({\n    $el: 'legend',\n    if: '$label',\n}));\n\n/**\n * Message section, shows a group of messages.\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst message = createSection('message', () => ({\n    $el: 'li',\n    for: ['message', '$messages'],\n    attrs: {\n        key: '$message.key',\n        id: `$id + '-' + $message.key`,\n        'data-message-type': '$message.type',\n    },\n}));\n\n/**\n * Messages section where all messages will be displayed.\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst messages = createSection('messages', () => ({\n    $el: 'ul',\n    if: '$defaultMessagePlacement && $fns.length($messages)',\n}));\n\n/**\n * No file section that shows when there is no files\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst noFiles = createSection('noFiles', () => ({\n    $el: 'span',\n    if: '$value.length == 0',\n}));\n\n/**\n * Option section used to show options\n *\n * @public\n */\nconst optGroup = createSection('optGroup', () => ({\n    $el: 'optgroup',\n    bind: '$option.attrs',\n    attrs: {\n        label: '$option.group',\n    },\n}));\n\n/**\n * Option section used to show options\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst option = createSection('option', () => ({\n    $el: 'option',\n    bind: '$option.attrs',\n    attrs: {\n        class: '$classes.option',\n        value: '$option.value',\n        selected: '$fns.isSelected($option)',\n    },\n}));\n\n/**\n * Options slot section that displays options when used with slots\n *\n * @public\n */\nconst optionSlot = createSection('options', () => ({\n    $el: null,\n    if: '$options.length',\n    for: ['option', '$option.options || $options'],\n}));\n\n/**\n * Outer section where most data attributes are assigned.\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst outer = createSection('outer', () => ({\n    $el: 'div',\n    attrs: {\n        key: '$id',\n        'data-family': '$family || undefined',\n        'data-type': '$type',\n        'data-multiple': '$attrs.multiple || ($type != \"select\" && $options != undefined) || undefined',\n        'data-disabled': '$: ($disabled !== \"false\" && $disabled) || undefined',\n        'data-empty': '$state.empty || undefined',\n        'data-complete': '$state.complete || undefined',\n        'data-invalid': '$state.valid === false && $state.validationVisible || undefined',\n        'data-errors': '$state.errors || undefined',\n        'data-submitted': '$state.submitted || undefined',\n        'data-prefix-icon': '$_rawPrefixIcon !== undefined || undefined',\n        'data-suffix-icon': '$_rawSuffixIcon !== undefined || undefined',\n        'data-prefix-icon-click': '$onPrefixIconClick !== undefined || undefined',\n        'data-suffix-icon-click': '$onSuffixIconClick !== undefined || undefined',\n    },\n}));\n\n/**\n * Prefix section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst prefix = createSection('prefix', null);\n\n/**\n * Input section used by selects\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst selectInput$1 = createSection('input', () => ({\n    $el: 'select',\n    bind: '$attrs',\n    attrs: {\n        id: '$id',\n        'data-placeholder': '$fns.showPlaceholder($_value, $placeholder)',\n        disabled: '$disabled',\n        class: '$classes.input',\n        name: '$node.name',\n        onChange: '$handlers.onChange',\n        onInput: '$handlers.selectInput',\n        onBlur: '$handlers.blur',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * Submit section that displays a submit button from a form\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst submitInput = createSection('submit', () => ({\n    $cmp: 'FormKit',\n    bind: '$submitAttrs',\n    props: {\n        type: 'submit',\n        disabled: '$disabled',\n        label: '$submitLabel',\n    },\n}));\n\n/**\n * Suffix section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst suffix = createSection('suffix', null);\n\n/**\n * Input section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst textInput = createSection('input', () => ({\n    $el: 'input',\n    bind: '$attrs',\n    attrs: {\n        type: '$type',\n        disabled: '$disabled',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n}));\n\n/**\n * Input section used by textarea inputs\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst textareaInput = createSection('input', () => ({\n    $el: 'textarea',\n    bind: '$attrs',\n    attrs: {\n        disabled: '$disabled',\n        name: '$node.name',\n        onInput: '$handlers.DOMInput',\n        onBlur: '$handlers.blur',\n        value: '$_value',\n        id: '$id',\n        'aria-describedby': '$describedBy',\n    },\n    children: '$initialValue',\n}));\n\n/**\n * Wrapper input section\n *\n * @public\n * @__NO_SIDE_EFFECTS__\n */\nconst wrapper = createSection('wrapper', 'div');\n\n/**\n * A feature that normalizes box types (checkboxes, radios).\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @returns A {@link @formkit/node#FormKitMiddleware | FormKitMiddleware}.\n *\n * @public\n */\nfunction normalizeBoxes(node) {\n    return function (prop, next) {\n        if (prop.prop === 'options' && Array.isArray(prop.value)) {\n            prop.value = prop.value.map((option) => {\n                var _a;\n                if (!((_a = option.attrs) === null || _a === void 0 ? void 0 : _a.id)) {\n                    return extend(option, {\n                        attrs: {\n                            id: `${node.props.id}-option-${slugify(String(option.value))}`,\n                        },\n                    });\n                }\n                return option;\n            });\n            if (node.props.type === 'checkbox' && !Array.isArray(node.value)) {\n                if (node.isCreated) {\n                    node.input([], false);\n                }\n                else {\n                    node.on('created', () => {\n                        if (!Array.isArray(node.value)) {\n                            node.input([], false);\n                        }\n                    });\n                }\n            }\n        }\n        return next(prop);\n    };\n}\n\n/**\n * Event handler when an input is toggled.\n *\n * @param node - The {@link @formkit/node#FormKitNode | FormKitNode} being toggled.\n * @param e - The input event related to the toggling.\n *\n * @public\n */\nfunction toggleChecked$1(node, e) {\n    const el = e.target;\n    if (el instanceof HTMLInputElement) {\n        const value = Array.isArray(node.props.options)\n            ? optionValue(node.props.options, el.value)\n            : el.value;\n        if (Array.isArray(node.props.options) && node.props.options.length) {\n            if (!Array.isArray(node._value)) {\n                // There is no array value set\n                node.input([value]);\n            }\n            else if (!node._value.some((existingValue) => shouldSelect(value, existingValue))) {\n                // The value is not in the current set\n                node.input([...node._value, value]);\n            }\n            else {\n                // Filter out equivalent values\n                node.input(node._value.filter((existingValue) => !shouldSelect(value, existingValue)));\n            }\n        }\n        else {\n            if (el.checked) {\n                node.input(node.props.onValue);\n            }\n            else {\n                node.input(node.props.offValue);\n            }\n        }\n    }\n}\n/**\n * Checks if a given option is present in the node value.\n *\n * @param node - The The {@link @formkit/node#FormKitNode | FormKitNode} being checked.\n * @param value - The value of any option.\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked$1(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    if (Array.isArray(node._value)) {\n        return node._value.some((existingValue) => shouldSelect(optionValue(node.props.options, value), existingValue));\n    }\n    return false;\n}\n/**\n * A feature that adds checkbox selection support.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction checkboxes(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked$1.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked$1.bind(null, node);\n        }\n        // Configure our default onValue and offValue\n        if (!has(node.props, 'onValue'))\n            node.props.onValue = true;\n        if (!has(node.props, 'offValue'))\n            node.props.offValue = false;\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * Adds icon props definition.\n *\n * @param sectionKey - the location the icon should be loaded.\n * @param defaultIcon - the icon that should be loaded if a match is found in the user's CSS.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction  defaultIcon(sectionKey, defaultIcon) {\n    return (node) => {\n        if (node.props[`${sectionKey}Icon`] === undefined) {\n            node.props[`${sectionKey}Icon`] = defaultIcon.startsWith('<svg')\n                ? defaultIcon\n                : `default:${defaultIcon}`;\n        }\n    };\n}\n\n/**\n * A feature that allows disabling children of this node.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction disables(node) {\n    node.on('created', () => {\n        // If the disabled prop belongs to this *actual* node (not inherited), then\n        // perform an `undefine` on it, if not then we'll let the prop be inherited.\n        if ('disabled' in node.props) {\n            node.props.disabled = undefine(node.props.disabled);\n            node.config.disabled = undefine(node.props.disabled);\n        }\n    });\n    node.hook.prop(({ prop, value }, next) => {\n        value = prop === 'disabled' ? undefine(value) : value;\n        return next({ prop, value });\n    });\n    node.on('prop:disabled', ({ payload: value }) => {\n        node.config.disabled = undefine(value);\n    });\n}\n\n/**\n * Creates a new feature that generates a localization message of type ui\n * for use on a given component.\n *\n * @param key - The key of the message.\n * @param value - The value of the message.\n *\n * @returns A {@link @formkit/core#FormKitPlugin | FormKitPlugin}.\n *\n * @public\n */\nfunction localize(key, value) {\n    return (node) => {\n        node.store.set(createMessage({\n            key,\n            type: 'ui',\n            value: value || key,\n            meta: {\n                localize: true,\n                i18nArgs: [node],\n            },\n        }));\n    };\n}\n\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Remove the data-file-hover attribute from the target.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction removeHover(e) {\n    if (e.target instanceof HTMLElement &&\n        e.target.hasAttribute('data-file-hover')) {\n        e.target.removeAttribute('data-file-hover');\n    }\n}\n/**\n * Prevent stray drag/drop events from navigating the window.\n *\n * @param e - Event\n *\n * @internal\n */\nfunction preventStrayDrop(type, e) {\n    if (!(e.target instanceof HTMLInputElement)) {\n        e.preventDefault();\n    }\n    else if (type === 'dragover') {\n        e.target.setAttribute('data-file-hover', 'true');\n    }\n    if (type === 'drop') {\n        removeHover(e);\n    }\n}\n/**\n * A feature to add file handling support to an input.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction files(node) {\n    // Localize our content:\n    localize('noFiles', 'Select file')(node);\n    localize('removeAll', 'Remove all')(node);\n    localize('remove')(node);\n    if (isBrowser) {\n        if (!window._FormKit_File_Drop) {\n            window.addEventListener('dragover', preventStrayDrop.bind(null, 'dragover'));\n            window.addEventListener('drop', preventStrayDrop.bind(null, 'drop'));\n            window.addEventListener('dragleave', removeHover);\n            window._FormKit_File_Drop = true;\n        }\n    }\n    node.hook.input((value, next) => next(Array.isArray(value) ? value : []));\n    node.on('reset', () => {\n        if (node.props.id && isBrowser) {\n            const el = document.getElementById(node.props.id);\n            if (el)\n                el.value = '';\n        }\n    });\n    node.on('created', () => {\n        if (!Array.isArray(node.value))\n            node.input([], false);\n        if (!node.context)\n            return;\n        node.context.handlers.resetFiles = (e) => {\n            e.preventDefault();\n            node.input([]);\n            if (node.props.id && isBrowser) {\n                const el = document.getElementById(node.props.id);\n                if (el)\n                    el.value = '';\n                el === null || el === void 0 ? void 0 : el.focus();\n            }\n        };\n        node.context.handlers.files = (e) => {\n            var _a, _b;\n            const files = [];\n            if (e.target instanceof HTMLInputElement && e.target.files) {\n                for (let i = 0; i < e.target.files.length; i++) {\n                    let file;\n                    if ((file = e.target.files.item(i))) {\n                        files.push({ name: file.name, file });\n                    }\n                }\n                node.input(files);\n            }\n            if (node.context)\n                node.context.files = files;\n            // Call the original listener if there is one.\n            if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n                (_b = node.props.attrs) === null || _b === void 0 ? void 0 : _b.onChange(e);\n            }\n        };\n    });\n}\n\nconst loading = createMessage({\n    key: 'loading',\n    value: true,\n    visible: false,\n});\n/**\n * Handle the submit event.\n *\n * @param e - The event\n *\n * @internal\n */\nasync function handleSubmit(node, submitEvent) {\n    const submitNonce = Math.random();\n    node.props._submitNonce = submitNonce;\n    submitEvent.preventDefault();\n    await node.settled;\n    if (node.ledger.value('validating')) {\n        // There are validation rules still pending.\n        node.store.set(loading);\n        await node.ledger.settled('validating');\n        node.store.remove('loading');\n        // If this was not the same submit event, bail out.\n        if (node.props._submitNonce !== submitNonce)\n            return;\n    }\n    // Set the submitted state on all children\n    const setSubmitted = (n) => n.store.set(createMessage({\n        key: 'submitted',\n        value: true,\n        visible: false,\n    }));\n    node.walk(setSubmitted);\n    setSubmitted(node);\n    node.emit('submit-raw');\n    if (typeof node.props.onSubmitRaw === 'function') {\n        node.props.onSubmitRaw(submitEvent, node);\n    }\n    if (node.ledger.value('blocking')) {\n        if (typeof node.props.onSubmitInvalid === 'function') {\n            node.props.onSubmitInvalid(node);\n        }\n        // There is still a blocking message in the store.\n        if (node.props.incompleteMessage !== false) {\n            node.store.set(createMessage({\n                blocking: false,\n                key: `incomplete`,\n                meta: {\n                    localize: node.props.incompleteMessage === undefined,\n                    i18nArgs: [{ node }],\n                    showAsMessage: true,\n                },\n                type: 'ui',\n                value: node.props.incompleteMessage || 'Form incomplete.',\n            }));\n        }\n    }\n    else {\n        // No blocking messages\n        if (typeof node.props.onSubmit === 'function') {\n            // call onSubmit\n            const retVal = node.props.onSubmit(node.hook.submit.dispatch(clone(node.value)), node);\n            if (retVal instanceof Promise) {\n                const autoDisable = node.props.disabled === undefined &&\n                    node.props.submitBehavior !== 'live';\n                if (autoDisable)\n                    node.props.disabled = true;\n                node.store.set(loading);\n                await retVal;\n                if (autoDisable)\n                    node.props.disabled = false;\n                node.store.remove('loading');\n            }\n        }\n        else {\n            if (submitEvent.target instanceof HTMLFormElement) {\n                submitEvent.target.submit();\n            }\n        }\n    }\n}\n/**\n * A feature to add a submit handler and actions section.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction form$1(node) {\n    node.props.isForm = true;\n    node.ledger.count('validating', (m) => m.key === 'validating');\n    node.on('created', () => {\n        var _a;\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.submit = handleSubmit.bind(null, node);\n        }\n        if (!has(node.props, 'actions')) {\n            node.props.actions = true;\n        }\n    });\n    node.on('settled:blocking', () => node.store.remove('incomplete'));\n}\n\n/**\n * A feature that applies `ignore=\"true\"` by default.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction ignore(node) {\n    if (node.props.ignore === undefined) {\n        node.props.ignore = true;\n        node.parent = null;\n    }\n}\n\n/**\n * A feature that ensures the input has an `initialValue` prop.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction initialValue(node) {\n    node.on('created', () => {\n        if (node.context) {\n            node.context.initialValue = node.value || '';\n        }\n    });\n}\n\n/**\n * A feature that allows casting to numbers.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction casts(node) {\n    if (typeof node.props.number === 'undefined')\n        return;\n    const strict = ['number', 'range', 'hidden'].includes(node.props.type);\n    node.hook.input((value, next) => {\n        if (value === '')\n            return next(undefined);\n        const numericValue = node.props.number === 'integer' ? parseInt(value) : parseFloat(value);\n        if (!Number.isFinite(numericValue))\n            return strict ? next(undefined) : next(value);\n        return next(numericValue);\n    });\n}\n\n/**\n * Sets the value of a radio button when checked.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param event - Event\n *\n * @public\n */\nfunction toggleChecked(node, event) {\n    if (event.target instanceof HTMLInputElement) {\n        node.input(optionValue(node.props.options, event.target.value));\n    }\n}\n/**\n * Checks if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n * @param value - The value to check\n *\n * @returns `boolean`\n *\n * @public\n */\nfunction isChecked(node, value) {\n    var _a, _b;\n    // We need to force vue’s reactivity to respond when the value is run:\n    (_a = node.context) === null || _a === void 0 ? void 0 : _a.value;\n    (_b = node.context) === null || _b === void 0 ? void 0 : _b._value;\n    return shouldSelect(optionValue(node.props.options, value), node._value);\n}\n/**\n * A feature to check if the value being checked is the current value.\n *\n * @param node - A {@link @formkit/core#FormKitNode | FormKitNode}.\n *\n * @public\n */\nfunction radios(node) {\n    node.on('created', () => {\n        var _a, _b;\n        if (!Array.isArray(node.props.options)) {\n            warn(350, {\n                node,\n                inputType: 'radio',\n            });\n        }\n        if ((_a = node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n            node.context.handlers.toggleChecked = toggleChecked.bind(null, node);\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.fns) {\n            node.context.fns.isChecked = isChecked.bind(null, node);\n        }\n    });\n    node.hook.prop(normalizeBoxes(node));\n}\n\n/**\n * A simple counter to keep track of how many radios have been placed.\n */\nlet radioInstance = 0;\n/**\n * Automatically rename any radio inputs.\n * @param node - A formkit node.\n * @returns\n */\nfunction renamesRadios(node) {\n    if (node.sync)\n        node.plugins.add(renamesRadiosPlugin);\n}\nfunction renamesRadiosPlugin(node) {\n    if (node.props.type === 'radio') {\n        node.props.altName = `${node.name}_${radioInstance++}`;\n    }\n}\n\n/**\n * Checks if a the given option should have the selected attribute.\n * @param node - The node being evaluated.\n * @param option - The option value to check\n * @returns\n * @public\n */\nfunction isSelected(node, option) {\n    if (isGroupOption(option))\n        return false;\n    // Here we trick reactivity (if at play) to watch this function.\n    node.context && node.context.value;\n    const optionValue = '__original' in option ? option.__original : option.value;\n    return Array.isArray(node._value)\n        ? node._value.some((optionA) => shouldSelect(optionA, optionValue))\n        : (node._value === undefined ||\n            (node._value === null && !containsValue(node.props.options, null))) &&\n            option.attrs &&\n            option.attrs['data-is-placeholder']\n            ? true\n            : shouldSelect(optionValue, node._value);\n}\n/**\n * Checks to see if a given value is anywhere in the options list.\n */\nfunction containsValue(options, value) {\n    return options.some((option) => {\n        if (isGroupOption(option)) {\n            return containsValue(option.options, value);\n        }\n        else {\n            return (('__original' in option ? option.__original : option.value) === value);\n        }\n    });\n}\n/**\n * Defers the change event till after the next cycle.\n * @param node - The node being evaluated.\n * @param e - The change event.\n */\nasync function deferChange(node, e) {\n    var _a;\n    if (typeof ((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.onChange) === 'function') {\n        await new Promise((r) => setTimeout(r, 0));\n        await node.settled;\n        node.props.attrs.onChange(e);\n    }\n}\n/**\n * Select the correct values.\n * @param e - The input event emitted by the select.\n */\nfunction  selectInput(node, e) {\n    const target = e.target;\n    const value = target.hasAttribute('multiple')\n        ? Array.from(target.selectedOptions).map((o) => optionValue(node.props.options, o.value))\n        : optionValue(node.props.options, target.value);\n    node.input(value);\n}\n/**\n * Appends a placeholder to the options list.\n * @param options - An options list\n * @param placeholder - A placeholder string to append\n * @returns\n */\nfunction applyPlaceholder(options, placeholder) {\n    if (!options.some((option) => option.attrs && option.attrs['data-is-placeholder'])) {\n        return [\n            {\n                label: placeholder,\n                value: '',\n                attrs: {\n                    hidden: true,\n                    disabled: true,\n                    'data-is-placeholder': 'true',\n                },\n            },\n            ...options,\n        ];\n    }\n    return options;\n}\n/**\n * Given an options list, find the first true value.\n * @param options - An options list (with groups)\n */\nfunction firstValue(options) {\n    const option = options.length > 0 ? options[0] : undefined;\n    if (!option)\n        return undefined;\n    if (isGroupOption(option))\n        return firstValue(option.options);\n    return '__original' in option ? option.__original : option.value;\n}\n/**\n * Converts the options prop to usable values.\n * @param node - A formkit node.\n * @public\n */\nfunction select$1(node) {\n    // Set the initial value of a multi-input\n    node.on('created', () => {\n        var _a, _b, _c;\n        const isMultiple = undefine((_a = node.props.attrs) === null || _a === void 0 ? void 0 : _a.multiple);\n        if (!isMultiple &&\n            node.props.placeholder &&\n            Array.isArray(node.props.options)) {\n            node.hook.prop(({ prop, value }, next) => {\n                if (prop === 'options') {\n                    value = applyPlaceholder(value, node.props.placeholder);\n                }\n                return next({ prop, value });\n            });\n            node.props.options = applyPlaceholder(node.props.options, node.props.placeholder);\n        }\n        if (isMultiple) {\n            if (node.value === undefined) {\n                node.input([], false);\n            }\n        }\n        else if (node.context && !node.context.options) {\n            // If this input is (probably) using the default slot, we need to add a\n            // \"value\" attribute to get bound\n            node.props.attrs = Object.assign({}, node.props.attrs, {\n                value: node._value,\n            });\n            node.on('input', ({ payload }) => {\n                node.props.attrs = Object.assign({}, node.props.attrs, {\n                    value: payload,\n                });\n            });\n        }\n        if ((_b = node.context) === null || _b === void 0 ? void 0 : _b.handlers) {\n            node.context.handlers.selectInput = selectInput.bind(null, node);\n            node.context.handlers.onChange = deferChange.bind(null, node);\n        }\n        if ((_c = node.context) === null || _c === void 0 ? void 0 : _c.fns) {\n            node.context.fns.isSelected = isSelected.bind(null, node);\n            node.context.fns.showPlaceholder = (value, placeholder) => {\n                if (!Array.isArray(node.props.options))\n                    return false;\n                const hasMatchingValue = node.props.options.some((option) => {\n                    if (option.attrs && 'data-is-placeholder' in option.attrs)\n                        return false;\n                    const optionValue = '__original' in option ? option.__original : option.value;\n                    return eq(value, optionValue);\n                });\n                return placeholder && !hasMatchingValue ? true : undefined;\n            };\n        }\n    });\n    node.hook.input((value, next) => {\n        var _a, _b, _c;\n        if (!node.props.placeholder &&\n            value === undefined &&\n            Array.isArray((_a = node.props) === null || _a === void 0 ? void 0 : _a.options) &&\n            node.props.options.length &&\n            !undefine((_c = (_b = node.props) === null || _b === void 0 ? void 0 : _b.attrs) === null || _c === void 0 ? void 0 : _c.multiple)) {\n            value = firstValue(node.props.options);\n        }\n        return next(value);\n    });\n}\n\n/**\n * Checks if the current schema node is a slot condition.\n *\n * @example\n *\n * ```js\n * {\n *  if: '$slot.name',\n *  then: '$slot.name',\n *  else: []\n * } // this schema node would return true.\n * ```\n *\n * @param node - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode}.\n *\n * @returns `boolean`\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction isSlotCondition(node) {\n    if (isConditional(node) &&\n        node.if &&\n        node.if.startsWith('$slots.') &&\n        typeof node.then === 'string' &&\n        node.then.startsWith('$slots.') &&\n        'else' in node) {\n        return true;\n    }\n    return false;\n}\n/**\n * Finds a seciton by name in a schema.\n *\n * @param schema - A {@link @formkit/core#FormKitSchemaDefinition | FormKitSchemaDefinition} array.\n * @param target - The name of the section to find.\n *\n * @returns a tuple of the schema and the section or a tuple of `false` and `false` if not found.\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction findSection(schema, target) {\n    var _a;\n    return ((_a = eachSection(schema, (section, parent, schemaCondition) => {\n        var _a;\n        if (((_a = section.meta) === null || _a === void 0 ? void 0 : _a.section) === target) {\n            return [parent, schemaCondition];\n        }\n        return;\n    }, true)) !== null && _a !== void 0 ? _a : [false, false]);\n}\n/**\n * Runs a callback over every section in a schema. if stopOnCallbackReturn is true\n * and the callback returns a value, the loop will stop and return that value.\n *\n * @param schema - A {@link @formkit/core#FormKitSchemaNode | FormKitSchemaNode} array.\n * @param callback - A callback to run on every section.\n * @param stopOnCallbackReturn - If true, the loop will stop if the callback returns a value.\n * @param schemaParent - The parent of the current schema node.\n *\n * @returns\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction eachSection(schema, callback, stopOnCallbackReturn = false, schemaParent = []) {\n    if (Array.isArray(schema)) {\n        for (const section of schema) {\n            const callbackReturn = eachSection(section, callback, stopOnCallbackReturn, schema);\n            if (callbackReturn && stopOnCallbackReturn) {\n                return callbackReturn;\n            }\n        }\n        return;\n    }\n    if (isSlotCondition(schema)) {\n        if (isComponent(schema.else) || isDOM(schema.else)) {\n            if (schema.else.meta) {\n                const callbackReturn = callback(schema.else, schemaParent, schema);\n                if (callbackReturn && stopOnCallbackReturn) {\n                    return callbackReturn;\n                }\n            }\n            if (schema.else.children &&\n                Array.isArray(schema.else.children) &&\n                schema.else.children.length) {\n                return eachSection(schema.else.children, callback, stopOnCallbackReturn, schemaParent);\n            }\n        }\n    }\n}\n/**\n * Creates an input schema with all of the wrapping base schema.\n *\n * @param inputSection - Content to store in the input section key location.\n *\n * @returns {@link @formkit/core#FormKitExtendableSchemaRoot | FormKitExtendableSchemaRoot}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction useSchema(inputSection) {\n    return /* #__PURE__ */ outer(/* #__PURE__ */ wrapper(/* #__PURE__ */ label('$label'), /* #__PURE__ */ inner(/* #__PURE__ */ icon('prefix'), /* #__PURE__ */ prefix(), inputSection(), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help'), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value')));\n}\n// ========================================================\n/**\n * Applies attributes to a given schema section by applying a higher order\n * function that merges a given set of attributes into the node.\n *\n * @param attrs - Attributes to apply to a {@link FormKitSchemaExtendableSection\n * | FormKitSchemaExtendableSection}.\n * @param section - A section to apply attributes to.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction  $attrs(attrs, section) {\n    const extendable = (extensions) => {\n        const node = section(extensions);\n        const attributes = typeof attrs === 'function' ? attrs() : attrs;\n        if (!isObject(attributes))\n            return node;\n        if (isSlotCondition(node) && isDOM(node.else)) {\n            node.else.attrs = { ...node.else.attrs, ...attributes };\n        }\n        else if (isDOM(node)) {\n            node.attrs = { ...node.attrs, ...attributes };\n        }\n        return node;\n    };\n    extendable._s = section._s;\n    return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param condition - A schema condition to apply to a section.\n * @param then - The section that applies if the condition is true.\n * @param otherwise - (else) The section that applies if the condition is false.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction  $if(condition, then, otherwise) {\n    const extendable = (extensions) => {\n        const node = then(extensions);\n        if (otherwise ||\n            (isSchemaObject(node) && 'if' in node) ||\n            isSlotCondition(node)) {\n            const conditionalNode = {\n                if: condition,\n                then: node,\n            };\n            if (otherwise) {\n                conditionalNode.else = otherwise(extensions);\n            }\n            return conditionalNode;\n        }\n        else if (isSlotCondition(node)) {\n            Object.assign(node.else, { if: condition });\n        }\n        else if (isSchemaObject(node)) {\n            Object.assign(node, { if: condition });\n        }\n        return node;\n    };\n    extendable._s = token();\n    return extendable;\n}\n/**\n * Applies a condition to a given schema section.\n *\n * @param varName - The name of the variable that holds the current instance.\n * @param inName - The variable we are iterating over.\n * @param section - A section to repeat.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction  $for(varName, inName, section) {\n    return (extensions) => {\n        const node = section(extensions);\n        if (isSlotCondition(node)) {\n            Object.assign(node.else, { for: [varName, inName] });\n        }\n        else if (isSchemaObject(node)) {\n            Object.assign(node, { for: [varName, inName] });\n        }\n        return node;\n    };\n}\n/**\n * Extends a schema node with a given set of extensions.\n *\n * @param section - A section to apply an extension to.\n * @param extendWith - A partial schema snippet to apply to the section.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction  $extend(section, extendWith) {\n    const extendable = (extensions) => {\n        const node = section({});\n        if (isSlotCondition(node)) {\n            if (Array.isArray(node.else))\n                return node;\n            node.else = extendSchema(extendSchema(node.else, extendWith), section._s ? extensions[section._s] : {});\n            return node;\n        }\n        return extendSchema(extendSchema(node, extendWith), section._s ? extensions[section._s] : {});\n    };\n    extendable._s = section._s;\n    return extendable;\n}\n/**\n * Creates a root schema section.\n *\n * @param section - A section to make a root from.\n *\n * @returns {@link FormKitSchemaExtendableSection | FormKitSchemaExtendableSection}\n *\n * @public\n */\n/*@__NO_SIDE_EFFECTS__*/\nfunction  $root(section) {\n    warn(800, '$root');\n    return createRoot(section);\n}\n\n/**\n * Input definition for a button.\n * @public\n */\nconst button = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value')), /* #__PURE__ */ wrapper(/* #__PURE__ */ buttonInput(/* #__PURE__ */ icon('prefix'), /* #__PURE__ */ prefix(), /* #__PURE__ */ buttonLabel('$label || $ui.submit.value'), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help')),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'button',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [localize('submit'), ignore],\n    /**\n     * A key to use for memoizing the schema. This is used to prevent the schema\n     * from needing to be stringified when performing a memo lookup.\n     */\n    schemaMemoKey: 'h6st4epl3j8',\n};\n\n/**\n * Input definition for a checkbox(ess).\n * @public\n */\nconst checkbox = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ $if('$options == undefined', \n    /**\n     * Single checkbox structure.\n     */\n    /* #__PURE__ */ boxWrapper(/* #__PURE__ */ boxInner(/* #__PURE__ */ prefix(), /* #__PURE__ */ box(), /* #__PURE__ */ decorator(/* #__PURE__ */ icon('decorator')), /* #__PURE__ */ suffix()), /* #__PURE__ */ $extend(/* #__PURE__ */ boxLabel('$label'), {\n        if: '$label',\n    })), \n    /**\n     * Multi checkbox structure.\n     */\n    /* #__PURE__ */ fieldset(/* #__PURE__ */ legend('$label'), /* #__PURE__ */ help('$help'), /* #__PURE__ */ boxOptions(/* #__PURE__ */ boxOption(/* #__PURE__ */ boxWrapper(/* #__PURE__ */ boxInner(/* #__PURE__ */ prefix(), /* #__PURE__ */ $extend(/* #__PURE__ */ box(), {\n        bind: '$option.attrs',\n        attrs: {\n            id: '$option.attrs.id',\n            value: '$option.value',\n            checked: '$fns.isChecked($option.value)',\n        },\n    }), /* #__PURE__ */ decorator(/* #__PURE__ */ icon('decorator')), /* #__PURE__ */ suffix()), /* #__PURE__ */ $extend(/* #__PURE__ */ boxLabel('$option.label'), {\n        if: '$option.label',\n    })), /* #__PURE__ */ boxHelp('$option.help'))))), \n    // Help text only goes under the input when it is a single.\n    /* #__PURE__ */ $if('$options == undefined && $help', /* #__PURE__ */ help('$help')), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'box',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [\n        options,\n        checkboxes,\n        /* #__PURE__ */ defaultIcon('decorator', 'checkboxDecorator'),\n    ],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: 'qje02tb3gu8',\n};\n\n/**\n * Input definition for a file input.\n * @public\n */\nconst file = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ wrapper(/* #__PURE__ */ label('$label'), /* #__PURE__ */ inner(/* #__PURE__ */ icon('prefix', 'label'), /* #__PURE__ */ prefix(), /* #__PURE__ */ fileInput(), /* #__PURE__ */ fileList(/* #__PURE__ */ fileItem(/* #__PURE__ */ icon('fileItem'), /* #__PURE__ */ fileName('$file.name'), /* #__PURE__ */ $if('$value.length === 1', /* #__PURE__ */ fileRemove(/* #__PURE__ */ icon('fileRemove'), '$ui.remove.value + \" \" + $file.name')))), /* #__PURE__ */ $if('$value.length > 1', /* #__PURE__ */ fileRemove('$ui.removeAll.value')), /* #__PURE__ */ noFiles(/* #__PURE__ */ icon('noFiles'), '$ui.noFiles.value'), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help'), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'text',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [\n        files,\n        /* #__PURE__ */ defaultIcon('fileItem', 'fileItem'),\n        /* #__PURE__ */ defaultIcon('fileRemove', 'fileRemove'),\n        /* #__PURE__ */ defaultIcon('noFiles', 'noFiles'),\n    ],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: '9kqc4852fv8',\n};\n\n/**\n * Input definition for a form.\n * @public\n */\nconst form = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ formInput('$slots.default', /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value')), /* #__PURE__ */ actions(/* #__PURE__ */ submitInput())),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'group',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [\n        'actions',\n        'submit',\n        'submitLabel',\n        'submitAttrs',\n        'submitBehavior',\n        'incompleteMessage',\n    ],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [form$1, disables],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: '5bg016redjo',\n};\n\n/**\n * Input definition for a group.\n * @public\n */\nconst group = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ fragment('$slots.default'),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'group',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [disables],\n};\n\n/**\n * Input definition for a hidden input.\n * @public\n */\nconst hidden = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ textInput(),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [casts],\n};\n\n/**\n * Input definition for a list.\n * @public\n */\nconst list = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ fragment('$slots.default'),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'list',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['sync', 'dynamic'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [disables, renamesRadios],\n};\n\n/**\n * Input definition for a meta input.\n * @public\n */\nconst meta = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ fragment(),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [],\n};\n\n/**\n * Input definition for a radio.\n * @public\n */\nconst radio = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ $if('$options == undefined', \n    /**\n     * Single radio structure.\n     */\n    /* #__PURE__ */ boxWrapper(/* #__PURE__ */ inner(/* #__PURE__ */ prefix(), /* #__PURE__ */ box(), /* #__PURE__ */ decorator(/* #__PURE__ */ icon('decorator')), /* #__PURE__ */ suffix()), /* #__PURE__ */ $extend(/* #__PURE__ */ boxLabel('$label'), {\n        if: '$label',\n    })), \n    /**\n     * Multi radio structure.\n     */\n    /* #__PURE__ */ fieldset(/* #__PURE__ */ legend('$label'), /* #__PURE__ */ help('$help'), /* #__PURE__ */ boxOptions(/* #__PURE__ */ boxOption(/* #__PURE__ */ boxWrapper(/* #__PURE__ */ inner(/* #__PURE__ */ prefix(), /* #__PURE__ */ $extend(/* #__PURE__ */ box(), {\n        bind: '$option.attrs',\n        attrs: {\n            id: '$option.attrs.id',\n            value: '$option.value',\n            checked: '$fns.isChecked($option.value)',\n        },\n    }), /* #__PURE__ */ decorator(/* #__PURE__ */ icon('decorator')), /* #__PURE__ */ suffix()), /* #__PURE__ */ $extend(/* #__PURE__ */ boxLabel('$option.label'), {\n        if: '$option.label',\n    })), /* #__PURE__ */ boxHelp('$option.help'))))), \n    // Help text only goes under the input when it is a single.\n    /* #__PURE__ */ $if('$options == undefined && $help', /* #__PURE__ */ help('$help')), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'box',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'onValue', 'offValue', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [options, radios, /* #__PURE__ */ defaultIcon('decorator', 'radioDecorator')],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: 'qje02tb3gu8',\n};\n\n/**\n * Input definition for a select.\n * @public\n */\nconst select = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ wrapper(/* #__PURE__ */ label('$label'), /* #__PURE__ */ inner(/* #__PURE__ */ icon('prefix'), /* #__PURE__ */ prefix(), /* #__PURE__ */ selectInput$1(/* #__PURE__ */ $if('$slots.default', () => '$slots.default', /* #__PURE__ */ optionSlot(/* #__PURE__ */ $if('$option.group', /* #__PURE__ */ optGroup(/* #__PURE__ */ optionSlot(/* #__PURE__ */ option('$option.label'))), /* #__PURE__ */ option('$option.label'))))), /* #__PURE__ */ $if('$attrs.multiple !== undefined', () => '', /* #__PURE__ */ icon('select')), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help'), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: ['options', 'placeholder', 'optionsLoader'],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [options, select$1, /* #__PURE__ */ defaultIcon('select', 'select')],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: 'cb119h43krg',\n};\n\n/**\n * Input definition for a textarea.\n * @public\n */\nconst textarea = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ wrapper(/* #__PURE__ */ label('$label'), /* #__PURE__ */ inner(/* #__PURE__ */ icon('prefix', 'label'), /* #__PURE__ */ prefix(), /* #__PURE__ */ textareaInput(), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help'), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [initialValue],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: 'b1n0td79m9g',\n};\n\n/**\n * Input definition for a text.\n * @public\n */\nconst text = {\n    /**\n     * The actual schema of the input, or a function that returns the schema.\n     */\n    schema: /* #__PURE__ */ outer(/* #__PURE__ */ wrapper(/* #__PURE__ */ label('$label'), /* #__PURE__ */ inner(/* #__PURE__ */ icon('prefix', 'label'), /* #__PURE__ */ prefix(), /* #__PURE__ */ textInput(), /* #__PURE__ */ suffix(), /* #__PURE__ */ icon('suffix'))), /* #__PURE__ */ help('$help'), /* #__PURE__ */ messages(/* #__PURE__ */ message('$message.value'))),\n    /**\n     * The type of node, can be a list, group, or input.\n     */\n    type: 'input',\n    /**\n     * The family of inputs this one belongs too. For example \"text\" and \"email\"\n     * are both part of the \"text\" family. This is primary used for styling.\n     */\n    family: 'text',\n    /**\n     * An array of extra props to accept for this input.\n     */\n    props: [],\n    /**\n     * Additional features that should be added to your input\n     */\n    features: [casts],\n    /**\n     * The key used to memoize the schema.\n     */\n    schemaMemoKey: 'c3cc4kflsg',\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    button: button,\n    checkbox: checkbox,\n    color: text,\n    date: text,\n    datetimeLocal: text,\n    email: text,\n    file: file,\n    form: form,\n    group: group,\n    hidden: hidden,\n    list: list,\n    meta: meta,\n    month: text,\n    number: text,\n    password: text,\n    radio: radio,\n    range: text,\n    search: text,\n    select: select,\n    submit: button,\n    tel: text,\n    text: text,\n    textarea: textarea,\n    time: text,\n    url: text,\n    week: text\n});\n\nexport { $attrs, $extend, $for, $if, $root, actions, box, boxHelp, boxInner, boxLabel, boxOption, boxOptions, boxWrapper, button, buttonInput, buttonLabel, casts, checkbox, checkboxes, text as color, createLibraryPlugin, createSection, text as date, text as datetimeLocal, decorator, defaultIcon, disables as disablesChildren, eachSection, text as email, extendSchema, fieldset, file, fileInput, fileItem, fileList, fileName, fileRemove, files, findSection, form, formInput, form$1 as forms, fragment, group, help, hidden, icon, ignore as ignores, initialValue, inner, index as inputs, isGroupOption, isSchemaObject, isSlotCondition, label, legend, list, localize, message, messages, meta, text as month, noFiles, normalizeBoxes, normalizeOptions, text as number, optGroup, option, optionSlot, options, outer, text as password, prefix, radio, radios, text as range, renamesRadios, runtimeProps, text as search, select, selectInput$1 as selectInput, select$1 as selects, button as submit, submitInput, suffix, text as tel, text, textInput, textarea, textareaInput, text as time, text as url, useSchema, text as week, wrapper };\n","import { has, regexForFormat, eq, empty } from '@formkit/utils';\n\n/**\n * Determine if the given input's value was should be considered \"accepted\".\n * @param context - The FormKitValidationContext\n * @public\n */\nconst accepted = function accepted({ value }) {\n    return ['yes', 'on', '1', 1, true, 'true'].includes(value);\n};\naccepted.skipEmpty = false;\n\n/**\n * Determine if the given input's value is after a given date.\n * Defaults to current time.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_after = function ({ value }, compare = false) {\n    const timestamp = Date.parse(compare || new Date());\n    const fieldValue = Date.parse(String(value));\n    return isNaN(fieldValue) ? false : fieldValue > timestamp;\n};\n\n/**\n * Determine if the given input's value contains only alpha characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alpha = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^\\p{L}+$/u,\n        latin: /^[a-z]+$/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains only alpha characters or space.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alpha_spaces = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^[\\p{L} ]+$/u,\n        latin: /^[a-z ]+$/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains only alpha or numeric characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst alphanumeric = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^[0-9\\p{L}]+$/u,\n        latin: /^[0-9a-z]+$/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value is before a given date.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_before = function ({ value }, compare = false) {\n    const timestamp = Date.parse(compare || new Date());\n    const fieldValue = Date.parse(String(value));\n    return isNaN(fieldValue) ? false : fieldValue < timestamp;\n};\n\n/**\n * Determine if the given input's value is between two other values.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst between = function between({ value }, from, to) {\n    if (!isNaN(value) && !isNaN(from) && !isNaN(to)) {\n        const val = 1 * value;\n        from = Number(from);\n        to = Number(to);\n        const [a, b] = from <= to ? [from, to] : [to, from];\n        return val >= 1 * a && val <= 1 * b;\n    }\n    return false;\n};\n\nconst hasConfirm = /(_confirm(?:ed)?)$/;\n/**\n * Determine if the given input's value matches another input's value.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst confirm = function confirm(node, address, comparison = 'loose') {\n    var _a;\n    if (!address) {\n        address = hasConfirm.test(node.name)\n            ? node.name.replace(hasConfirm, '')\n            : `${node.name}_confirm`;\n    }\n    const foreignValue = (_a = node.at(address)) === null || _a === void 0 ? void 0 : _a.value;\n    return comparison === 'strict'\n        ? node.value === foreignValue\n        : node.value == foreignValue;\n};\n\n/**\n * Determine if the given input's value contains alpha characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_alpha = function ({ value }, set = 'default') {\n    const sets = {\n        default: /\\p{L}/u,\n        latin: /[a-z]/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains alpha characters or space.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_alpha_spaces = function ({ value }, set = 'default') {\n    const sets = {\n        default: /[\\p{L} ]/u,\n        latin: /[a-z ]/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains alpha or numeric characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_alphanumeric = function ({ value }, set = 'default') {\n    const sets = {\n        default: /[0-9\\p{L}]/u,\n        latin: /[0-9a-z]/i,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains lowercase characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_lowercase = function ({ value }, set = 'default') {\n    const sets = {\n        default: /\\p{Ll}/u,\n        latin: /[a-z]/,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value contains numeric characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_numeric = function number({ value }) {\n    return /[0-9]/.test(String(value));\n};\n\n/**\n * Determine if the given input's value contains symbol characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_symbol = function ({ value }) {\n    return /[!-/:-@[-`{-~]/.test(String(value));\n};\n\n/**\n * Determine if the given input's value contains uppercase characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst contains_uppercase = function ({ value }, set = 'default') {\n    const sets = {\n        default: /\\p{Lu}/u,\n        latin: /[A-Z]/,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value is between two other dates.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_between = function date_between({ value }, dateA, dateB) {\n    dateA = dateA instanceof Date ? dateA.getTime() : Date.parse(dateA);\n    dateB = dateB instanceof Date ? dateB.getTime() : Date.parse(dateB);\n    const compareTo = value instanceof Date ? value.getTime() : Date.parse(String(value));\n    if (dateA && !dateB) {\n        dateB = dateA;\n        dateA = Date.now();\n    }\n    else if (!dateA || !compareTo) {\n        return false;\n    }\n    return compareTo >= dateA && compareTo <= dateB;\n};\n\n/**\n * Determine if the given input's value matches a specified date format.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst date_format = function date({ value }, format) {\n    if (format && typeof format === 'string') {\n        return regexForFormat(format).test(String(value));\n    }\n    return !isNaN(Date.parse(String(value)));\n};\n\n/**\n * Determine if the given input's value is a plausible email address.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst email = function email({ value }) {\n    const isEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n    return isEmail.test(String(value));\n};\n\n/**\n * Determine if the given input's value ends with a given string.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst ends_with = function ends_with({ value }, ...stack) {\n    if (typeof value === 'string' && stack.length) {\n        return stack.some((item) => {\n            return value.endsWith(item);\n        });\n    }\n    else if (typeof value === 'string' && stack.length === 0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value is in a set of possible values.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst is = function is({ value }, ...stack) {\n    return stack.some((item) => {\n        if (typeof item === 'object') {\n            return eq(item, value);\n        }\n        return item == value;\n    });\n};\n\n/**\n * Determine if the given input's value length is full width.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst length = function length({ value }, first = 0, second = Infinity) {\n    first = parseInt(first);\n    second = isNaN(parseInt(second)) ? Infinity : parseInt(second);\n    const min = first <= second ? first : second;\n    const max = second >= first ? second : first;\n    if (typeof value === 'string' || Array.isArray(value)) {\n        return value.length >= min && value.length <= max;\n    }\n    else if (value && typeof value === 'object') {\n        const length = Object.keys(value).length;\n        return length >= min && length <= max;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value contains only lowercase characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst lowercase = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^\\p{Ll}+$/u,\n        latin: /^[a-z]+$/,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value matches one or more values or regular expressions.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst matches = function matches({ value }, ...stack) {\n    return stack.some((pattern) => {\n        if (typeof pattern === 'string' &&\n            pattern.substr(0, 1) === '/' &&\n            pattern.substr(-1) === '/') {\n            pattern = new RegExp(pattern.substr(1, pattern.length - 2));\n        }\n        if (pattern instanceof RegExp) {\n            return pattern.test(String(value));\n        }\n        return pattern === value;\n    });\n};\n\n/**\n * Determine if the given input's value is less than or equal to the maximum.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst max = function max({ value }, maximum = 10) {\n    if (Array.isArray(value)) {\n        return value.length <= maximum;\n    }\n    return Number(value) <= Number(maximum);\n};\n\n/**\n * Determine if the given input's value is greater than or equal to the minimum.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst min = function min({ value }, minimum = 1) {\n    if (Array.isArray(value)) {\n        return value.length >= minimum;\n    }\n    return Number(value) >= Number(minimum);\n};\n\n/**\n * Determine if the given input's value is not in a given stack.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst not = function not({ value }, ...stack) {\n    return !stack.some((item) => {\n        if (typeof item === 'object') {\n            return eq(item, value);\n        }\n        return item === value;\n    });\n};\n\n/**\n * Determine if the given input's value is numeric.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst number = function number({ value }) {\n    return !isNaN(value);\n};\n\n/**\n * Determine if any of the given inputs have a value.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst require_one = function (node, ...inputNames) {\n    if (!empty(node.value))\n        return true;\n    const values = inputNames.map(name => { var _a; return (_a = node.at(name)) === null || _a === void 0 ? void 0 : _a.value; });\n    return values.some(value => !empty(value));\n};\nrequire_one.skipEmpty = false;\n\n/**\n * Determine if the given input's value is required.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst required = function required({ value }, action = 'default') {\n    return action === 'trim' && typeof value === 'string'\n        ? !empty(value.trim())\n        : !empty(value);\n};\n/**\n * This rules should run even if the inputs is empty (obviously)\n */\nrequired.skipEmpty = false;\n\n/**\n * Determine if the given input's value starts with a substring.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst starts_with = function starts_with({ value }, ...stack) {\n    if (typeof value === 'string' && stack.length) {\n        return stack.some((item) => {\n            return value.startsWith(item);\n        });\n    }\n    else if (typeof value === 'string' && stack.length === 0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Determine if the given input's value contains only symbol characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst symbol = function ({ value }) {\n    return /^[!-/:-@[-`{-~]+$/.test(String(value));\n};\n\n/**\n * Determine if the given input's value contains only uppercase characters.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst uppercase = function ({ value }, set = 'default') {\n    const sets = {\n        default: /^\\p{Lu}+$/u,\n        latin: /^[A-Z]+$/,\n    };\n    const selectedSet = has(sets, set) ? set : 'default';\n    return sets[selectedSet].test(String(value));\n};\n\n/**\n * Determine if the given input's value is a URL.\n * @param context - The FormKitValidationContext\n * @public\n */\nconst url = function url({ value }, ...stack) {\n    try {\n        const protocols = stack.length ? stack : ['http:', 'https:'];\n        const url = new URL(String(value));\n        return protocols.includes(url.protocol);\n    }\n    catch {\n        return false;\n    }\n};\n\nexport { accepted, alpha, alpha_spaces, alphanumeric, between, confirm, contains_alpha, contains_alpha_spaces, contains_alphanumeric, contains_lowercase, contains_numeric, contains_symbol, contains_uppercase, date_after, date_before, date_between, date_format, email, ends_with, is, length, lowercase, matches, max, min, not, number, require_one, required, starts_with, symbol, uppercase, url };\n","import { has } from '@formkit/utils';\nimport { isNode } from '@formkit/core';\n\n/**\n * FormKit Observer is a utility to wrap a FormKitNode in a dependency tracking observer proxy.\n *\n * @packageDocumentation\n */\n/**\n * A registry of all revoked observers.\n */\nconst revokedObservers = new WeakSet();\n/**\n * Creates the observer.\n * @param node - The {@link @formkit/core#FormKitNode | FormKitNode} to observe.\n * @param dependencies - The dependent nodes and the events that are required to\n * watch for changes.\n * @returns Returns a {@link @formkit/observer#FormKitObservedNode | FormKitObservedNode}.\n * @public\n */\nfunction createObserver(node, dependencies) {\n    // The dependencies touched during tracking\n    const deps = dependencies || Object.assign(new Map(), { active: false });\n    // A registry of event receipts returned by the event system\n    const receipts = new Map();\n    /**\n     * Simple function to add a dependency to the deps map.\n     * @param event - The name of the event type (like commit/input etc)\n     */\n    const addDependency = function (event) {\n        var _a;\n        if (!deps.active)\n            return;\n        if (!deps.has(node))\n            deps.set(node, new Set());\n        (_a = deps.get(node)) === null || _a === void 0 ? void 0 : _a.add(event);\n    };\n    /**\n     * Proxies the props of a node so we know which ones were messed with, could\n     * potentially be more generalized in the future if we want to support\n     * more sub-objects.\n     * @param props - The props object from a node\n     * @returns\n     */\n    const observeProps = function (props) {\n        return new Proxy(props, {\n            get(...args) {\n                typeof args[1] === 'string' && addDependency(`prop:${args[1]}`);\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Observes the FormKit ledger \"value\".\n     * @param ledger - A formkit ledger counter.\n     */\n    const observeLedger = function (ledger) {\n        return new Proxy(ledger, {\n            get(...args) {\n                if (args[1] === 'value') {\n                    return (key) => {\n                        addDependency(`count:${key}`);\n                        return ledger.value(key);\n                    };\n                }\n                return Reflect.get(...args);\n            },\n        });\n    };\n    /**\n     * Return values from our observer proxy first pass through this function\n     * which gives us a chance to listen sub-dependencies and properties.\n     */\n    const observe = function (value, property) {\n        if (isNode(value)) {\n            return createObserver(value, deps);\n        }\n        if (property === 'value')\n            addDependency('commit');\n        if (property === '_value')\n            addDependency('input');\n        if (property === 'props')\n            return observeProps(value);\n        if (property === 'ledger')\n            return observeLedger(value);\n        return value;\n    };\n    /**\n     * The actual proxy object of the original node.\n     */\n    const { proxy: observed, revoke, } = Proxy.revocable(node, {\n        get(...args) {\n            switch (args[1]) {\n                case '_node':\n                    return node;\n                case 'deps':\n                    return deps;\n                case 'watch':\n                    return (block, after) => watch(observed, block, after);\n                case 'observe':\n                    return () => {\n                        const old = new Map(deps);\n                        deps.clear();\n                        deps.active = true;\n                        return old;\n                    };\n                case 'stopObserve':\n                    return () => {\n                        const newDeps = new Map(deps);\n                        deps.active = false;\n                        return newDeps;\n                    };\n                case 'receipts':\n                    return receipts;\n                case 'kill':\n                    return () => {\n                        removeListeners(receipts);\n                        revokedObservers.add(args[2]);\n                        revoke();\n                        return undefined;\n                    };\n            }\n            const value = Reflect.get(...args);\n            // If we're dealing with a function, we need to sub-call the function\n            // get that return value, and pass it through the same logic.\n            if (typeof value === 'function') {\n                return (...subArgs) => {\n                    const subValue = value(...subArgs);\n                    return observe(subValue, args[1]);\n                };\n            }\n            return observe(value, args[1]);\n        },\n    });\n    return observed;\n}\n/**\n * Given two maps (`toAdd` and `toRemove`), apply the dependencies as event\n * listeners on the underlying nodes.\n * @param node - The node to apply dependencies to.\n * @param deps - A tuple of toAdd and toRemove FormKitDependencies maps.\n * @param callback - The callback to add or remove.\n * @internal\n */\nfunction applyListeners(node, [toAdd, toRemove], callback) {\n    toAdd.forEach((events, depNode) => {\n        events.forEach((event) => {\n            var _a;\n            node.receipts.has(depNode) || node.receipts.set(depNode, {});\n            node.receipts.set(depNode, Object.assign((_a = node.receipts.get(depNode)) !== null && _a !== void 0 ? _a : {}, {\n                [event]: depNode.on(event, callback),\n            }));\n        });\n    });\n    toRemove.forEach((events, depNode) => {\n        events.forEach((event) => {\n            if (node.receipts.has(depNode)) {\n                const nodeReceipts = node.receipts.get(depNode);\n                if (nodeReceipts && has(nodeReceipts, event)) {\n                    depNode.off(nodeReceipts[event]);\n                    delete nodeReceipts[event];\n                    node.receipts.set(depNode, nodeReceipts);\n                }\n            }\n        });\n    });\n}\n/**\n * Remove all the receipts from the observed node and subtree.\n * @param receipts - The FormKit observer receipts to remove.\n * @public\n */\nfunction removeListeners(receipts) {\n    receipts.forEach((events, node) => {\n        for (const event in events) {\n            node.off(events[event]);\n        }\n    });\n}\n/**\n * Observes a chunk of code to dependencies, and then re-calls that chunk of\n * code when those dependencies are manipulated.\n * @param node - The node to observer\n * @param block - The block of code to observe\n * @param after - A function to call after a effect has been run.\n * @public\n */\nfunction watch(node, block, after) {\n    const doAfterObservation = (res) => {\n        const newDeps = node.stopObserve();\n        applyListeners(node, diffDeps(oldDeps, newDeps), () => watch(node, block, after));\n        if (after)\n            after(res);\n    };\n    const oldDeps = new Map(node.deps);\n    node.observe();\n    const res = block(node);\n    if (res instanceof Promise)\n        res.then((val) => doAfterObservation(val));\n    else\n        doAfterObservation(res);\n}\n/**\n * Determines which nodes should be added as dependencies and which should be\n * removed.\n * @param previous - The previous watcher dependencies.\n * @param current - The new/current watcher dependencies.\n * @returns A tuple of maps: `toAdd` and `toRemove`.\n * @public\n */\nfunction diffDeps(previous, current) {\n    const toAdd = new Map();\n    const toRemove = new Map();\n    current.forEach((events, node) => {\n        if (!previous.has(node)) {\n            toAdd.set(node, events);\n        }\n        else {\n            const eventsToAdd = new Set();\n            const previousEvents = previous.get(node);\n            events.forEach((event) => !(previousEvents === null || previousEvents === void 0 ? void 0 : previousEvents.has(event)) && eventsToAdd.add(event));\n            toAdd.set(node, eventsToAdd);\n        }\n    });\n    previous.forEach((events, node) => {\n        if (!current.has(node)) {\n            toRemove.set(node, events);\n        }\n        else {\n            const eventsToRemove = new Set();\n            const newEvents = current.get(node);\n            events.forEach((event) => !(newEvents === null || newEvents === void 0 ? void 0 : newEvents.has(event)) && eventsToRemove.add(event));\n            toRemove.set(node, eventsToRemove);\n        }\n    });\n    return [toAdd, toRemove];\n}\n/**\n * Checks if the given node is revoked.\n * @param node - Any observed node to check.\n * @returns A `boolean` indicating if the node is revoked.\n * @public\n */\nfunction isKilled(node) {\n    return revokedObservers.has(node);\n}\n\nexport { applyListeners, createObserver, diffDeps, isKilled, removeListeners };\n","import { createMessage } from '@formkit/core';\nimport { createObserver, removeListeners, isKilled, applyListeners, diffDeps } from '@formkit/observer';\nimport { cloneAny, token, eq, empty, clone, has } from '@formkit/utils';\n\n/**\n * Message that gets set when the node is awaiting validation.\n */\nconst validatingMessage = createMessage({\n    type: 'state',\n    blocking: true,\n    visible: false,\n    value: true,\n    key: 'validating',\n});\n/**\n * The actual validation plugin function. Everything must be bootstrapped here.\n *\n * @param baseRules - Base validation rules to include in the plugin. By default,\n * FormKit makes all rules in the \\@formkit/rules package available via the\n * defaultConfig.\n *\n * @public\n */\nfunction createValidationPlugin(baseRules = {}) {\n    return function validationPlugin(node) {\n        let propRules = cloneAny(node.props.validationRules || {});\n        let availableRules = { ...baseRules, ...propRules };\n        // create an observed node\n        let observedNode = createObserver(node);\n        const state = { input: token(), rerun: null, isPassing: true };\n        let validation = cloneAny(node.props.validation);\n        // If the node's validation props change, reboot:\n        node.on('prop:validation', ({ payload }) => reboot(payload, propRules));\n        node.on('prop:validationRules', ({ payload }) => reboot(validation, payload));\n        /**\n         * Reboots the validation using new rules or declarations/intents.\n         * @param newValidation - New validation declaration to use\n         * @param newRules - New validation rules to use\n         * @returns\n         */\n        function reboot(newValidation, newRules) {\n            var _a;\n            if (eq(Object.keys(propRules || {}), Object.keys(newRules || {})) &&\n                eq(validation, newValidation))\n                return;\n            propRules = cloneAny(newRules);\n            validation = cloneAny(newValidation);\n            availableRules = { ...baseRules, ...propRules };\n            // Destroy all observers that may re-trigger validation on an old stack\n            removeListeners(observedNode.receipts);\n            // Clear existing message observers\n            (_a = node.props.parsedRules) === null || _a === void 0 ? void 0 : _a.forEach((validation) => {\n                var _a;\n                validation.messageObserver = (_a = validation.messageObserver) === null || _a === void 0 ? void 0 : _a.kill();\n            });\n            // Remove all existing messages before re-validating\n            node.store.filter(() => false, 'validation');\n            node.props.parsedRules = parseRules(newValidation, availableRules);\n            observedNode.kill();\n            observedNode = createObserver(node);\n            validate(observedNode, node.props.parsedRules, state);\n        }\n        // Validate the field when this plugin is initialized\n        node.props.parsedRules = parseRules(validation, availableRules);\n        validate(observedNode, node.props.parsedRules, state);\n    };\n}\n/**\n * Given parsed validations, a value and a node, run the validations and set\n * the appropriate store messages on the node.\n * @param value - The value being validated\n * @param node - The Node this value belongs to\n * @param rules - The rules\n */\nfunction validate(node, validations, state) {\n    if (isKilled(node))\n        return;\n    state.input = token();\n    state.isPassing = true;\n    node.store.filter((message) => !message.meta.removeImmediately, 'validation');\n    validations.forEach((validation) => validation.debounce && clearTimeout(validation.timer));\n    if (validations.length) {\n        node.store.set(validatingMessage);\n        run(0, validations, node, state, false, () => {\n            node.store.remove(validatingMessage.key);\n        });\n    }\n}\n/**\n * Runs validation rules recursively while collecting dependencies allowing for\n * cross-node validation rules that automatically re-trigger when a foreign\n * value is changed.\n * @param current - The index of the current validation rule\n * @param validations - The remaining validation rule stack to run\n * @param node - An observed node, the owner of this validation stack\n * @param state - An object of state information about this run\n * @param removeImmediately - Should messages created during this call be removed immediately when a new commit takes place?\n * @returns\n */\nfunction run(current, validations, node, state, removeImmediately, complete) {\n    const validation = validations[current];\n    if (!validation)\n        return complete();\n    const currentRun = state.input;\n    validation.state = null;\n    function next(async, result) {\n        state.isPassing = state.isPassing && !!result;\n        validation.queued = false;\n        const newDeps = node.stopObserve();\n        applyListeners(node, diffDeps(validation.deps, newDeps), () => {\n            // Event callback for when the deps change:\n            try {\n                node.store.set(validatingMessage);\n            }\n            catch (e) { }\n            validation.queued = true;\n            if (state.rerun)\n                clearTimeout(state.rerun);\n            state.rerun = setTimeout(validate, 0, node, validations, state);\n        });\n        validation.deps = newDeps;\n        if (state.input === currentRun) {\n            validation.state = result;\n            if (result === false) {\n                createFailedMessage(node, validation, removeImmediately || async);\n            }\n            else {\n                removeMessage(node, validation);\n            }\n            if (validations.length > current + 1) {\n                run(current + 1, validations, node, state, removeImmediately || async, complete);\n            }\n            else {\n                // The validation has completed\n                complete();\n            }\n        }\n    }\n    if ((!empty(node.value) || !validation.skipEmpty) &&\n        (state.isPassing || validation.force)) {\n        if (validation.queued) {\n            runRule(validation, node, (result) => {\n                result instanceof Promise\n                    ? result.then((r) => next(true, r))\n                    : next(false, result);\n            });\n        }\n        else {\n            // In this case our rule is not queued, so literally nothing happened that\n            // would affect it, we just need to move past this rule and make no\n            // modifications to state\n            run(current + 1, validations, node, state, removeImmediately, complete);\n        }\n    }\n    else {\n        // This rule is not being run because either:\n        //  1. The field is empty and this rule should not run when empty\n        //  2. A previous validation rule is failing and this one is not forced\n        // In this case we should call next validation.\n        if (empty(node.value) && validation.skipEmpty && state.isPassing) {\n            // This node has an empty value so its validation was skipped. So we\n            // need to queue it up, we do that by starting an observation and just\n            // touching the value attribute.\n            node.observe();\n            node.value;\n            // Because this validation rule is skipped when the node's value is empty\n            // so we keep the current value `state.isPassing` to the next rule execution\n            // if we pass null it will be typecasted to false and all following rules\n            // will be ignored including `required` rule which cause odds behavior\n            next(false, state.isPassing);\n        }\n        else {\n            next(false, null);\n        }\n    }\n}\n/**\n * Run a validation rule debounced or not.\n * @param validation - A validation to debounce\n */\nfunction runRule(validation, node, after) {\n    if (validation.debounce) {\n        validation.timer = setTimeout(() => {\n            node.observe();\n            after(validation.rule(node, ...validation.args));\n        }, validation.debounce);\n    }\n    else {\n        node.observe();\n        after(validation.rule(node, ...validation.args));\n    }\n}\n/**\n * The messages given to this function have already been set on the node, but\n * any other validation messages on the node that are not included in this\n * stack should be removed because they have been resolved.\n * @param node - The node to operate on.\n * @param messages - A new stack of messages\n */\nfunction removeMessage(node, validation) {\n    const key = `rule_${validation.name}`;\n    if (validation.messageObserver) {\n        validation.messageObserver = validation.messageObserver.kill();\n    }\n    if (has(node.store, key)) {\n        node.store.remove(key);\n    }\n}\n/**\n *\n * @param value - The value that is failing\n * @param validation - The validation object\n */\nfunction createFailedMessage(node, validation, removeImmediately) {\n    if (isKilled(node))\n        return;\n    if (!validation.messageObserver) {\n        validation.messageObserver = createObserver(node._node);\n    }\n    validation.messageObserver.watch((node) => {\n        const i18nArgs = createI18nArgs(node, validation);\n        return i18nArgs;\n    }, (i18nArgs) => {\n        const customMessage = createCustomMessage(node, validation, i18nArgs);\n        // Here we short circuit the i18n system to force the output.\n        const message = createMessage({\n            blocking: validation.blocking,\n            key: `rule_${validation.name}`,\n            meta: {\n                /**\n                 * Use this key instead of the message root key to produce i18n validation\n                 * messages.\n                 */\n                messageKey: validation.name,\n                /**\n                 * For messages that were created *by or after* a debounced or async\n                 * validation rule — we make note of it so we can immediately remove them\n                 * as soon as the next commit happens.\n                 */\n                removeImmediately,\n                /**\n                 * Determines if this message should be passed to localization.\n                 */\n                localize: !customMessage,\n                /**\n                 * The arguments that will be passed to the validation rules\n                 */\n                i18nArgs,\n            },\n            type: 'validation',\n            value: customMessage || 'This field is not valid.',\n        });\n        node.store.set(message);\n    });\n}\n/**\n * Returns a custom validation message if applicable.\n * @param node - FormKit Node\n * @param validation - The validation rule being processed.\n */\nfunction createCustomMessage(node, validation, i18nArgs) {\n    const customMessage = node.props.validationMessages &&\n        has(node.props.validationMessages, validation.name)\n        ? node.props.validationMessages[validation.name]\n        : undefined;\n    if (typeof customMessage === 'function') {\n        return customMessage(...i18nArgs);\n    }\n    return customMessage;\n}\n/**\n * Creates the arguments passed to the i18n\n * @param node - The node that performed the validation\n * @param validation - The validation that failed\n */\nfunction createI18nArgs(node, validation) {\n    // If a custom message has been found, short circuit the i18n system.\n    return [\n        {\n            node,\n            name: createMessageName(node),\n            args: validation.args,\n        },\n    ];\n}\n/**\n * Given a node, this returns the name that should be used in validation\n * messages. This is either the `validationLabel` prop, the `label` prop, or\n * the name of the input (in that order).\n * @param node - The node to display\n * @returns\n * @public\n */\nfunction createMessageName(node) {\n    if (typeof node.props.validationLabel === 'function') {\n        return node.props.validationLabel(node);\n    }\n    return (node.props.validationLabel ||\n        node.props.label ||\n        node.props.name ||\n        String(node.name));\n}\n/**\n * Describes hints, must also be changed in the debounceExtractor.\n */\nconst hintPattern = '(?:[\\\\*+?()0-9]+)';\n/**\n * A pattern to describe rule names. Rules names can only contain letters,\n * numbers, and underscores and must start with a letter.\n */\nconst rulePattern = '[a-zA-Z][a-zA-Z0-9_]+';\n/**\n * Regular expression for extracting rule data.\n */\nconst ruleExtractor = new RegExp(`^(${hintPattern}?${rulePattern})(?:\\\\:(.*)+)?$`, 'i');\n/**\n * Validation hints are special characters preceding a validation rule, like\n * !phone\n */\nconst hintExtractor = new RegExp(`^(${hintPattern})(${rulePattern})$`, 'i');\n/**\n * Given a hint string like ^(200)? or ^? or (200)?^ extract the hints to\n * matches.\n */\nconst debounceExtractor = /([\\*+?]+)?(\\(\\d+\\))([\\*+?]+)?/;\n/**\n * Determines if a given string is in the proper debounce format.\n */\nconst hasDebounce = /\\(\\d+\\)/;\n/**\n * The default values of the available validation hints.\n */\nconst defaultHints = {\n    blocking: true,\n    debounce: 0,\n    force: false,\n    skipEmpty: true,\n    name: '',\n};\n/**\n * Parse validation intents and strings into validation rule stacks.\n * @param validation - Either a string a validation rules, or proper array of structured rules.\n * @internal\n */\nfunction parseRules(validation, rules) {\n    if (!validation)\n        return [];\n    const intents = typeof validation === 'string'\n        ? extractRules(validation)\n        : clone(validation);\n    return intents.reduce((validations, args) => {\n        let rule = args.shift();\n        const hints = {};\n        if (typeof rule === 'string') {\n            const [ruleName, parsedHints] = parseHints(rule);\n            if (has(rules, ruleName)) {\n                rule = rules[ruleName];\n                Object.assign(hints, parsedHints);\n            }\n        }\n        if (typeof rule === 'function') {\n            validations.push({\n                rule,\n                args,\n                timer: 0,\n                state: null,\n                queued: true,\n                deps: new Map(),\n                ...defaultHints,\n                ...fnHints(hints, rule),\n            });\n        }\n        return validations;\n    }, []);\n}\n/**\n * A string of validation rules written in FormKitRule notation.\n * @param validation - The string of rules\n * @internal\n */\nfunction extractRules(validation) {\n    return validation.split('|').reduce((rules, rule) => {\n        const parsedRule = parseRule(rule);\n        if (parsedRule) {\n            rules.push(parsedRule);\n        }\n        return rules;\n    }, []);\n}\n/**\n * Given a rule like confirm:password_confirm produce a FormKitValidationIntent\n * @param rule - A string representing a validation rule.\n * @returns\n */\nfunction parseRule(rule) {\n    const trimmed = rule.trim();\n    if (trimmed) {\n        const matches = trimmed.match(ruleExtractor);\n        if (matches && typeof matches[1] === 'string') {\n            const ruleName = matches[1].trim();\n            const args = matches[2] && typeof matches[2] === 'string'\n                ? matches[2].split(',').map((s) => s.trim())\n                : [];\n            return [ruleName, ...args];\n        }\n    }\n    return false;\n}\n/**\n * Given a rule name, detect if there are any additional hints like !\n * @param ruleName - string representing a rule name\n * @returns\n */\nfunction parseHints(ruleName) {\n    const matches = ruleName.match(hintExtractor);\n    if (!matches) {\n        return [ruleName, { name: ruleName }];\n    }\n    const map = {\n        '*': { force: true },\n        '+': { skipEmpty: false },\n        '?': { blocking: false },\n    };\n    const [, hints, rule] = matches;\n    const hintGroups = hasDebounce.test(hints)\n        ? hints.match(debounceExtractor) || []\n        : [, hints];\n    return [\n        rule,\n        [hintGroups[1], hintGroups[2], hintGroups[3]].reduce((hints, group) => {\n            if (!group)\n                return hints;\n            if (hasDebounce.test(group)) {\n                hints.debounce = parseInt(group.substr(1, group.length - 1));\n            }\n            else {\n                group\n                    .split('')\n                    .forEach((hint) => has(map, hint) && Object.assign(hints, map[hint]));\n            }\n            return hints;\n        }, { name: rule }),\n    ];\n}\n/**\n * Extracts hint properties from the validation rule function itself and applies\n * them if they are not already in the set of validation hints extracted from\n * strings.\n * @param existingHints - An existing set of hints already parsed\n * @param rule - The actual rule function, which can contain hint properties\n * @returns\n */\nfunction fnHints(existingHints, rule) {\n    if (!existingHints.name) {\n        existingHints.name = rule.ruleName || rule.name;\n    }\n    return ['skipEmpty', 'force', 'debounce', 'blocking'].reduce((hints, hint) => {\n        if (has(rule, hint) && !has(hints, hint)) {\n            Object.assign(hints, {\n                [hint]: rule[hint],\n            });\n        }\n        return hints;\n    }, existingHints);\n}\n/**\n * Extracts all validation messages from the given node and all its descendants.\n * This is not reactive and must be re-called each time the messages change.\n * @param node - The FormKit node to extract validation rules from — as well as its descendants.\n * @public\n */\nfunction getValidationMessages(node) {\n    const messages = new Map();\n    const extract = (n) => {\n        const nodeMessages = [];\n        for (const key in n.store) {\n            const message = n.store[key];\n            if (message.type === 'validation' &&\n                message.blocking &&\n                message.visible &&\n                typeof message.value === 'string') {\n                nodeMessages.push(message);\n            }\n        }\n        if (nodeMessages.length) {\n            messages.set(n, nodeMessages);\n        }\n        return n;\n    };\n    extract(node).walk(extract);\n    return messages;\n}\n\nexport { createMessageName, createValidationPlugin, getValidationMessages };\n","import { createMessageName } from '@formkit/validation';\nimport { has } from '@formkit/utils';\n\n/**\n * Given a string, convert it to sentence case.\n *\n * @param str - The string to sentence case.\n *\n * @returns `string`\n *\n * @public\n */\nfunction sentence(str) {\n    return str[0].toUpperCase() + str.substr(1);\n}\n/**\n * Creates an oxford-comma separated list of items.\n *\n * @param items - the items to list out.\n * @param conjunction - in the list \"x, y, and z\", \"and\" is the conjunction.\n * Defaults to \"or\".\n *\n * @returns `string`\n *\n * @public\n */\nfunction list(items, conjunction = 'or') {\n    return items.reduce((oxford, item, index) => {\n        oxford += item;\n        if (index <= items.length - 2 && items.length > 2) {\n            oxford += ', ';\n        }\n        if (index === items.length - 2) {\n            oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `;\n        }\n        return oxford;\n    }, '');\n}\n/**\n * Given a string or a date, return a nice human-readable version.\n *\n * @param date - A string or a date.\n *\n * @returns `string`\n *\n * @public\n */\nfunction date(date) {\n    const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date;\n    if (!(dateTime instanceof Date)) {\n        return '(unknown)';\n    }\n    return new Intl.DateTimeFormat(undefined, {\n        dateStyle: 'medium',\n        timeZone: 'UTC'\n    }).format(dateTime);\n}\n/**\n * Orders two variables from smallest to largest.\n *\n * @param first - The first number or string.\n * @param second - The second number or string.\n *\n * @returns `[smaller: number | string, larger: number | string]`\n *\n * @public\n */\nfunction order(first, second) {\n    return Number(first) >= Number(second) ? [second, first] : [first, second];\n}\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$J = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'إضافة',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'إزالة',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'إزالة الكل',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'إرسال',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'لا يوجد ملف مختار',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'تحرك لأعلى',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'انتقل لأسفل',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'يتم الآن التحميل...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'تحميل المزيد',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'التالي',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'السابق',\n    /**\n     * Shown when transferring items between lists.\n     */\n    addAllValues: 'أضف جميع القيم',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'إضافة قيم محددة',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'قم بإزالة جميع القيم',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'إزالة القيم المحددة',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'اختر التاريخ',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'تاريخ التغيير',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'التاريخ المحدد غير صالح.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'أغلق',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$J = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `الرجاء قبول ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} بعد ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في المستقبل.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف أبجدية فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف وأرقام فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `يمكن أن تحتوي ${sentence(name)} على أحرف ومسافات فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أبجدية.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أو أرقام.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف أو مسافات.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على رمز.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف كبيرة.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أحرف صغيرة.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `يجب أن يحتوي ${sentence(name)} على أرقام.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `يجب أن يكون ${sentence(name)} رمزًا.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف كبيرة فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف صغيرة فقط.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} قبل ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} في الماضي.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `يجب أن يكون ${sentence(name)} ما بين ${a} و ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} غير متطابق.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `يجب أن يكون ${sentence(name)} بين ${date(args[0])} و ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'الرجاء أدخال بريد إليكتروني صالح.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `لا ينتهي ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `يجب أن يكون ${sentence(name)} حرفًا واحدًا على الأقل.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${max} حرفًا.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `يجب أن يتكون ${sentence(name)} من الأحرف ${max}.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `يجب أن يكون ${sentence(name)} أكبر من أو يساوي ${min} حرفًا.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} بين ${min} و ${max} حرفًا.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'لا يسمح بتنسيقات الملفات.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} من النوع: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `يجب أن يكون ${sentence(name)} على الأقل ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ليس ${name} مسموحًا به.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} يجب ان يكون رقماً`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' أو ')} مطلوب.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} مطلوب.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `لا يبدأ ${sentence(name)} بـ ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `يرجى إدخال عنوان URL صالح.`;\n        /* </i18n> */\n    },\n};\n\nvar ar = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$J,\n    validation: validation$J\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$I = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'əlavə edin',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'çıxarmaq',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hamısını silin',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Üzr istəyirik, bütün sahələr düzgün doldurulmayıb.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Təqdim et',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Heç bir fayl seçilməyib',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'yuxarı hərəkət',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Aşağı hərəkət',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yükləmə...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Daha çox yüklə',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Növbəti',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Əvvəlki',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Bütün dəyərləri əlavə edin',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Seçilmiş dəyərləri əlavə edin',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Bütün dəyərləri sil',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Seçilmiş dəyərləri sil',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Tarixi seçin',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Tarixi dəyişdirin',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Seçilmiş tarix etibarsızdır.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Bağlayın',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$I = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} qəbul edin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} sonra olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} gələcəkdə olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} yalnız əlifba sırası simvollarından ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} yalnız hərf və rəqəmlərdən ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} yalnız hərflərdən və boşluqlardan ibarət ola bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} əlifba sırası simvolları ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} hərfləri və ya nömrələri ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} hərfləri və ya boşluqları ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} simvolu ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} böyük olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kiçik olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} nömrələri ehtiva etməlidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} simvol olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} yalnız böyük hərfləri ehtiva edə bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} yalnız kiçik hərfləri ehtiva edə bilər.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} əvvəl olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} keçmişdə olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} və ${b} arasında olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} uyğun gəlmir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} etibarlı tarix deyil, ${args[0]} formatından istifadə edin`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])} və ${date(args[1])} arasında olmalıdır`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Etibarlı e-poçt ünvanı daxil edin.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ilə bitmir.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} ən azı bir simvol olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max} simvoldan kiçik və ya ona bərabər olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} simvol uzunluğunda olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} simvoldan böyük və ya ona bərabər olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min} və ${max} simvol arasında olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name}-dən çox ola bilməz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} dəyərindən kiçik və ya ona bərabər olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Fayl formatlarına icazə verilmir.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} aşağıdakı tipdə olmalıdır: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name}-dən az ola bilməz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ən azı ${args[0]} olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” icazə verilən ${name} deyil.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} rəqəm olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' və ya ')} tələb olunur.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} tələb olunur.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ilə başlamır.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Xahiş edirik, düzgün URL daxil edin.`;\n        /* </i18n> */\n    },\n};\n\nvar az = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$I,\n    validation: validation$I\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$H = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Добави',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Премахни',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Премахни всички',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Извинете, не всички полета са попълнени правилно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Изпрати',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Няма избран файл',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Преместване нагоре',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Преместете се надолу',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Зареждане...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Заредете повече',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Следващ',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Предишен',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Добавете всички стойности',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Добавяне на избрани стойности',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Премахнете всички стойности',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Премахване на избраните стойности',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Избери дата',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Промяна на датата',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Избраната дата е невалидна.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Затвори',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$H = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Моля приемете ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} трябва да е след ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде в бъдещето.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} може да съдържа само букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} може да съдържа само букви и цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} може да съдържа само букви и интервали.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} трябва да съдържа азбучни знаци.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} трябва да съдържа букви или цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} трябва да съдържа букви или интервали.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} трябва да съдържа символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} трябва да съдържа главни букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} трябва да съдържа малки букви.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} трябва да съдържа числа.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} трябва да бъде символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} може да съдържа само главни букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} може да съдържа само малки букви.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} трябва да е преди ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде в миналото.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Това поле е конфигурирано неправилно и не може да бъде изпратено`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} трябва да бъде между ${a} и ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} не съвпада.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} е невалидна дата. Моля, използвайте формата ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Това поле е конфигурирано неправилно и не може да бъде изпратено';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} трябва да бъде между ${date(args[0])} и ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Моля, въведете валиден имейл адрес.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} не завършва на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} е неразрешена стойност.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} трябва да има поне един символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде по-малко или равно на ${max} символа.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде ${max} символи дълго.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} трябва да бъде по-голямо или равно на ${min} символа.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде между ${min} и ${max} символа.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} е неразрешена стойност.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не може да има повече от ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде по-малко или равно на ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не са разрешени никакви файлови формати.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде от тип: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не може да има по-малко от ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} трябва да бъде поне ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” е неразрешен ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} трябва да бъде число.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} изисква се.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} е задължително.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} не започва с ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Моля, въведете валиден URL адрес.`;\n        /* </i18n> */\n    },\n};\n\nvar bg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$H,\n    validation: validation$H\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$G = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ukloni sve',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nažalost, nisu sva polja ispravno popunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošalji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nije odabran nijedan fajl',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pomjeri gore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pomjeri dole',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Učitavanje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Učitaj više',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Sljedeći',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Prethodni',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte sve vrijednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodajte odabrane vrijednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Uklonite sve vrijednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Uklonite odabrane vrijednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Odaberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Promjenite datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Odabrani datum je nevažeći.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zatvori',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$G = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Molimo prihvatite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti poslije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} može sadržavati samo abecedne karaktere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} može sadržavati samo slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} može sadržavati samo slova i razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati abecedne karaktere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora sadržavati simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora sadržavati veliko slovo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora sadržavati malo slovo.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora sadržavati brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti prije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ovo polje je pogrešno konfigurirano i ne može se poslati.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne podudara se.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije ispravan datum, molimo koristite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje je pogrešno konfigurirano i ne može se poslati';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Molimo Vas da unesete validnu email adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne završava sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora biti najmanje jedan karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora biti manje od ili jednako ${max} karaktera.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} treba imati ${max} karaktera.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora biti veći od ili jednak ${min} karaktera.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora biti između ${min} i ${max} karaktera.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne može imati više od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti manji ili jednak ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nisu dozvoljeni formati datoteka.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne može imati manje od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Mora biti barem ${args[0]} ${name} .`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljeno ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ili ')} je obavezno.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Unesite važeći link.`;\n        /* </i18n> */\n    },\n};\n\nvar bs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$G,\n    validation: validation$G\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$F = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Afegir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Eliminar',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Eliminar tot',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Disculpi, no tots els camps estan omplerts correctament.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Cap fitxer triat',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Moure amunt',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Moure avall',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Carregant...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carregar més',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Següent',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Afegir tots els valors',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Afegeix els valors seleccionats',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminar tots els valors',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Elimina els valors seleccionats',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Trieu la data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Canviar data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La data seleccionada no és vàlida.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Tancar',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$F = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Si us plau accepti ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} ha de succeïr al futur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} només pot contenir caràcters alfabètics.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} només pot contenir lletres i números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} només pot contenir lletres i espais.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} ha de contenir caràcters alfabètics.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} ha de contenir lletres o números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ha de contenir lletres o espais.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} ha de contenir símbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ha de contenir majúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ha de contenir minúscules.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} ha de contenir números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} ha de ser un símbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} només pot contenir lletres majúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} només pot contenir lletres minúscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} ha d'estar al passat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Aquest camp està configurat incorrectament i no pot ésser enviat.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ha d'estar entre ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} no concorda.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} no és una data vàlida, si us plau empri el format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Aquest camp està configurat incorrectament i no pot ésser enviat';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ha d'estar entre ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\n     */\n    email: `Si us plau, entri una adreça d'e-mail vàlida.`,\n    /**\n     * Does not end with the specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no acaba amb ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} no és un valor acceptat.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} ha de tenir com a mínim un caràcter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser inferior o igual a ${max} caràcters.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ha de tenir una longitud de ${max} caràcters.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ha de ser major que o igual a ${min} caràcters.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ha d'estar entre ${min} i ${max} caràcters.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} no és un valor permès.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `No pot tenir més de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser menys que o igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No hi ha cap format de fitxer acceptat.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser del tipus: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `No pot tenir menys de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ha de ser com a mínim ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” no s'accepta com a ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} ha de ser un número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} es requereix.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} és obligatori.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no comença amb ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Si us plau inclogui una url vàlida.`;\n        /* </i18n> */\n    },\n};\n\nvar ca = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$F,\n    validation: validation$F\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$E = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Přidat',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odebrat',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odebrat vše',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Odeslat',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Žádný soubor nebyl vybrán',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pohyb nahoru',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Posunout dolů',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Načítání...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Načíst více',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Další',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Předchozí',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Přidat všechny hodnoty',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Přidání vybraných hodnot',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstraňte všechny hodnoty',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstranění vybraných hodnot',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Zvolte datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Změnit datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Vybrané datum je neplatné.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zavřít',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$E = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosím, zaškrtněte ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v budoucnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} může obsahovat pouze písmena a čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musí obsahovat abecední znaky.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musí obsahovat písmena nebo číslice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musí obsahovat písmena nebo mezery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí obsahovat symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musí obsahovat velká písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musí obsahovat malá písmena.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musí obsahovat čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí být symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} může obsahovat pouze velká písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} může obsahovat pouze malá písmena.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musí být před ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí být v minulosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} musí být mezi ${a} a ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nejsou shodná.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} není platné datum, prosím, použijte formát ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Prosím, zadejte platnou e-mailovou adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nekončí na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} musí mít nejméně jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} může mít maximálně ${max} znaků.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} by mělo být ${max} znaků dlouhé.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} musí obsahovat minimálně ${min} znaků.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} musí být dlouhé ${min} až ${max} znaků.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} není povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nelze použít více než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} musí mít menší nebo rovno než ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nejsou nakonfigurovány povolené typy souborů.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musí být typu: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nelze mít méně než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} musí být minimálně ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” není dovolená hodnota pro ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musí být číslo.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' nebo ')} je vyžadován.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je povinné.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nezačíná na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Zadejte prosím platnou adresu URL.`;\n        /* </i18n> */\n    },\n};\n\nvar cs = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$E,\n    validation: validation$E\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$D = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tilføj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjern',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjern alle',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Alle felter er ikke korrekt udfyldt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Send',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen filer valgt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flyt op',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flyt ned',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Indlæser...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Indlæs mere',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Næste',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Forrige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tilføj alle værdier',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Tilføj valgte værdier',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fjern alle værdier',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fjern valgte værdier',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Vælg dato',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Skift dato',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Den valgte dato er ugyldig.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Luk',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$D = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepter venligst ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være senere end ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være i fremtiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan kun indeholde bogstaver og mellemrum.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} skal indeholde alfabetiske tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} skal indeholde bogstaver eller tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} skal indeholde bogstaver eller mellemrum.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} skal indeholde symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} skal indeholde store bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} skal indeholde små bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} skal indeholde tal.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} skal være et symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kan kun indeholde store bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kan kun indeholde små bogstaver.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} skal være før ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} skal være før i dag.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} skal være mellem ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matcher ikke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ikke gyldig, brug venligst formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Indtast venligst en gyldig email-adresse.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} skal være på mindst ét tegn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} skal være på højst ${max} tegn.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} skal være ${max} tegn lange.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} skal være på mindst ${min} tegn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} skal være på mindst ${min} og højst ${max} tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ikke en gyldig værdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan ikke have flere end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindre eller lig med ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ingen filformater tilladt.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} skal være af filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan ikke have mindre end ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} skal være mindst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ikke en tilladt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} skal være et tal.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} er påkrævet.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er påkrævet.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Indtast en gyldig URL.`;\n        /* </i18n> */\n    },\n};\n\nvar da = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$D,\n    validation: validation$D\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$C = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Hinzufügen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Entfernen',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Alles entfernen',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Senden',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Keine Datei ausgewählt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Gehe nach oben',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Gehen Sie nach unten',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Wird geladen...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Mehr laden',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Weiter',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Voriges',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Alle Werte hinzufügen',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Ausgewählte Werte hinzufügen',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Alle Werte entfernen',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ausgewählte Werte entfernen',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Datum wählen',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Datum ändern',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Das gewählte Datum ist ungültig.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Schliessen',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$C = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Bitte ${name} akzeptieren.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} muss nach dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Zukunft liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} darf nur Buchstaben und Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} muss alphabetische Zeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} muss Buchstaben oder Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} muss Buchstaben oder Leerzeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} muss ein Symbol enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} muss Großbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} muss Kleinbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} muss Zahlen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} muss ein Symbol sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kann nur Großbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kann nur Kleinbuchstaben enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} muss vor dem ${date(args[0])} liegen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} muss in der Vergangenheit liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} muss zwischen ${args[0]} und ${args[1]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} stimmt nicht überein.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ist kein gültiges Datum im Format ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} muss zwischen ${date(args[0])} und ${date(args[1])} liegen.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'E-Mail Adresse ist ungültig.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} endet nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} muss mindestens ein Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} darf maximal ${max} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} sollte ${max} Zeichen lang sein.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} muss mindestens ${min} Zeichen enthalten.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Darf maximal ${args[0]} ${name} haben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} darf maximal ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Keine Dateiformate konfiguriert.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} muss vom Typ ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mindestens ${args[0]} ${name} erforderlich.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} muss mindestens ${args[0]} sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ist kein gültiger Wert für ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} muss eine Zahl sein.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' oder ')} ist erforderlich.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} ist erforderlich.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} beginnt nicht mit ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Bitte geben Sie eine gültige URL ein.`;\n        /* </i18n> */\n    },\n};\n\nvar de = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$C,\n    validation: validation$C\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$B = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Προσθήκη',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Αφαίρεση',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Αφαίρεση όλων',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Λυπούμαστε, υπάρχουν πεδία που δεν έχουν συμπληρωθεί σωστά.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Υποβολή',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Κανένα αρχείο δεν έχει επιλεγεί',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Προς τα επάνω',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Προς τα κάτω',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Φορτώνει...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Φόρτωση περισσότερων',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Επόμενη',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Προηγούμενο',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Προσθήκη όλων των τιμών',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Προσθήκη επιλεγμένων τιμών',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Κατάργηση όλων των τιμών',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Αφαίρεση επιλεγμένων τιμών',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Επιλέξτε ημερομηνία',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Αλλαγή ημερομηνίας',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Η επιλεγμένη ημερομηνία δεν είναι έγκυρη.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Κλείσιμο',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$B = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Παρακαλώ αποδεχτείτε το ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι μετά της ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι στο μέλλον.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο αλφαβητικούς χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και κενά.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει αλφαβητικούς χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει γράμματα ή αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} πρέπει να περιέχει γράμματα ή κενά.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει το σύμβολο.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει κεφαλαία γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει πεζά γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `Το ${sentence(name)} πρέπει να περιέχει αριθμούς.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `Το ${sentence(name)} πρέπει να είναι ένα σύμβολο.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `Το ${sentence(name)} μπορεί να περιέχει μόνο κεφαλαία γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `Το ${sentence(name)} μπορεί να περιέχει μόνο πεζά γράμματα.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι πριν της ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι στο παρελθόν.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${a} και ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} δεν ταιριάζει.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} δεν είναι έγυρη ημερομηνία, παρακαλώ ακολουθήστε την διαμόρφωση ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${date(args[0])} και ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Παρακαλώ πληκτρολογήστε μια έγκυρη email διεύθυνση. ',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} δεν καταλήγει με ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} πρέπει να είναι τουλάχιστον ενός χαρακτήρα.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι λιγότεροι ή ίσοι με ${max} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Το ${sentence(name)} θα πρέπει να έχει μήκος ${max} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} πρέπει να είναι περισσότεροι ή ίσοι με ${min} χαρακτήρες.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${min} και ${max} χαρακτήρες.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Δεν μπορεί να έχει παραπάνω από ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει αν είναι λιγότερο ή ίσο με το ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Δεν επιτρέπονται αρχεία.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι τύπου: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Δεν μπορεί να είναι λιγότερο από ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} πρέπει να είναι τουλάχιστον ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” δεν είναι μια επιτρεπτή ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} πρέπει να είναι αριθμός.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ή ')} απαιτείται.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} είναι υποχρεωτικό.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} δεν αρχίζει με ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Παρακαλώ εισάγετε ένα έγκυρο URL.`;\n        /* </i18n> */\n    },\n};\n\nvar el = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$B,\n    validation: validation$B\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$A = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Add',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remove',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Remove all',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, not all fields are filled out correctly.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Submit',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'No file chosen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Move up',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Move down',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Loading...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Load more',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Next',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Previous',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Add all values',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Add selected values',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Remove all values',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Remove selected values',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Choose date',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Change date',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'The selected date is invalid.',\n    /**\n     * Shown above error summaries when someone attempts to submit a form with\n     * errors and the developer has implemented `<FormKitSummary />`.\n     */\n    summaryHeader: 'There were errors in your form.',\n    /*\n     * Shown when there is something to close\n     */\n    close: 'Close',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$A = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Please accept the ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} must be after ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the future.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} can only contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} can only contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} can only contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters or numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters or spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain a symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain an uppercase letter.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain a lowercase letter.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} must be a symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase letters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase letters.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} must be before ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} must be in the past.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `This field was configured incorrectly and can’t be submitted.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} must be between ${a} and ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} does not match.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is not a valid date, please use the format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'This field was configured incorrectly and can’t be submitted';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} must be between ${date(args[0])} and ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Please enter a valid email address.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t end with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} must be at least one character.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} must be less than or equal to ${max} characters.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} should be ${max} characters long.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} must be greater than or equal to ${min} characters.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} must be between ${min} and ${max} characters.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is not an allowed value.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Cannot have more than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} must be less than or equal to ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No file formats allowed.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} must be of the type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Cannot have fewer than ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Must be at least ${args[0]} ${name} .`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” is not an allowed ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} must be a number.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' or ')} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} doesn’t start with ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Please enter a valid URL.`;\n        /* </i18n> */\n    },\n};\n\nvar en = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$A,\n    validation: validation$A\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$z = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Añadir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Quitar',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Quitar todos',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Discúlpe, los campos no fueron completados correctamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Archivo no seleccionado',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Moverse hacia arriba',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Moverse hacia abajo',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Cargando...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Cargar más',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Próximo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Añadir todos los valores',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Añadir valores seleccionados',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminar todos los valores',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Eliminar los valores seleccionados',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Elige fecha',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Cambiar fecha',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La fecha seleccionada no es válida.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Cerrar',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$z = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Acepte el ${name} por favor.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser posterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha futura.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} debe contener solo caractéres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} debe ser alfanumérico.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} espacios alfa solo pueden contener letras y espacios.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} debe contener caracteres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} debe contener letras o números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} debe contener letras o espacios.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} debe contener un símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} debe estar en mayúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} debe contener minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} debe contener números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} debe ser un símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} solo puede contener letras mayúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} solo puede contener letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} debe ser anterior a ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} debe ser una fecha pasada.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `El campo no fue completado correctamente y no puede ser enviado.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} debe estar entre ${a} y ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} no coincide.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} no es una fecha válida, por favor utilice el formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'El campo no fue completado correctamente y no puede ser enviado.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Ingrese una dirección de correo electrónico válida por favor.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} no termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} debe tener al menos una letra.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como máximo ${max} caractéres.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} debe tener ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} debe tener como mínimo ${min} caractéres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} debe tener entre ${min} y ${max} caractéres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} no es un valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `No puede tener más de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser menor o igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'No existen formatos de archivos permitidos.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} debe ser del tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `No puede tener menos de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} debe ser de al menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” no es un valor permitido de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} debe ser un número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} se requiere estar.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} es requerido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} debe comenzar con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Introduce una URL válida.`;\n        /* </i18n> */\n    },\n};\n\nvar es = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$z,\n    validation: validation$z\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$y = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'افزودن',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'حذف',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'همه را حذف کنید',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ثبت',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'هیچ فایلی انتخاب نشده است',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'حرکت به بالا',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'حرکت به پایین',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'در حال بارگذاری...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'بارگذاری بیشتر',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'بعدی',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'قبلی',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'تمام مقادیر را اضافه کنید',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'مقادیر انتخاب شده را اضافه کنید',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'تمام مقادیر را حذف کنید',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'حذف مقادیر انتخاب شده',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'تاریخ را انتخاب کنید',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'تغییر تاریخ',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'تاریخ انتخاب شده نامعتبر است',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'بستن',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$y = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `لطفاً ${name} را بپذیرید.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} باید بعد از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به آینده باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف الفبا باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} فقط میتواند شامل حروف و اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} فقط می تواند شامل حروف و فاصله باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} باید حاوی حروف الفبا باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} باید حاوی حروف یا اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} باید حاوی حروف یا فاصله باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} باید حاوی نماد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} باید دارای حروف بزرگ باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} باید حاوی حروف کوچک باشد.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} باید حاوی اعداد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} باید یک نماد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} تنها می‌تواند شامل حروف بزرگ باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} تنها می‌تواند شامل حروف کوچک باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} باید قبل از تاریخ ${date(args[0])} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} باید مربوط به گذشته باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} باید بین ${args[0]} و ${args[1]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} مطابقت ندارد.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} تاریخ معتبری نیست، لطفاً از قالب ${args[0]} استفاده کنید\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'لطفا آدرس ایمیل معتبر وارد کنید.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید به ${list(args)} ختم شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} باید حداقل یک کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} باید ${max} کاراکتر طولانی باشد.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} باید بین ${min} و ${max} کاراکتر باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} نمی تواند بیش از ${args[0]} باشد.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} باید کمتر یا برابر با ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'فرمت فایل مجاز نیست.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} باید از این نوع باشد: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} نمی تواند کمتر از ${args[0]} باشد.\n`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} باید حداقل ${args[0]} باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" یک ${name} مجاز نیست.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} باید عدد باشد.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' یا ')} مورد نیاز است.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `پر کردن ${sentence(name)} اجباری است.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} باید با ${list(args)} شروع شود.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `لطفا یک URL معتبر وارد کنید.`;\n        /* </i18n> */\n    },\n};\n\nvar fa = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$y,\n    validation: validation$y\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$x = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Lisää',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Poista',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Poista kaikki',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Tallenna',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ei valittuja tiedostoja',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Siirrä ylös',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Siirrä alas',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ladataan...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Lataa lisää',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Seuraava',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Edellinen',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Lisää kaikki arvot',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Lisää valitut arvot',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Poista kaikki arvot',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Poista valitut arvot',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Valitse päivämäärä',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Vaihda päivämäärä',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Valittu päivämäärä on virheellinen.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Sulje',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$x = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Ole hyvä ja hyväksy ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ${date(args[0])} jälkeen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava tulevaisuudessa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} saa sisältää vain kirjaimia ja numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} on sisällettävä aakkoselliset merkit.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} täytyy sisältää kirjaimia tai numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} täytyy sisältää kirjaimia tai välilyöntejä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} täytyy sisältää symboli.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} täytyy sisältää isoja kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} täytyy sisältää pieniä kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} täytyy sisältää numeroita.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} on oltava symboli.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} voi sisältää vain isoja kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} voi sisältää vain pieniä kirjaimia.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} tulee olla ennen: ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} on oltava menneisyydessä.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} on oltava välillä ${a} - ${b} `;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ei täsmää.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Syötä validi sähköpostiosoite.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tulee päättyä ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ei ole sallittu vaihtoehto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} on oltava vähintään yksi merkki.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} on oltava ${max} tai alle merkkiä.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} pitäisi olla ${max} merkkiä pitkä.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} on oltava vähintään ${min} merkkiä.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ei ole sallittu arvo.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} on oltava ${args[0]} tai alle.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tiedostoja ei sallita.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]}-tiedostotyyppiä.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} tulee olla ${args[0]} tai suurempi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ei ole sallittu ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Kentän ${sentence(name)} tulee olla numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' tai ')} vaaditaan.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} vaaditaan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} on alettava ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Anna kelvollinen URL-osoite.`;\n        /* </i18n> */\n    },\n};\n\nvar fi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$x,\n    validation: validation$x\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$w = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ajouter',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Supprimer',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Enlever tout',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Valider',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Aucun fichier choisi',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Déplacez-vous',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Déplacez-vous',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Chargement...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Chargez plus',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Suivant',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Précédent',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Ajouter toutes les valeurs',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Ajouter les valeurs sélectionnées',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Supprimer toutes les valeurs',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Supprimer les valeurs sélectionnées',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Choisissez la date',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Modifier la date',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: `La date sélectionnée n'est pas valide.`,\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Fermer',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$w = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Veuillez accepter le ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être postérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le futur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} ne peut contenir que des caractères alphabétiques.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} ne peut contenir que des lettres et des chiffres.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ne peuvent contenir que des lettres et des espaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} doit contenir des caractères alphabétiques.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} doit contenir au moins un lettre ou nombre.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} doit contenir des lettres ou des espaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} doit contenir un symbole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} doit contenir au moins une majuscule.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} doit contenir au moins une minuscule.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} doit contenir des chiffres.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} doit être un symbole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ne peuvent contenir que des majuscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ne peut contenir que des lettres minuscules.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} doit être antérieure au ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} doit être dans le passé.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} doit être comprise entre ${a} et ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne correspond pas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} n'est pas une date valide, veuillez utiliser le format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} doit être comprise entre ${date(args[0])} et ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Veuillez saisir une adresse email valide.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne se termine pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} doit comporter au moins un caractère.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} doit être inférieur ou égal à ${max} caractères.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} doit contenir ${max} caractères.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} doit être supérieur ou égal à ${min} caractères.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} doit être comprise entre ${min} et ${max} caractères.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne peut pas avoir plus de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être inférieur ou égal à ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Aucun format de fichier n’est autorisé';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} doit être du type: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne peut pas avoir moins de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} doit être au moins de ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” n'est pas un ${name} autorisé.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} doit être un nombre.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ou ')} est requis.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} est requis.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne commence pas par ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Entrez une URL valide.`;\n        /* </i18n> */\n    },\n};\n\nvar fr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$w,\n    validation: validation$w\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$v = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Foeg ta',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ferwider',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ferwider alles',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Ferstjoere',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Gjin bestân keazen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Gean omheech',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Nei ûnderen',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Lade…',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Mear lade',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Folgende',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Foarige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Foegje alle wearden ta',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Foegje selektearre wearden ta',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fuortsmite alle wearden',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fuortsmite selektearre wearden',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Kies datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Feroarje datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'De selektearre datum is ûnjildich.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$v = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Akseptearje de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moat nei ${date(args[0])} wêze.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn de takomst lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mei allinne alfabetyske tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mei allinne letters en sifers befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mei allinne letters en spaasjes befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moat foar ${date(args[0])} falle.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moat yn it ferline wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moat tusken ${a} en ${b} lizze.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt net oerien.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Folje in jildich e-mailadres yn.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} einiget net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moat minimaal ien teken wêze.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} moat ${max} tekens lang wêze.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moat tusken de ${min} en ${max} tekens befetsje.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is gjin tastiene wearde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mei net mear as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Gjin bestânsnotaasjes tastien.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moat fan it type: ${args[0]} wêze`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mei net minder as ${args[0]} ${name} hawwe.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moat minimaal ${args[0]} wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is gjin tastiene ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moat in getal wêze.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' of ')} is ferplichte.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is ferplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begjint net mei ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Doch der in jildige url by.`;\n        /* </i18n> */\n    },\n};\n\nvar fy = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$v,\n    validation: validation$v\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$u = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'הוסף',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'מחק',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'מחק הכל',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'שים לב, לא כל השדות מלאים כראוי.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'שלח',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'לא נבחר קובץ..',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'הזז למעלה',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'הזז למטה',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'טוען...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'טען יותר',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'הבא',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'הקודם',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'הוסף את כל הערכים',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'הוספת ערכים נבחרים',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'הסר את כל הערכים',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'הסר ערכים נבחרים',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'בחר תאריך',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'שינוי תאריך',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'התאריך שנבחר אינו חוקי.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'סגור',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$u = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `אנא אשר את ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות אחרי ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעתיד.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות אלפבת.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} יכול להכיל רק מספרים ואותיות.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} יכול להכיל רק אותיות ורווחים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} חייב להכיל תווים אלפביתיים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות או מספרים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות או רווחים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} חייב להכיל סמל.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות רישיות.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} חייב להכיל אותיות קטנות.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} חייב להכיל מספרים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} חייב להיות סמל.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} יכול להכיל אותיות רישיות בלבד.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} יכול להכיל רק אותיות קטנות.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות לפני ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בעבר`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} חייב להיות בין ${a} ו- ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} לא מתאים.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'אנא הקלד אימייל תקין.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מסתיים ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} הוא לא ערך מורשה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} חייב להיות לפחות תו אחד.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות פחות או שווה ל- ${max} תווים.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} צריך להיות ${max} תווים ארוכים.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} חייב להיות גדול או שווה ל- ${min} תווים.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות בין ${min} ו- ${max} תווים.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} הוא לא ערך תקין.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות פחות או שווה ל- ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'פורמט הקובץ לא מורשה.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות מסוג: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} חייב להיות לפחות ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” לא מתאים ל- ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} חייב להיות מספר.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' או ')} נדרש.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} הינו חובה.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} לא מתחיל ב- ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `הזן כתובת URL חוקית.`;\n        /* </i18n> */\n    },\n};\n\nvar he = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$u,\n    validation: validation$u\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$t = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Predaj',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pomaknite se gore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pomakni se dolje',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Učitavanje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Učitaj više',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sljedeći',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'prijašnji',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte sve vrijednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodavanje odabranih vrijednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ukloni sve vrijednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ukloni odabrane vrijednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Odaberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Promijeni datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Odabrani datum je nevažeći.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zatvoriti',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$t = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Potrebno je potvrditi ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti u periodu poslije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati samo slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mogu sadržavati samo slova i razmake..`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora sadržavati abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora sadržavati slova ili razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora sadržavati simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora sadržavati velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora sadržavati mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora sadržavati brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} može sadržavati samo mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti prije ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Format sadržaja nije ispravan i ne može biti predan.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${args[0]} i ${args[1]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ne odgovara zadanoj vrijednosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije ispravan format datuma. Molimo koristite sljedeći format: ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje nije ispravno postavljeno i ne može biti predano.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti vrijednost između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Molimo upišite ispravnu email adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne završava s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dopuštena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora sadržavati barem jedan znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora imati ${max} ili manje znakova.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} trebao bi biti dugačak ${max} znakova.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora imati barem ${min} znakova.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Broj znakova za polje ${sentence(name)} mora biti između ${min} i ${max}.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne smije imati više od ${args[0]} ${name} polja.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format datoteke nije dozvoljen.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Format datoteke na polju ${sentence(name)} mora odgovarati: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti barem ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljena vrijednost na polju ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ili ')} je potreban.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Unesite valjanu URL adresu.`;\n        /* </i18n> */\n    },\n};\n\nvar hr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$t,\n    validation: validation$t\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$s = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Hozzáadás',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Eltávolítás',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Összes eltávolítása',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sajnáljuk, nem minden mező lett helyesen kitöltve.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Beküldés',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nincs fájl kiválasztva',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mozgás felfelé',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mozgás lefelé',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Betöltés...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Töltsön be többet',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Következő',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Előző',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adja hozzá az összes értéket',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Kiválasztott értékek hozzáadása',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Távolítsa el az összes értéket',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'A kiválasztott értékek eltávolítása',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Válassza ki a dátumot',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Dátum módosítása',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'A kiválasztott dátum érvénytelen.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Bezárás',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$s = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Fogadja el a ${name} mezőt.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek ${date(args[0])} után kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek a jövőben kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} csak alfanumerikus karaktereket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} csak betűket és számokat tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} csak betűket és szóközöket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `A ${sentence(name)} betűrendes karaktereket kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `A ${sentence(name)} betűket vagy számokat kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `A ${sentence(name)} betűket vagy szóközöket kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `A ${sentence(name)} szimbólumot kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `A ${sentence(name)} nagybetűt kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `A ${sentence(name)} kisbetűt kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `A ${sentence(name)} számot kell tartalmaznia.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `A ${sentence(name)} szimbólumnak kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `A ${sentence(name)} csak nagybetűket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `A ${sentence(name)} csak kisbetűket tartalmazhat.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek ${date(args[0])} előtt kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek a múltban kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `A ${sentence(name)} mezőnek ${a} és ${b} között kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nem egyezik.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nem érvényes dátum, ${args[0]} formátumot használj`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mezőnek ${date(args[0])} és ${args[1]} között kell lennie`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Kérjük, érvényes email címet adjon meg.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} mező nem a kijelölt (${list(args)}) módon ér véget.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nem engedélyezett érték.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mezőnek legalább egy karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek maximum ${max} karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} karakter hosszúnak kell lennie.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mezőnek minimum ${min} karakteresnek kell lennie.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mezőnek ${min} és ${max} karakter között kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nem engedélyezett érték.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nem lehet több mint ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} nem lehet nagyobb, mint ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nincsenek támogatott fájlformátumok.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}-nak/nek a következőnek kell lennie: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nem lehet kevesebb, mint ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}-nak/nek minimum ${args[0]}-nak/nek kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" nem engedélyezett ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mezőnek számnak kell lennie.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' vagy ')} szükséges.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} mező kötelező.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nem a következővel kezdődik: ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Kérjük, adjon meg egy érvényes URL-t.`;\n        /* </i18n> */\n    },\n};\n\nvar hu = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$s,\n    validation: validation$s\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$r = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Tambah',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Hapus',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hapus semua',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Kirim',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Tidak ada file yang dipilih',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pindah ke atas',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pindah ke bawah',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Memuat...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Muat lebih',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Berikutnya',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Sebelumnya',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tambahkan semua nilai',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Tambahkan nilai yang dipilih',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Hapus semua nilai',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Hapus nilai yang dipilih',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Pilih tanggal',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Ubah tanggal',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Tanggal yang dipilih tidak valid.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Tutup',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$r = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Tolong terima kolom ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus lebih dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu di masa depan.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf alfabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} hanya bisa diisi huruf dan angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} hanya boleh berisi huruf dan spasi..`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} harus berisi karakter abjad.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harus mengandung huruf atau angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harus berisi huruf atau spasi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} harus berisi simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} harus berisi huruf besar.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} harus berisi huruf kecil.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} harus berisi angka.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} harus berupa simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} hanya dapat berisi huruf besar.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} hanya dapat berisi huruf kecil.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} nilainya harus kurang dari waktu ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} harus berisi waktu yang sudah lampau.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} harus bernilai diantara ${a} dan ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nilainya tidak cocok.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} waktu tidak cocok, mohon gunakan format waktu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Tolong tulis alamat email yang benar.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nilainya tidak berakhiran dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} adalah nilai yang tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} nilainya setidaknya berisi satu karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} harus ${max} karakter panjang.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nilainya tidak diizinkan.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} harus lebih kecil atau sama dengan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Format file tidak diizinkan';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} hanya bisa bertipe: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Tidak boleh kurang dari ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} setidaknya harus berisi ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} harus berupa angka.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' atau ')} diperlukan`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} harus diisi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} tidak dimulai dengan ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Harap masukkan URL yang valid.`;\n        /* </i18n> */\n    },\n};\n\nvar id = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$r,\n    validation: validation$r\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$q = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Bæta við',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjarlægja',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjarlægja allt',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Því miður, það er ekki búið að fylla rétt inn í alla reiti.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Senda',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Engin skrá valin',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Færa upp',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Færa niður',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Hleðsla...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Sækja meira',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Áfram',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Til baka',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Bæta við öllum gildum',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Bæta við völdum gildum',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fjarlægja öll gildi',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fjarlægja valin gildi',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Velja dagsetningu',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Breyta dagsetningu',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Valin dagsetning er ógild',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Loka',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$q = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Vinsamlegast samþykktu ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} þarf að vera eftir ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} þarf að vera í framtíðinni.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} má einungis innihalda bókstafi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} má einungis innihalda bókstafi og tölur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} má einungis innihalda bókstafi og bil.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} verður að innihalda bókstafi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} verður að innihalda bókstafi eða tölur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} verður að innihalda bókstafi eða bil.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} verður að innihalda tákn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} verður að innihalda hástaf.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} verður að innihalda lágstaf.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} verður að innihalda tölur.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} verður að vera tákn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} má einungis innihalda hástafi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} má einungis innihalda lágstafi.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} þarf að vera á undan ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} þarf að vera liðin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Þessi reitur var ekki rétt stilltur.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} þarf að vera á milli ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} passar ekki.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ekki gild dagsetning, vinsamlegast hafið dagsetninguna í formi ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Þessi reitur var ekki rétt stilltur';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} þarf að vera á milli ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vinsamlegast sláðu inn gilt netfang.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} endar ekki á ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ekki leyfilegt gildi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} þarf að vera að minnsta kosti einn stafur.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} þarf að vera færri en eða nákvæmlega ${max} stafir.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} þarf að vera ${max} stafir að lengd.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} þarf að vera fleiri en eða nákvæmlega ${min} stafir.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} þarf að vera á milli ${min} og ${max} stafir.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ekki leyfilegt gildi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ekki hægt að hafa fleiri en ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} þarf að vera minna en eða nákvæmlega ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ekki leyfileg tegund skráar.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} þarf að vera af tegundinni: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ekki hægt að hafa færri en ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Þarf að vera að minnsta kosti ${args[0]} ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ekki leyfilegt fyrir ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} þarf að vera tala.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' or ')} is required.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er skilyrt.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} byrjar ekki á ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vinsamlegast sláðu inn gilda slóð.`;\n        /* </i18n> */\n    },\n};\n\nvar is = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$q,\n    validation: validation$q\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$p = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Inserisci',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Rimuovi',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Rimuovi tutti',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Invia',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nessun file selezionato',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Sposta in alto',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Sposta giù',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Caricamento...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carica altro',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Prossimo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Precedente',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Aggiungi tutti i valori',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Aggiungi valori selezionati',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Rimuovi tutti i valori',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Rimuovi i valori selezionati',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Scegli la data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Cambia data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'La data selezionata non è valida.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Chiudi',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$p = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Si prega di accettare ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere successiva ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `la data ${sentence(name)} deve essere nel futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} può contenere solo caratteri alfanumerici.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} può contenere solo lettere e spazi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} deve contenere caratteri alfabetici.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} deve contenere lettere o numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} deve contenere lettere o spazi.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve contenere un simbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} deve contenere lettere minuscole.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} deve contenere numeri.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve essere un simbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} può contenere solo lettere maiuscole.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} può contenere solo lettere minuscole.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `la data ${sentence(name)} deve essere antecedente ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} deve essere nel passato.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Questo campo è stato configurato male e non può essere inviato.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} deve essere tra ${a} e ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} non corrisponde.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} non è una data valida, per favore usa il formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Questo campo è stato configurato in modo errato e non può essere inviato.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Per favore inserire un indirizzo email valido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non termina con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} deve contenere almeno un carattere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} deve essere minore o uguale a ${max} caratteri.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} deve contenere ${max} caratteri.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} deve essere maggiore o uguale a ${min} caratteri.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} deve essere tra ${min} e ${max} caratteri.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} non è un valore consentito.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Non può avere più di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere minore o uguale a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Formato file non consentito.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} deve essere di tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Non può avere meno di ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} deve essere almeno ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" non è un ${name} consentito.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} deve essere un numero.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' o ')} è richiesto.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} è richiesto.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} non inizia con ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Inserisci un URL valido.`;\n        /* </i18n> */\n    },\n};\n\nvar it = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$p,\n    validation: validation$p\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$o = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '追加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '削除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '全て削除',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '項目が正しく入力されていません。',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '送信',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ファイルが選択されていません',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上に移動',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下へ移動',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '読み込み中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'さらに読み込む',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '[次へ]',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '前へ',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'すべての値を追加',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '選択した値を追加',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'すべての値を削除',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '選択した値を削除',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '日付を選択',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '日付を変更',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '選択した日付は無効です。',\n    /**\n     * Shown when there is something to close\n     */\n    close: '閉じる',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$o = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name}の同意が必要です。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より後の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は将来の日付でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}には英字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}には、文字と数字のみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}には、文字とスペースのみを含めることができます。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} にはアルファベット文字が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} には文字または数字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} には文字またはスペースを含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} には記号が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} には大文字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} には小文字を含める必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} には数字が含まれている必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} はシンボルでなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} には大文字しか使用できません`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} には小文字しか使用できません。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}は${date(args[0])}より前の日付である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}は過去の日付である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `このフィールドは正しく構成されていないため、送信できません。`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}は${a}と${b}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}が一致しません。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}は有効な日付ではありません。${args[0]}の形式を使用してください。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'このフィールドは正しく構成されておらず、送信できません。';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}は${date(args[0])}と${date(args[1])}の間にある必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '有効なメールアドレスを入力してください。',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で終わっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}は少なくとも1文字である必要があります。`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}は${max}文字以下である必要があります。`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} の長さは ${max} 文字でなければなりません。`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}は${min}文字以上である必要があります。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}は${min}から${max}文字の間でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}は許可された値ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}は${args[0]}を超えることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}以下である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ファイル形式は許可されていません。';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}は${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}は${args[0]}未満にすることはできません。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}は少なくとも${args[0]}である必要があります。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}”は許可された${name}ではありません。`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}は数値でなければなりません。`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('または')}${labels}が必要です。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}は必須です。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}は${list(args)}で始まっていません。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `有効な URL を入力してください。`;\n        /* </i18n> */\n    },\n};\n\nvar ja = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$o,\n    validation: validation$o\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$n = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'қосу',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Жою',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Барлығын жою',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Кешіріңіз, барлық өрістер дұрыс толтырылмаған.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Жіберу',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ешбір файл таңдалмады',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Жоғары жылжу',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Төмен жылжытыңыз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Жүктеу...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Көбірек жүктеңіз',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Келесі',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Алдыңғы',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Барлық мәндерді қосыңыз',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Таңдалған мәндерді қосыңыз',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Барлық мәндерді алып тастаңыз',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Таңдалған мәндерді алып тастаңыз',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Күнді таңдаңыз',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Өзгерту күні',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Таңдалған күн жарамсыз.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Жабу',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$n = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `қабылдаңыз ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} кейін болуы керек ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} болашақта болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} тек алфавиттік таңбаларды қамтуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} тек әріптер мен сандардан тұруы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} тек әріптер мен бос орындар болуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} алфавиттік таңбалардан тұруы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} құрамында әріптер немесе сандар болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} құрамында әріптер немесе бос орындар болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} символы болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} құрамында бас әріптер болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} кіші әріп болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} сандардан тұруы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} символы болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} тек бас әріптерден тұруы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} құрамында тек кіші әріптер болуы мүмкін.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} бұрын болуы керек ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} өткенде болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} арасында болуы керек ${a} және ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} сәйкес келмейді.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} жарамды күн емес, пішімді пайдаланыңыз ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} арасында болуы керек ${date(args[0])} және ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Өтінеміз қолданыстағы электронды пошта адресін енгізіңіз.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} -мен бітпейді ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} рұқсат етілген мән емес.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} кем дегенде бір таңба болуы керек.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} кем немесе тең болуы керек ${max} кейіпкерлер.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} таңбалары болуы керек.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} артық немесе тең болуы керек ${min} кейіпкерлер.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} арасында болуы керек ${min} және ${max} кейіпкерлер.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} рұқсат етілген мән емес.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `артық болуы мүмкін емес ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} кем немесе тең болуы керек ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Файл пішімдері рұқсат етілмейді.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} типте болуы керек: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `кем болуы мүмкін емес ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} кем дегенде болуы керек ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” рұқсат етілмейді ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} сан болуы керек.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' не ')} қажет.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} талап етіледі.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} -ден басталмайды ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Жарамды URL мекенжайын енгізіңіз.`;\n        /* </i18n> */\n    },\n};\n\nvar kk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$n,\n    validation: validation$n\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$m = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: '추가',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '제거',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '모두 제거',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '모든 값을 채워주세요',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '제출하기',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '선택된 파일이 없습니다',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '위로 이동',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '아래로 이동',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '로드 중...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '더 불러오기',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '다음',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '이전',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '모든 값 추가',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '선택한 값 추가',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '모든 값 제거',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '선택한 값 제거',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '날짜 선택',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '날짜 변경',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '선택한 날짜가 잘못되었습니다.',\n    /**\n     * Shown when there is something to close\n     */\n    close: '닫기',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$m = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} 올바른 값을 선택 해주세요`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이후여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 미래의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} 알파벳 문자만 포함할 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} 문자와 숫자만 포함될 수 있습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 문자와 공백만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} 에는 알파벳 문자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} 에는 문자나 숫자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 에는 문자나 공백이 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} 에는 기호를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 는 대문자를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 는 소문자를 포함해야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} 에는 숫자가 포함되어야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} 는 기호여야 합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 는 대문자만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 는 소문자만 포함할 수 있습니다.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} 이전여야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 과거의 날짜여야합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `잘못된 구성으로 제출할 수 없습니다`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a}와 ${b} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} 일치하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} 유효한 날짜가 아닙니다. ${args[0]}과 같은 형식을 사용해주세요`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '잘못된 구성으로 제출할 수 없습니다';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '올바른 이메일 주소를 입력해주세요',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 끝나지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} 하나 이상의 문자여야 합니다`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}자 이하여야 합니다`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} 는 ${max} 자 길이여야 합니다.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} 문자보다 크거나 같아야 합니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min}에서 ${max}자 사이여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name} 초과할 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]}보다 작거나 같아야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '파일 형식이 허용되지 않습니다';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 유형이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name}보다 작을 수 없습니다`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} 이상이어야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `${value}\" 허용되지 않는 ${name}입니다`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} 숫자여야 합니다`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' 또는 ')}가 필요합니다.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} 필수 값입니다`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)}로 시작하지 않습니다`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `유효한 URL을 입력하십시오.`;\n        /* </i18n> */\n    },\n};\n\nvar ko = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$m,\n    validation: validation$m\n});\n\n/**\n * By the given quantity it returns singular or plural with the correct suffix in Lithuanian\n */\nfunction getByQuantity(quantity, vienetas, vienetai, vienetu) {\n    const lastTwoDigits = quantity.toString().slice(-2);\n    const parsedQuantity = parseInt(lastTwoDigits);\n    if ((parsedQuantity > 10 && parsedQuantity < 20) ||\n        parsedQuantity % 10 === 0) {\n        return vienetu;\n    }\n    if (parsedQuantity === 1 || parsedQuantity % 10 === 1) {\n        return vienetas;\n    }\n    return vienetai;\n}\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$l = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Pridėti',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Pašalinti',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Pašalinti visus',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Atsiprašome, ne visi laukai užpildyti teisingai.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pateikti',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nepasirinktas joks failas',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Aukštyn',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Žemyn',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Kraunama...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Daugiau',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Kitas',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Ankstesnis',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Pridėti visas reikšmes',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Pridėti pasirinktas reikšmes',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Pašalinti visas reikšmes',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Pašalinti pasirinktas reikšmes',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Pasirinkti datą',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Pakeisti datą',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Pasirinkta data yra netinkama.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Uždaryti',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$l = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prašome priimti ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} turi būti po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} turi būti ateityje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} gali būti tik abėcėlės simboliai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} gali būti tik raidės ir skaičiai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} gali būti tik raidės ir tarpai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} turi būti abėcėlės simbolių.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} turi būti raidžių arba skaičių.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} turi būti raidžių arba tarpų.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} turi būti simbolių.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} turi būti didžioji raidė.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} turi būti mažoji raidė.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} turi būti skaičių.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} turi būti simbolis.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} turi būti tik didžiosios raidės.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} turi būti tik mažosios raidės.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} turi būti prieš ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} turi būti praeityje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Šis laukas buvo sukonfigūruotas neteisingai ir jo negalima pateikti.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} turi būti tarp ${a} ir ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nesutampa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nėra tinkama data, naudokite formatą ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Šis laukas buvo sukonfigūruotas neteisingai ir jo negalima pateikti';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} turi būti tarp ${date(args[0])} ir ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Įveskite teisingą el. pašto adresą.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nesibaigia su ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nėra leistina reikšmė.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} turi būti bent vienas simbolis.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} turi būti mažiau arba lygiai ${max} ${getByQuantity(max, 'simbolis', 'simboliai', 'simbolių')}.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} turi būti iš ${max} ${getByQuantity(max, 'simbolio', 'simbolių', 'simbolių')}.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} turi būti daugiau arba lygiai ${min} ${getByQuantity(min, 'simbolis', 'simboliai', 'simbolių')}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} turi būti tarp ${min} ir ${max} simbolių.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nėra leistina reikšmė.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Negali turėti daugiau nei ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} turi būti mažiau arba lygiai ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Neleidžiami jokie failų formatai.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} turi būti tokio tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Negali turėti mažiau nei ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Turi būti bent ${args[0]} ${name} .`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nėra leidžiamas ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} turi būti skaičius.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' arba ')} yra privaloma.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} yra privaloma.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} neprasideda su ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Įveskite teisingą URL.`;\n        /* </i18n> */\n    },\n};\n\nvar lt = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$l,\n    validation: validation$l\n});\n\n/**\nHere we can import additional helper functions to assist in formatting our\nlanguage. Feel free to add additional helper methods to libs/formats if it\nassists in creating good validation messages for your locale.\n*/\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$k = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Pievienot',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Noņemt',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Noņemt visus',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Piedodiet, visi lauki nav aizpildīti.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Iesniegt',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nav izvēlēts fails',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Uz augšu',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Uz leju',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ielādējas...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Ielādēt vēl',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Tālāk',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Atpakaļ',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Pievienot visas vērtības',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Pievienojiet izvēlēto vērtību',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Noņemt visas vērtības',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Noņemt izvēlētās vērtības',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Izvēlieties datumu',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Mainīt datumu',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Izvēlētais datums ir nepareizs.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Aizvērt',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$k = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Lūdzu apstipriniet ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${name} jābūt pēc ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${name} jābūt pēc šodienas datuma.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${name} var saturēt tikai alfabētiskās rakstzīmes.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${name} var saturēt tikai burtus un ciparus.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${name} var saturēt tikai burtus un atstarpes.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${name} jābūt pirms ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${name} jābūt pirms šodienas datuma.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Šis lauks tika aizpildīts nepareizi un nevar tikt iesniegts.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${name} jābūt starp ${a} un ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${name} nesakrīt.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${name} nav pareizs datums, lūdzu lietojiet formātu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Šis lauks tika aizpildīts nepareizi un nevar tikt iesniegts.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${name} jābūt starp ${date(args[0])} un ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Lūdzu ierakstiet pareizu e-pasta adresi.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${name} nebeidzas ar ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${name} nav atļauta vērtība.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${name} jābūt vismaz vienam simbolam.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${name} jābūt mazāk par vai ${max} simboliem.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${name} jābūt ${max} simbolu garumā.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${name} jābūt vismaz ${min} simboliem.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${name} jābūt starp ${min} un ${max} simboliem.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${name} nav atļauta vērtība.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nevar būt vairāk par ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${name} nevar būt mazāk par ${args[0]} vai ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Atļauti nenoteikti faila formāti.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} faila formāti var būt šādi: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nevar būt mazāk par ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Jābūt vismaz ${args[0]} ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nav atļauta vērtība iekš ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${name} jābūt ciparam.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${name} ir obligāti jāaizpilda`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${name} nesākas ar ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Lūdzu pievienojiet pareizu URL.`;\n        /* </i18n> */\n    },\n};\n\nvar lv = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$k,\n    validation: validation$k\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$j = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Нэмэх',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Хасах',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Бүгдийг хасах',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Уучлраарай, зарим нүдэн дахь өгөгдөл дутуу байна.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Илгээх',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл сонгоогүй байна',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Дээшээ',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Доошоо',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ачааллаж байна...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Нэмж ачааллах',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Дараагийн',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Өмнөх',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Бүх утгуудыг нэмэх',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Сонгогдсон утгуудыг нэмэх',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Бүх утгуудыг устгах',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Сонгогдсон утгуудыг хасах',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Огноо сонгох',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Огноо өөрчлөх',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Сонгосон огноо буруу байна.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Хаах',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$j = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} утгыг зөвшөөрнө үү.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} нь ${date(args[0])}-ны дараа орох ёстой.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} утга ирээдүйг заах ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} зөвхөн үсэг агуулах ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} зөвхөн үсэг болон тоог агуулах ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} зөвхөн үсэг болон зай агуулах ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} нь ${date(args[0])}-ны өмнө байх ёстой.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} өнгөрсөн огноо байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Энэ нүдэн дэхь өгөгдөл буруу учраас илгээх боломжгүй.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} нь заавал ${a}, ${b} хоёрын дунд байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} таарахгүй байна.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} нь хүчинтэй огноо биш тул ${args[0]} гэсэн огноог ашиглаарай.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Энэхүү нүд буруу тул цааш илгээх боломжгүй.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} нь заавал ${date(args[0])}, ${date(args[1])} хоёр огноон дунд байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Та хүчинтэй имейл хаягаа оруулна уу.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} нь ${list(args)} гэсэн утгаар төгсөөгүй байна.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} нь зөвшөөрөгдөх утга биш.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} дээр хаяж нэг үсэг байх ёстой`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}-н урт нь ${max}-ээс ихгүй байх ёстой.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} нь ${max} урт байвал зүгээр.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}-н урт нь ${min}-ээс их буюу тэнцүү байж болно.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}-н урт нь ${min}, ${max} хоёрын дунд байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} нь зөвшөөрөгдөх утга биш.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} нь ${args[0]}-аас их байж болохгүй.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} нь ${args[0]}-тай тэнцүү эсвэл бага байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Файлын формат буруу.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} төрөл нь ${args[0]} байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} нь ${args[0]}-аас их байж болохгүй.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${name} нь дор хаяж ${args[0]}-тай тэнцүү байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” бол зөвшөөрөгдөх ${name} гэсэн утга биш.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} зөвхөн тоо байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} байх ёстой.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} нь ${list(args)}-ээр эхлээгүй байна.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Хүчннтай URL оруулна уу.`;\n        /* </i18n> */\n    },\n};\n\nvar mn = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$j,\n    validation: validation$j\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$i = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Legg til',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Fjern',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Fjern alle',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Beklager, noen felter er ikke fylt ut korrekt.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Send inn',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen fil valgt',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flytt opp',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flytt ned',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Laster...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Last mer',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Neste',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Forrige',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Legg til alle verdier',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Legg til valgte verdier',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Fjern alle verdier',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Fjern valgte verdier',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Velg dato',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Endre dato',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Den valgte datoen er ugyldig.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$i = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Vennligst aksepter ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} må være senere enn ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} må være i fremtiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan bare inneholde alfabetiske tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan bare inneholde bokstaver og tall.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan bare inneholde bokstaver og mellomrom.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} må være tidligere enn ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} må være i fortiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dette feltet er feilkonfigurert og kan ikke innsendes.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} må være mellom ${a} og ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} stemmer ikke overens.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} er ikke en gyldig dato, vennligst bruk formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dette feltet er feilkonfigurert og kan ikke innsendes.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} må være mellom ${date(args[0])} og ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vennligst oppgi en gyldig epostadresse.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} er ikke en tillatt verdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} må ha minst ett tegn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} må ha mindre enn eller nøyaktig ${max} tegn.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} skal være ${max} tegn langt.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} må ha mer enn eller nøyaktig ${min} tegn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} må ha mellom ${min} og ${max} tegn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} er ikke en tillatt verdi.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan ikke ha mer enn ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} må være mindre enn eller nøyaktig ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ingen tillatte filformater.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} må være av typen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan ikke ha mindre enn ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} må være minst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” er ikke en tillatt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} må være et tall.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} er nødvendig.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} er påkrevd.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vennligst inkluder en gyldig url.`;\n        /* </i18n> */\n    },\n};\n\nvar nb = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$i,\n    validation: validation$i\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$h = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Toevoegen',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Verwijderen',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Alles verwijderen',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Versturen',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Geen bestand gekozen',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Naar boven gaan',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Naar beneden verplaatsen',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Aan het laden...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Meer laden',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Vervolgens',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Voorgaand',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Alle waarden toevoegen',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Geselecteerde waarden toevoegen',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Alle waarden verwijderen',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Geselecteerde waarden verwijderen',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Kies een datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Datum wijzigen',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'De geselecteerde datum is ongeldig.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Sluiten',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$h = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Accepteer de ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} moet na ${date(args[0])} zijn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in de toekomst liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} mag alleen alfabetische tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} mag alleen letters en cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mag alleen letters en spaties bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} moet alfabetische tekens bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} moet letters of cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} moet letters of spaties bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} moet een symbool bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} moet hoofdletters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} moet kleine letters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} moet cijfers bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} moet een symbool zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mag alleen hoofdletters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mag alleen kleine letters bevatten.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} moet vóór ${date(args[0])} vallen.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} moet in het verleden liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} moet tussen ${a} en ${b} liggen.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} komt niet overeen.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} is geen geldige datum, gebruik de notatie ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vul een geldig e-mailadres in.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} eindigt niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} moet minimaal één teken zijn.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mag maximaal ${max} tekens lang zijn.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} moet ${max} tekens lang zijn.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} moet minimaal ${min} tekens lang zijn.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} moet tussen de ${min} en ${max} tekens zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} is geen toegestane waarde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Mag niet meer dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Geen bestandsformaten toegestaan.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} moet van het type: ${args[0]} zijn`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Mag niet minder dan ${args[0]} ${name} hebben.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} moet minimaal ${args[0]} zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" is geen toegestane ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} moet een getal zijn.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' of ')} is vereist.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} is verplicht.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} begint niet met ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Voer een geldige URL in.`;\n        /* </i18n> */\n    },\n};\n\nvar nl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$h,\n    validation: validation$h\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$g = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Usuń',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Usuń wszystko',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Wyślij',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nie wybrano pliku',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Przesuń w górę',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Przesuń w dół',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Ładowanie...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Załaduj więcej',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Kolejny',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Poprzednia',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodaj wszystkie wartości',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodaj wybrane wartości',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Usuń wszystkie wartości',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Usuń wybrane wartości',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Wybierz datę',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Zmień datę',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Wybrana data jest nieprawidłowa.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zamknij',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$g = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Proszę zaakceptować ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przyszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfabetyczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfanumeryczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `Pole ${sentence(name)} mogą zawierać tylko litery i spacje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musi zawierać znaki alfabetyczne.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musi zawierać litery lub cyfry.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musi zawierać litery lub spacje.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musi zawierać symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musi zawierać wielkie litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musi zawierać małe litery.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musi zawierać liczby.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musi być symbolem.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} może zawierać tylko wielkie litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} może zawierać tylko małe litery.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musi być przed ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musi być w przeszłości.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Wartość pola ${sentence(name)} musi być pomiędzy ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nie pokrywa się.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Wartość pola ${sentence(name)} nie jest poprawną datą, proszę użyć formatu ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Data w polu ${sentence(name)} musi być pomiędzy ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Proszę wpisać poprawny adres email.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie kończy się na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Pole ${sentence(name)} nie jest dozwoloną wartością.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Pole ${sentence(name)} musi posiadać minimum jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${max} lub mniej znaków.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi zawierać ${min} lub więcej znaków.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Pole ${sentence(name)} musi mieć ${min} znaków.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Pole ${sentence(name)} musi mieć ${min}-${max} znaków.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Pole ${sentence(name)} zawiera niedozwolone znaki.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nie można mieć więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Wartość pola ${sentence(name)} musi być mniejsza lub równa ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nie podano dozwolonych typów plików.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musi być typem: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Musisz podać więcej niż ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return ` Musisz podać conajmniej ${args[0]} ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `Wartość pola ${name} jest niedozwolona.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musi być numerem.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' lub ')} wymagany jest.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Pole ${sentence(name)} jest wymagane.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Wartośc pola ${sentence(name)} nie zaczyna się od ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Wprowadź prawidłowy adres URL.`;\n        /* </i18n> */\n    },\n};\n\nvar pl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$g,\n    validation: validation$g\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$f = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Incluir',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Remover',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Remover todos',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Desculpe, alguns campos não foram preenchidos corretamente.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Enviar',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nenhum arquivo selecionado.',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mover para cima',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mover para baixo',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Carregando...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Carregar mais',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Próximo',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Anterior',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adicione todos os valores',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Adicionar valores selecionados',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Remover todos os valores',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Remover valores selecionados',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Escolha a data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Data da alteração',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'A data selecionada é inválida.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Fechar',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$f = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Por favor aceite o ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser depois de ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser no futuro.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} precisa conter apenas letras.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} pode conter apenas letras e números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} pode conter apenas números e espaços.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} deve conter caracteres alfabéticos.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} deve conter letras ou números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} deve conter letras ou espaços.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve conter um símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} deve conter letras maiúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} deve conter letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} deve conter números.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} deve ser um símbolo.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} só pode conter letras maiúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} só pode conter letras minúsculas.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser antes de ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser no passado.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Este campo não foi configurado corretamente e não pode ser submetido.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} precisa ser entre ${a} e ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} não é igual.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} não é uma data válida, por favor use este formato ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Este campo não foi configurado corretamente e não pode ser submetido.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} precisa ser entre ${date(args[0])} e ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Por favor, insira um endereço de email válido.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não termina com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = first <= second ? first : second;\n        const max = second >= first ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} precisa conter ao menos um caractere.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser menor ou igual a ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} precisa conter ${max} caracteres.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} precisa ser maior ou igual a ${min} caracteres.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} precisa ter entre ${min} e ${max} caracteres.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} não é um valor permitido.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Não pode ter mais de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser menor ou igual a ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Não há formatos de arquivos permitidos.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser do tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Não pode ter menos de ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} precisa ser pelo menos ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” não é um(a) ${name} permitido(a).`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} precisa ser um número.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ou ')} é necessário.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} é obrigatório.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} não começa com ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Por favor, insira uma url válida.`;\n        /* </i18n> */\n    },\n};\n\nvar pt = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$f,\n    validation: validation$f\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$e = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Adăugare',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Elimină',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Elimină tot',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Trimite',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nu este selectat nici un fișier',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Mutare în sus',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Mutare în jos',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Se încarcă...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Încărcați mai mult',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Urmatorul',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Precedent',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Adăugați toate valorile',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Adăugarea valorilor selectate',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Eliminați toate valorile',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Eliminați valorile selectate',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Alege data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Modificați data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Data selectată este nevalidă.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Închide',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$e = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Te rog acceptă ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să fie după ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie sa fie în viitor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} poate conține doar caractere alafetice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} poate conține doar litere și numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} poate conține doar litere și spații.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} trebuie să conțină caractere alfabetice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere sau numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere sau spații.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} trebuie să conțină simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} trebuie să conțină majuscule.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} trebuie să conțină litere mici.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} trebuie să conțină numere.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} trebuie să fie un simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} poate conține doar litere mari.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} poate conține doar litere mici.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să preceadă ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie în trecut.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Câmpul a fost configurat incorect și nu poate fi trimis.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} trebuie să fie între ${a} și ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} nu se potrivește.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nu este validă, te rog foloște formatul ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Câmpul a fost incorect configurat și nu poate fi trimis.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} trebuie să fie între ${date(args[0])} și ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Te rog folosește o adresă de email validă.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu se termină cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} trebuie sa conțină cel puțin un caracter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} trebuie sa aibă cel mult ${max} caractere.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ar trebui să aibă ${max} caractere lungi.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} trebuie să aibă cel puțin ${min} caractere.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să aibă între ${min} și ${max} caractere.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nu este o valoare acceptată.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nu poate avea mai mult decat ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel mult egal cu ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Tipul de fișier neacceptat.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie de tipul: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nu poate avea mai puțin decât ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} trebuie să fie cel puțin ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nu este o valoare acceptă pentru ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} trebuie să fie un număr.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' sau ')} este necesar.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} este necesar.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nu începe cu ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Introduceți o adresă URL validă.`;\n        /* </i18n> */\n    },\n};\n\nvar ro = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$e,\n    validation: validation$e\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$d = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Добавить',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Удалить',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Убрать все',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Извините, не все поля заполнены верно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Отправить',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл не выбран',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Переместить вверх',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Переместить вниз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Загрузка...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Загрузить больше',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Следующий',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Предыдущий',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Добавить все значения',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Добавить выбранные значения',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Удалить все значения',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Удалить выбранные значения',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Выберите дату',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Изменить дату',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Выбранная дата недействительна.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Закрыть',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$d = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Пожалуйста, примите ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть позже ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в будущем.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Поле ${sentence(name)} может содержать только буквы и цифры.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} могут содержать только буквы и пробелы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} должен содержать алфавитные символы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} должен содержать буквы или цифры.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} должно содержать буквы или пробелы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} должен содержать символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} должно содержать прописные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} должно содержать строчные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} должен содержать числа.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} должен быть символом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} может содержать только прописные буквы.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} может содержать только буквы нижнего регистра.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} должна быть раньше ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} должна быть в прошлом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Это поле заполнено неверно и не может быть отправлено.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Поле ${sentence(name)} должно быть между ${a} и ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `Поле ${sentence(name)} не совпадает.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Поле ${sentence(name)} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Это поле заполнено неверно и не может быть отправлено.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Дата ${sentence(name)} должна быть между ${date(args[0])} и ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Пожалуйста, введите действительный электронный адрес.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} не должно заканчиваться на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Поле ${sentence(name)} имеет неподустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Поле ${sentence(name)} должно содержать минимум один символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть меньше или равна ${max} символам.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `Длина ${sentence(name)} должна составлять ${max} символов.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Длина поля ${sentence(name)} должна быть больше или равна ${min} символам.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Длина поля ${sentence(name)} должна быть между ${min} и ${max} символами.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Поле ${sentence(name)} имеет недопустимое значение.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не может быть выбрано больше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть меньше или равно ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не указаны поддержиавемые форматы файла.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Формат файла в поле ${sentence(name)} должен быть: ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно быть не менее, чем ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” не поддерживается в поле ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Поле ${sentence(name)} должно быть числом.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} требуется.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Поле ${sentence(name)} обязательно для заполнения.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} должно начинаться с ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Пожалуйста, введите действительный URL-адрес.`;\n        /* </i18n> */\n    },\n};\n\nvar ru = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$d,\n    validation: validation$d\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$c = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Pridať',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odstrániť',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odstrániť všetko',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Prepáčte, ale nie všetky polia sú vyplnené správne.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Odoslať',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nebol vybraný žiadny súbor',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Posunúť hore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Posunúť dole',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Načítavanie...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Načítať viac',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Ďalšie',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Predošlý',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Pridajte všetky hodnoty',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Pridajte vybrané hodnoty',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstrániť všetky hodnoty',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstrániť vybrané hodnoty',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Vyberte dátum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Zmena dátumu',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Vybraný dátum je neplatný.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zavrieť',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$c = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosím zaškrtnite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} musí byť za ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí byť v budúcnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená a čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} môže obsahovať iba písmená a medzery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} musí obsahovať abecedné znaky.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} musí obsahovať písmená alebo číslice.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} musí obsahovať písmená alebo medzery.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí obsahovať symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} musí obsahovať veľké písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} musí obsahovať malé písmená.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} musí obsahovať čísla.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} musí byť symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} môže obsahovať iba veľké písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} môže obsahovať len malé písmená.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} musí byť pred ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} musí byť v minulosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} musí byť medzi ${a} and ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} does not match.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nie je platným dátumom, prosím, použite formát ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} musí byť medzi ${date(args[0])} a ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Prosím, zadajte platnú emailovú adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nekončí na ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nie je povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} musí mať najmenej jeden znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} musí byť menšie alebo rovné ako ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} by mala mať dĺžku ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} musí byť väčšie alebo rovné ako ${min} znakov.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} musí byť medzi ${min} až ${max} znakov.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nie je povolená hodnota.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Nie je možné použiť viac než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} musí byť menšie alebo rovné ako ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nie sú povolené formáty súborov.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} musí byť typu: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Nemôže byť menej než ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} musí byť minimálne ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nie je povolené hodnota pre ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} musí byť číslo.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' alebo ')} je potrebný.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je povinné.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} nezačíná s ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Zadajte platnú adresu URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$c,\n    validation: validation$c\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$b = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Odstrani',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Odstrani vse',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Nekatera polja niso pravilno izpolnjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošlji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Nobena datoteka ni izbrana',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Premakni se navzgor',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Premakni se navzdol',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Nalaganje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Naloži več',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Naslednji',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Prejšnji',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte vse vrednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodajanje izbranih vrednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Odstranite vse vrednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Odstrani izbrane vrednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Izberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Spremeni datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Izbrani datum je neveljaven.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zapri',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$b = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Prosimo popravite ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti po ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v prihodnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo znake abecede.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} lahko vsebuje samo črke in presledke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora vsebovati abecedne znake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora vsebovati črke ali številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora vsebovati črke ali presledke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora vsebovati simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora vsebovati velike črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora vsebovati male črke.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora vsebovati številke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} lahko vsebuje le velike črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} lahko vsebuje le male črke.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti pred ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti v preteklosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti med ${a} in ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} se ne ujema.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti med ${date(args[0])} in ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Vnesite veljaven e-poštni naslov.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora kočati z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora vsebovati vsaj en znak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati največ ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} mora biti dolg ${max} znakov.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora vsebovati vsaj ${min} znakov.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora vsebovati med ${min} in ${max} znakov.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ni dovoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Največ je ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} je lahko največ ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nobena vrsta datoteke ni dovoljena.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Najmanj ${args[0]} ${name} je dovoljenih.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti vsaj ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ni dovoljen(a/o) ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti številka.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ali ')} zahtevan je.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je zahtevan(o/a).`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se mora začeti z ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vnesite veljaven URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$b,\n    validation: validation$b\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$a = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Dodaj',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ukloni',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ukloni sve',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Pošalji',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Fajl nije odabran',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Pomerite se gore',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pomeri se dole',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Učitavanje...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Učitaj više',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sledeća',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Prethodna',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Dodajte sve vrednosti',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Dodajte izabrane vrednosti',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Uklonite sve vrednosti',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Uklonite izabrane vrednosti',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Izaberite datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Promenite datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Izabrani datum je nevažeći.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Zatvori',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$a = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Molimo prihvatite ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti posle ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u budućnosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} može da sadrži samo abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} može da sadrži samo slova i brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} može da sadrži samo slova i razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} mora da sadrži abecedne znakove.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} mora da sadrži slova ili brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} mora da sadrži slova ili razmake.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora da sadrži simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} mora da sadrži velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} mora da sadrži mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} mora da sadrži brojeve.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} mora biti simbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} može da sadrži samo velika slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} može da sadrži samo mala slova.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} mora biti pre ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} mora biti u prošlosti.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ovo polje je pogrešno konfigurisano i ne može se poslati.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} mora biti između ${a} i ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} se ne podudara.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} nije važeći datum, molimo Vas koristite format ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ovo polje je pogrešno konfigurisano i ne može se poslati';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} mora biti između ${date(args[0])} i ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Unesite ispravnu e-mail adresu.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} se ne završava sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} nije dozvoljena vrednost`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} mora biti najmanje jedan karakter.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} mora biti manji ili jednaki od ${max} karaktera.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} treba da bude ${max} znakova dugačak.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} mora biti veći ili jednaki od ${min} karaktera.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} mora biti između ${min} i ${max} karaktera.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} nije dozvoljena vrednost.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Ne može imati više od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} mora biti manji ili jednaki od ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Nisu dozvoljeni formati datoteka.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Ne može imati manje od ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} mora da ima najmanje ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” nije dozvoljeno ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} mora biti broj.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' или ')} потребан је.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} je obavezno polje.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ne počinje sa ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Unesite važeću URL adresu.`;\n        /* </i18n> */\n    },\n};\n\nvar sr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$a,\n    validation: validation$a\n});\n\n// Please copy and paste the file your just downloaded here\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$9 = {\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Ta bort',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ta bort alla',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Skicka',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ingen fil vald',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Flytta upp',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Flytta ner',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Laddar...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Ladda mer',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Nästa',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Föregående',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Lägg till alla värden',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Lägg till valda värden',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ta bort alla värden',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Ta bort valda värden',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Välj datum',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Ändra datum',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Det valda datumet är ogiltigt.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Stäng',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$9 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Var god acceptera ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara efter ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara framåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} kan enbart innehålla bokstäver i alfabetet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} kan bara innehålla bokstäver och blanksteg.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} måste innehålla alfabetiska tecken.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} måste innehålla bokstäver eller siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} måste innehålla bokstäver eller mellanslag.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} måste innehålla symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} måste innehålla versaler.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} måste innehålla gemener.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} måste innehålla siffror.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} måste vara en symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} kan bara innehålla versaler.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kan bara innehålla små bokstäver.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} måste vara före ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} måste vara bakåt i tiden.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Det här fältet ställdes inte in korrekt och kan inte användas.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} måste vara mellan ${a} och ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} matchar inte.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} är inte ett giltigt datum, var god använd formatet ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Det här fältet ställdes inte in korrekt och kan inte användas';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Var god fyll i en giltig e-postadress.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} slutar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} måste ha minst ett tecken.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${max} tecken eller färre.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} bör vara ${max} tecken långa.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} måste vara ${min} tecken eller fler.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} måste vara mellan ${min} och ${max} tecken.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} är inte ett godkänt värde.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Kan inte ha mer än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara ${args[0]} eller mindre.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Inga filtyper tillåtna.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} måste vara av filtypen: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Kan inte ha mindre än ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} måste vara minst ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” är inte ett godkänt ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} måste vara en siffra.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' eller ')} krävs.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} är obligatoriskt.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} börjar inte med ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Ange en giltig URL.`;\n        /* </i18n> */\n    },\n};\n\nvar sv = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$9,\n    validation: validation$9\n});\n\n/**\n * Here we can import additional helper functions to assist in formatting our\n * language. Feel free to add additional helper methods to libs/formats if it\n * assists in creating good validation messages for your locale.\n */\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$8 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Aumenta',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Hasai',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hasai Hotu',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Deskulpa, iha informasaun neebe sala iha formuláriu',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Submete',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Seidauk hili file',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Muda ba leten',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Muda ba kotuk',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Hein lai...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Foti tan',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Ba oin',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Ba kotuk',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Aumenta hotu',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Aumenta buat neebe hili ona',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Hasai hotu',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Hasai buat neebe hili ona',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Hili data',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Troka data',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Data la loos.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$8 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Favor ida simu ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} tenki depoid ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} tenki iha futuru.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} bele uza letra deit.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} bele uza letra ka numeru deit.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} bele uza letra ka numeru deit.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} tenki antes ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} tenki antes ohin loron.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Informasaun nee la loos no la bele submete.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} tenki iha klaran entre ${a} no ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} la hanesan.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} la loos, favor ida hakerek tuir ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Informasaun nee la loos no la bele submete.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} tenki iha ${date(args[0])} no ${date(args[1])} nia klaran`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Favor hakerek endresu email neebe loos.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} la remata ho ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `la bele uza ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} tenki iha letra ida ka liu.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} tenki badak liu ${max} letra.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} tenki iha letra ${max}.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} tenki iha letra ${min} ka liu.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} tenki iha letra ${min} too ${max}.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `la bele uza ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `La bele iha ${args[0]} ka liu ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} tenki kiik liu ka hanesan ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return `La bele simu 'format' ida.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} tenki iha tipo: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Presiza ${args[0]} ${name} ka liu.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${name} tenki ${args[0]} ka liu.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `La bele uza “${value}” ba ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} tenki numeru.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Presiza ${sentence(name)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} la komesa ho ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Favor hakerek URL neebe loos.`;\n        /* </i18n> */\n    },\n};\n\nvar tet = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$8,\n    validation: validation$8\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$7 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Илова кардан',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Хориҷ кардан',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Ҳамаро хориҷ кунед',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Бубахшед, на ҳама майдонҳо дуруст пур карда шудаанд.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Пешниҳод кунед',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Ягон файл интихоб нашудааст',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Ба боло ҳаракат кунед',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Ба поён ҳаракат кунед',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Дар ҳоли боргузорӣ',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Бештар бор кунед',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: 'Баъдӣ',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: 'Гузашта',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Ҳама арзишҳоро илова кунед',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Илова кардани арзишҳои интихобшуда',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Ҳама арзишҳоро хориҷ кунед',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Арзишҳои интихобшударо хориҷ кунед',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Сана интихоб кунед',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Тағйир додани сана',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Санаи интихобшуда нодуруст аст.',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$7 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Лутфан ${name}-ро қабул кунед`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} бояд пас аз ${date(args[0])} бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар оянда бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} метавонад танҳо аломатҳои алифборо дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва рақамҳоро дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва фосилаҳоро дар бар гирад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} must contain alphabetical characters.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} must contain letters and numbers.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} must contain letters and spaces.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} must contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} must contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} must contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} must contain number.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} can only contain symbol.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} can only contain uppercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} can only contain lowercase.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} бояд пеш аз ${date(args[0])} бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар гузашта бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} бояд дар байни ${a} ва ${b} бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} мувофиқат намекунад.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} санаи дуруст нест, лутфан формати ${args[0]}-ро истифода баред`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} бояд дар байни ${date(args[0])} ва ${date(args[1])} бошад`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Лутфан нишонаи имейли амалкунандаро ворид намоед.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} бо ${list(args)} ба охир намерасад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} бояд ҳадди аққал як аломат бошад.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} бояд аз ${max} аломат камтар ё баробар бошад.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} бояд ${max} аломат бошад.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} бояд аз ${min} аломат зиёд ё баробар бошад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} бояд дар байни ${min} ва ${max} аломат бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Зиёда аз ${args[0]} ${name} дошта наметавонад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} бояд аз ${args[0]} камтар ё баробар бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Ягон формати файл иҷозат дода намешавад.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} бояд чунин намуд бошад: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Камтар аз ${args[0]} ${name} дошта наметавонад.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} бояд ҳадди аққал ${args[0]} бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" ${name} иҷозат дода намешавад.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} бояд рақам бошад.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames.map(name => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        }).filter(name => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' ё ')} зарур а`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} лозим аст.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} бо ${list(args)} оғоз намешавад.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Лутфан URL-и дурустро дохил кунед.`;\n        /* </i18n> */\n    },\n};\n\nvar tg = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$7,\n    validation: validation$7\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$6 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'เพิ่ม',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'เอาออก',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'เอาออกทั้งหมด',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'ส่ง',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'ยังไม่ได้เลือกไฟล์',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'เลื่อนขึ้น',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'เลื่อนลง',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'กำลังโหลด...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'โหลดเพิ่มเติม',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'ถัดไป',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'ก่อนหน้า',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'เพิ่มค่าทั้งหมด',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'เพิ่มค่าที่เลือก',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'ลบค่าทั้งหมด',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'ลบค่าที่เลือก',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'เลือกวันที่',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'เปลี่ยนวันที่',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'วันที่ที่เลือกไม่ถูกต้อง',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'ปิด',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$6 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `กรุณายอมรับ ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรตัวอักษร`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรหรือตัวเลข`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} ต้องมีตัวอักษรหรือช่องว่าง`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} ต้องมีสัญลักษณ์`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} ต้องมีตัวพิมพ์ใหญ่`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} ต้องมีตัวพิมพ์เล็ก`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} ต้องมีตัวเลข`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} จะต้องเป็นสัญลักษณ์`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์ใหญ่`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} เท่านั้นที่สามารถมีตัวอักษรตัวพิมพ์เล็ก`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} ไม่ตรงกัน`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องลงท้ายด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ควรจะเป็น ${max} ตัวอักษรยาว`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าไม่เกิน ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'ไม่มีประเภทของไฟล์ที่อนุญาต';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} จะต้องเป็นตัวเลขเท่านั้น`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' หรือ ')} ต้องการ.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `กรุณากรอก ${sentence(name)}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} จะต้องเริ่มต้นด้วย ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`;\n        /* </i18n> */\n    },\n};\n\nvar th = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$6,\n    validation: validation$6\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$5 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Ekle',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Kaldır',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Hepsini kaldır',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gönder',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Dosya yok',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Yukarı Taşı',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Aşağı taşı',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yükleniyor...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Daha fazla yükle',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Sonraki',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Önceki',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Tüm değerleri ekle',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Seçili değerleri ekle',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Tüm değerleri kaldır',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Seçili değerleri kaldır',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Tarih seçin',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Tarihi değiştir',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Seçilen tarih geçersiz.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Kapat',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$5 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Lütfen ${name}'yi kabul edin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])}'den sonra olmalıdır.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} gelecekte bir zaman olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} sadece alfabetik karakterler ve sayı içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} yalnızca harf ve boşluk içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} alfabetik karakterler içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harf veya rakamı içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harf veya boşluk içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} sembol içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} büyük harf içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} küçük harf içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} sayı içermelidir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} bir sembol olmalıdır.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} yalnızca büyük harfler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} yalnızca küçük harfler içerebilir.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} tarihinden önce olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} geçmişte olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Alan yanlış yapılandırılmış ve gönderilemez.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} ve ${b} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} eşleşmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} geçerli bir tarih değil, lütfen ${args[0]} biçimini kullanın.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Alan yanlış yapılandırılmış ve gönderilemez.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Lütfen geçerli bir e-mail adresi girin.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile bitmiyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} en azından bir karakter uzunluğunda olmalı.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max}'e eşit veya daha küçük olmalı.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} ${max} karakter uzunluğunda olmalıdır.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min}'e eşit veya daha büyük olmalı.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} izin verilen bir değer değil.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Hiçbir dosya türüne izin verilmez.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} şu tiplerden biri olmalı: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” ${name} olamaz.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} sayı olmalı.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' veya ')} gereklidir.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} gerekli.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} ile başlamıyor.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Lütfen geçerli bir URL girin.`;\n        /* </i18n> */\n    },\n};\n\nvar tr = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$5,\n    validation: validation$5\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$4 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: 'Додати',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Видалити',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Видалити все',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Вибачте, не всі поля заповнені правильно.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Відправити',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Файл не вибрано',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Рухатися вгору',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Пересунути вниз',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Завантаження...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Завантажте більше',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Наступний',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Попередній',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Додати всі значення',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Додати вибрані значення',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Вилучити всі значення',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Вилучити вибрані значення',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Виберіть дату',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Змінити дату',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Вибрана дата недійсна.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Закрити',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$4 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Будь ласка, прийміть ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} повинна бути пізніше за ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} має бути в майбутньому.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери та цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `Поле ${sentence(name)} може містити лише літери та пробіли.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} повинен містити алфавітні символи.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} повинен містити букви або цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} повинен містити літери або пробіли.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} повинен містити символ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} повинен містити великі регістри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} повинен містити малі регістри.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} повинен містити цифри.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} має бути символом.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} може містити лише великі літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} може містити лише малі літери.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `Дата ${sentence(name)} повинна бути раніше за ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `Дата ${sentence(name)} повинна бути в минулому.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Це поле заповнено неправильно і не може бути надіслано.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `Поле ${sentence(name)} повинно бути між ${a} та ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `Поле ${sentence(name)} не збігається.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `Поле ${sentence(name)} має неправильну дату. Будь ласка, використовуйте формат ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Це поле заповнено неправильно і не може бути надіслано.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `Дата ${sentence(name)} повинна бути між ${date(args[0])} та ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Будь ласка, введіть дійсну електронну адресу.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} не повинно закінчуватися на ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `Поле ${sentence(name)} має містити щонайменше один символ.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `Довжина поля ${sentence(name)} повинна бути меншою або дорівнювати ${max} символам.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} має бути довжиною ${max} символів.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `Довжина поля ${sentence(name)} повинна бути більшою або дорівнювати ${min} символам.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `Довжина поля ${sentence(name)} повинна бути між ${min} та ${max} символами.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `Не може бути вибрано більше ніж ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має бути менше або дорівнювати ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Не вказано дозволені типи файлів.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `Тип файлу в полі ${sentence(name)} має бути: ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `Не може бути вибрано менше ніж ${args[0]} ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має бути не менше ніж ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” не дозволено в полі ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `Поле ${sentence(name)} має бути числом.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' або ')} потрібно.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `Поле ${sentence(name)} є обов'язковим.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `Поле ${sentence(name)} має починатися з ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Будь ласка, введіть коректну URL-адресу.`;\n        /* </i18n> */\n    },\n};\n\nvar uk = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$4,\n    validation: validation$4\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$3 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: \"Qo'shish\",\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: \"O'chirish\",\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: \"Hammasini o'chirish\",\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: \"Kechirasiz, barcha maydonlar to'g'ri to'ldirilmagan.\",\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Yuborish',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Hech qanday fayl tanlanmagan',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Yuqoriga ko’taring',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Pastga siljish',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Yuklanmoqda...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Ko’proq yuklang',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Keyingi',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Oldingi',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: `Barcha qiymatlarni qo'shish`,\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: `Tanlangan qiymatlarni qoʻshish`,\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Barcha qiymatlarni olib tashlang',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Tanlangan qiymatlarni olib tashlash',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Sanani tanlang',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: `O'zgartirish sanasi`,\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Tanlangan sana yaroqsiz.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Yopish',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$3 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `${name} ni qabul qiling.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} dan keyin bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} kelajakda bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} faqat alifbo tartibidagi belgilardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} faqat harflar va raqamlardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} faqat harf va bo'shliqlardan iborat bo'lishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} alfavit belgilarini o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} harflar yoki raqamlarni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} harflar yoki bo'shliqlar bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} belgisi bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} katta harfni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} kichik harflarni o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} raqamlarini o'z ichiga olishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} belgisi bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} faqat katta harflarni o'z ichiga olishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} faqat kichik harflarni o'z ichiga olishi mumkin.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} ${date(args[0])} dan oldin bo'lishi kerak`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} o'tmishda bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} ${a} va ${b} orasida bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} mos emas.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} haqiqiy sana emas, iltimos ${args[0]} formatidan foydalaning`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return \"Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi\";\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} ${date(args[0])} va ${date(args[1])} oralig'ida bo'lishi kerak`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Iltimos amaldagi e-mail manzilingizni kiriting.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} bilan tugamaydi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} kamida bitta belgidan iborat bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} ${max} ta belgidan kam yoki teng bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} bo'lishi kerak ${max} belgilar uzun.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} ${min} ta belgidan ko'p yoki teng bo'lishi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} ${min} va ${max} gacha belgilardan iborat bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${args[0]} ${name} dan ortiq bo'lishi mumkin emas.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} ${args[0]} dan kichik yoki teng bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Fayl formatlariga ruxsat berilmagan.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} quyidagi turdagi bo'lishi kerak: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${args[0]} ${name} dan kam bo'lmasligi kerak.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} kamida ${args[0]} bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" ruxsat berilmagan ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} raqam bo'lishi kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' yoki ')} kerak.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} talab qilinadi.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} ${list(args)} bilan boshlanmaydi.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Iltimos, tegishli URL manzilini kiriting.`;\n        /* </i18n> */\n    },\n};\n\nvar uz = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$3,\n    validation: validation$3\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$2 = {\n    /**\n     * Shown on buttons for adding new items.\n     */\n    add: 'Thêm',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: 'Xoá',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: 'Xoá tất cả',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: 'Gửi',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: 'Chưa chọn file',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: 'Di chuyển lên',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: 'Di chuyển xuống',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: 'Đang tải...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: 'Tải thêm',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: 'Tiếp',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: 'Trước',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: 'Thêm tất cả các giá trị',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: 'Thêm các giá trị đã chọn',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: 'Loại bỏ tất cả các giá trị',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: 'Loại bỏ các giá trị đã chọn',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: 'Chọn ngày',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: 'Thay đổi ngày',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: 'Ngày đã chọn không hợp lệ.',\n    /**\n     * Shown when there is something to close\n     */\n    close: 'Đóng',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$2 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `Hãy đồng ý với ${name}.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} phải sau ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong tương lai.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái alphabet.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái và chữ số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} phải chứa các ký tự chữ cái.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} phải chứa chữ cái hoặc số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} phải chứa chữ cái hoặc dấu cách.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} phải chứa ký hiệu.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} phải chứa chữ hoa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} phải chứa chữ thường.`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} phải chứa số.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} phải là một ký hiệu.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa chữ hoa.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} chỉ có thể chứa chữ thường.`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} phải trước ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} phải trong quá khứ.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `Trường này đã được thiết lập sai và không thể gửi.`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} phải ở giữa ${a} và ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} không khớp.`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${args[0]}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return 'Trường này đã được thiết lập sai và không thể gửi.';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(args[1])}.`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: 'Hãy nhập một địa chỉ email hợp lệ.',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không kết thúc với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu một ký tự.`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối đa ${max} ký tự.`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} nên dài ${max} ký tự.`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} phải có độ dài tối thiểu ${min} ký tự.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name} không thể lớn hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối đa bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return 'Định dạng tệp tin này không được phép.';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} phải là một trong các dạng: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name} không thể nhỏ hơn ${args[0]}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)} phải tối thiểu bằng ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\" không phải giá trị ${name} được phép.`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} phải là một số.`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join(' hoặc ')} cần có.`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} là bắt buộc.`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} không bắt đầu với ${list(args)}.`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `Vui lòng nhập một URL hợp lệ.`;\n        /* </i18n> */\n    },\n};\n\nvar vi = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$2,\n    validation: validation$2\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui$1 = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: '添加',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '移除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '移除全部',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '抱歉，部分字段未被正确填写。',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '提交',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '未选择文件',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上移',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下移',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '加载中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '加载更多',\n    /**\n     * Shown on buttons that navigate state forward\n     */\n    next: '下一步',\n    /**\n     * Shown on buttons that navigate state backward\n     */\n    prev: '上一步',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '添加所有值',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '添加所选值',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '移除所有值',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '移除所选值',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '选择日期',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '更改日期',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '所选日期无效。',\n    /**\n     * Shown when there is something to close\n     */\n    close: '关闭',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation$1 = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `请接受${name}。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)}必须晚于${date(args[0])}。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是未来的日期。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)}只能包含英文字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)}只能包含字母和数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)}只能包含字母和空格。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter.\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha}\n     */\n    contains_alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical characters.\"> */\n        return `${sentence(name)} 必须包含字母字符`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#contains_alphanumeric}\n     */\n    contains_alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphanumeric characters.\"> */\n        return `${sentence(name)} 必须包含字母或数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#contains_alpha-spaces}\n     */\n    contains_alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 必须包含字母或空格。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no symbol\n     * @see {@link https://formkit.com/essentials/validation#contains_symbol}\n     */\n    contains_symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only alphanumeric and space characters.\"> */\n        return `${sentence(name)} 必须包含符号。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no uppercase\n     * @see {@link https://formkit.com/essentials/validation#contains_uppercase}\n     */\n    contains_uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 必须包含大写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value have no lowercase\n     * @see {@link https://formkit.com/essentials/validation#contains_lowercase}\n     */\n    contains_lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains only non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 必须包含小写字母。`;\n        /* </i18n> */\n    },\n    /**\n     *  The value have no numeric\n     * @see {@link https://formkit.com/essentials/validation#contains_numeric}\n     */\n    contains_numeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value have no numeric.\"> */\n        return `${sentence(name)} 必须包含数字。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not symbol\n     * @see {@link https://formkit.com/essentials/validation#symbol}\n     */\n    symbol({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains alphanumeric and space characters.\"> */\n        return `${sentence(name)} 必须是符号。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not uppercase\n     * @see {@link https://formkit.com/essentials/validation#uppercase}\n     */\n    uppercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-uppercase characters.\"> */\n        return `${sentence(name)} 只能包含大写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not lowercase\n     * @see {@link https://formkit.com/essentials/validation#lowercase}\n     */\n    lowercase({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical-lowercase characters.\"> */\n        return `${sentence(name)} 只能包含小写字母。`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)}必须早于${date(args[0])}。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)}必须是过去的日期。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `该字段未被正确设置而无法提交。`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)}必须在${a}和${b}之间。`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)}不匹配。`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)}不是合法日期，请使用 ${args[0]} 格式`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '该字段未被正确设置而无法提交';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)}必须在${date(args[0])}和${date(args[1])}之间`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '请输入合法的电子邮件地址。',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)}必须以${list(args)}结尾。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)}是不允许的。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)}至少要有一个字符。`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)}必须少于或等于${max}个字符。`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)}必须包含${max}个字符。`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)}必须多于或等于${min}个字符。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)}必须介于${min}和${max}个字符之间。`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)}是不允许的。`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `${name}不得多于${args[0]}个值。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${name}不得大于${args[0]}。`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '没有允许的文件格式。';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)}的类型必须为：${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `${name}不得少于${args[0]}个值。`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${sentence(name)}不得小于${args[0]}。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `\"${value}\"不是一个合法的${name}。`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)}必须为数字。`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('或')}${labels}需要。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)}不得留空。`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)}必须以${list(args)}开头。`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `请输入有效的 URL。`;\n        /* </i18n> */\n    },\n};\n\nvar zh = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui$1,\n    validation: validation$1\n});\n\n/**\n * Standard language for interface features.\n * @public\n */\nconst ui = {\n    /**\n     * Shown on a button for adding additional items.\n     */\n    add: '新增',\n    /**\n     * Shown when a button to remove items is visible.\n     */\n    remove: '移除',\n    /**\n     * Shown when there are multiple items to remove at the same time.\n     */\n    removeAll: '移除全部',\n    /**\n     * Shown when all fields are not filled out correctly.\n     */\n    incomplete: '很抱歉，部分欄位填寫錯誤',\n    /**\n     * Shown in a button inside a form to submit the form.\n     */\n    submit: '提交',\n    /**\n     * Shown when no files are selected.\n     */\n    noFiles: '尚未選取檔案',\n    /**\n     * Shown on buttons that move fields up in a list.\n     */\n    moveUp: '上移',\n    /**\n     * Shown on buttons that move fields down in a list.\n     */\n    moveDown: '下移',\n    /**\n     * Shown when something is actively loading.\n     */\n    isLoading: '載入中...',\n    /**\n     * Shown when there is more to load.\n     */\n    loadMore: '載入更多',\n    /**\n     * Show on buttons that navigate state forward\n     */\n    next: '下一個',\n    /**\n     * Show on buttons that navigate state backward\n     */\n    prev: '上一個',\n    /**\n     * Shown when adding all values.\n     */\n    addAllValues: '加入全部的值',\n    /**\n     * Shown when adding selected values.\n     */\n    addSelectedValues: '加入選取的值',\n    /**\n     * Shown when removing all values.\n     */\n    removeAllValues: '移除全部的值',\n    /**\n     * Shown when removing selected values.\n     */\n    removeSelectedValues: '移除選取的值',\n    /**\n     * Shown when there is a date to choose.\n     */\n    chooseDate: '選擇日期',\n    /**\n     * Shown when there is a date to change.\n     */\n    changeDate: '變更日期',\n    /**\n     * Shown when the date is invalid.\n     */\n    invalidDate: '選取的日期無效',\n    /**\n     * Shown when there is something to close\n     */\n    close: '關閉',\n};\n/**\n * These are all the possible strings that pertain to validation messages.\n * @public\n */\nconst validation = {\n    /**\n     * The value is not an accepted value.\n     * @see {@link https://formkit.com/essentials/validation#accepted}\n     */\n    accepted({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\n        return `請接受 ${name}`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not after\n     * @see {@link https://formkit.com/essentials/validation#date-after}\n     */\n    date_after({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\n            return `${sentence(name)} 必須晚於 ${date(args[0])}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 必須晚於今日`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a letter.\n     * @see {@link https://formkit.com/essentials/validation#alpha}\n     */\n    alpha({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\n        return `${sentence(name)} 欄位儘能填寫英文字母`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not alphanumeric\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\n     */\n    alphanumeric({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\n        return `${sentence(name)} 欄位僅能填寫英文字母與數字`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not letter and/or spaces\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\n     */\n    alpha_spaces({ name }) {\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\n        return `${sentence(name)} 欄位儘能填寫英文字母與空白`;\n        /* </i18n> */\n    },\n    /**\n     * The date is not before\n     * @see {@link https://formkit.com/essentials/validation#date-before}\n     */\n    date_before({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\n            return `${sentence(name)} 必須早於 ${date(args[0])}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\n        return `${sentence(name)} 必須早於今日`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not between two numbers\n     * @see {@link https://formkit.com/essentials/validation#between}\n     */\n    between({ name, args }) {\n        if (isNaN(args[0]) || isNaN(args[1])) {\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\n            return `欄位值錯誤，無法提交`;\n            /* </i18n> */\n        }\n        const [a, b] = order(args[0], args[1]);\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\n        return `${sentence(name)} 必須介於 ${a} 和 ${b}.`;\n        /* </i18n> */\n    },\n    /**\n     * The confirmation field does not match\n     * @see {@link https://formkit.com/essentials/validation#confirm}\n     */\n    confirm({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\n        return `${sentence(name)} 與目標不一致`;\n        /* </i18n> */\n    },\n    /**\n     * The value is not a valid date\n     * @see {@link https://formkit.com/essentials/validation#date-format}\n     */\n    date_format({ name, args }) {\n        if (Array.isArray(args) && args.length) {\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\n            return `${sentence(name)} 不是有效的日期，請使用 ${args[0]} 格式`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\n        return '欄位值錯誤，無法提交';\n        /* </i18n> */\n    },\n    /**\n     * Is not within expected date range\n     * @see {@link https://formkit.com/essentials/validation#date-between}\n     */\n    date_between({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\n        return `${sentence(name)} 必須介於 ${date(args[0])} 和 ${date(args[1])}`;\n        /* </i18n> */\n    },\n    /**\n     * Shown when the user-provided value is not a valid email address.\n     * @see {@link https://formkit.com/essentials/validation#email}\n     */\n    email: '請輸入有效的 email',\n    /**\n     * Does not end with the specified value\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\n     */\n    ends_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\n        return `${sentence(name)} 的結尾必須是 ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#is}\n     */\n    is({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\n        return `${sentence(name)} 欄位的值不合規則`;\n        /* </i18n> */\n    },\n    /**\n     * Does not match specified length\n     * @see {@link https://formkit.com/essentials/validation#length}\n     */\n    length({ name, args: [first = 0, second = Infinity] }) {\n        const min = Number(first) <= Number(second) ? first : second;\n        const max = Number(second) >= Number(first) ? second : first;\n        if (min == 1 && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\n            return `${sentence(name)} 欄位必須至少包含一個字`;\n            /* </i18n> */\n        }\n        if (min == 0 && max) {\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須小於等於 ${max}`;\n            /* </i18n> */\n        }\n        if (min === max) {\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須為 ${max}`;\n            /* </i18n> */\n        }\n        if (min && max === Infinity) {\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\n            return `${sentence(name)} 的字數必須大於等於 ${min}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\n        return `${sentence(name)} 的字數必須介於 ${min} 和 ${max}`;\n        /* </i18n> */\n    },\n    /**\n     * Value is not a match\n     * @see {@link https://formkit.com/essentials/validation#matches}\n     */\n    matches({ name }) {\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\n        return `${sentence(name)} 欄位的值無效`;\n        /* </i18n> */\n    },\n    /**\n     * Exceeds maximum allowed value\n     * @see {@link https://formkit.com/essentials/validation#max}\n     */\n    max({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\n            return `不能超過 ${args[0]} 個 ${name}.`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\n        return `${sentence(name)} 必須小於等於 ${args[0]}.`;\n        /* </i18n> */\n    },\n    /**\n     * The (field-level) value does not match specified mime type\n     * @see {@link https://formkit.com/essentials/validation#mime}\n     */\n    mime({ name, args }) {\n        if (!args[0]) {\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\n            return '非有效的檔案格式';\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\n        return `${sentence(name)} 可接受的檔案格式為: ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Does not fulfill minimum allowed value\n     * @see {@link https://formkit.com/essentials/validation#min}\n     */\n    min({ name, node: { value }, args }) {\n        if (Array.isArray(value)) {\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\n            return `不可少於 ${args[0]} 個 ${name}`;\n            /* </i18n> */\n        }\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\n        return `${name} 必須大於等於 ${args[0]}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not an allowed value\n     * @see {@link https://formkit.com/essentials/validation#not}\n     */\n    not({ name, node: { value } }) {\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\n        return `“${value}” 不是 ${name} 欄位可接受的值`;\n        /* </i18n> */\n    },\n    /**\n     *  Is not a number\n     * @see {@link https://formkit.com/essentials/validation#number}\n     */\n    number({ name }) {\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\n        return `${sentence(name)} 欄位必須是數字`;\n        /* </i18n> */\n    },\n    /**\n     * Require one field.\n     * @see {@link https://formkit.com/essentials/validation#require-one}\n     */\n    require_one: ({ name, node, args: inputNames }) => {\n        const labels = inputNames\n            .map((name) => {\n            const dependentNode = node.at(name);\n            if (dependentNode) {\n                return createMessageName(dependentNode);\n            }\n            return false;\n        })\n            .filter((name) => !!name);\n        labels.unshift(name);\n        /* <i18n case=\"Shown when the user-provided has not provided a value for at least one of the required fields.\"> */\n        return `${labels.join('或')}${labels}需要。`;\n        /* </i18n> */\n    },\n    /**\n     * Required field.\n     * @see {@link https://formkit.com/essentials/validation#required}\n     */\n    required({ name }) {\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\n        return `${sentence(name)} 是必要欄位`;\n        /* </i18n> */\n    },\n    /**\n     * Does not start with specified value\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\n     */\n    starts_with({ name, args }) {\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\n        return `${sentence(name)} 的開頭必須是 ${list(args)}`;\n        /* </i18n> */\n    },\n    /**\n     * Is not a url\n     * @see {@link https://formkit.com/essentials/validation#url}\n     */\n    url() {\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\n        return `請輸入有效的 url`;\n        /* </i18n> */\n    },\n};\n\nvar zhTW = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ui: ui,\n    validation: validation\n});\n\n/**\n * Create a new internationalization plugin for FormKit.\n *\n * @param registry - The registry of {@link @formkit/i18n#FormKitLocaleRegistry | FormKitLocales}.\n *\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\n *\n * @public\n */\nfunction createI18nPlugin(registry) {\n    return function i18nPlugin(node) {\n        let localeKey = parseLocale(node.config.locale, registry);\n        let locale = localeKey ? registry[localeKey] : {};\n        /* If the locale prop changes, update the active locale */\n        node.on('prop:locale', ({ payload: lang }) => {\n            localeKey = parseLocale(lang, registry);\n            locale = localeKey ? registry[localeKey] : {};\n            // Run through all the messages in the store and update with new locale\n            node.store.touch();\n        });\n        node.on('prop:label', () => node.store.touch());\n        node.on('prop:validationLabel', () => node.store.touch());\n        /**\n         * Hook into the core text or t() hook to perform localization on the\n         * output of core functionality.\n         */\n        node.hook.text((fragment, next) => {\n            var _a, _b;\n            const key = ((_a = fragment.meta) === null || _a === void 0 ? void 0 : _a.messageKey) || fragment.key;\n            if (has(locale, fragment.type) && has(locale[fragment.type], key)) {\n                const t = locale[fragment.type][key];\n                if (typeof t === 'function') {\n                    fragment.value = Array.isArray((_b = fragment.meta) === null || _b === void 0 ? void 0 : _b.i18nArgs)\n                        ? t(...fragment.meta.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                        : t(fragment);\n                }\n                else {\n                    fragment.value = t;\n                }\n            }\n            return next(fragment);\n        });\n    };\n}\n/**\n * Parse ISO 639-1 and 639-2 to a valid locale key.\n *\n * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For these are valid locale keys:\n * zh\n * zh-CN\n * zh-HK\n * en\n * en-GB\n *\n * @param availableLocales - An array of locales that may be valid.\n *\n * @public\n */\nfunction parseLocale(locale, availableLocales) {\n    if (has(availableLocales, locale)) {\n        return locale;\n    }\n    const [lang] = locale.split('-');\n    if (has(availableLocales, lang)) {\n        return lang;\n    }\n    for (const locale in availableLocales) {\n        return locale;\n    }\n    return false;\n}\n\n/**\n * The official FormKit internationalization (i18n) plugin. This package\n * contains the locales and the plugin that integrates FormKit with these\n * locales. Read the {@link https://formkit.com/essentials/internationalization\n * | internationalization documentation} for usage instructions.\n *\n * @packageDocumentation\n */\n/**\n * Export all the available locales at once.\n *\n * @public\n */\nconst locales = {\n    ar,\n    az,\n    bg,\n    bs,\n    ca,\n    cs,\n    da,\n    de,\n    el,\n    en,\n    es,\n    fa,\n    fi,\n    fr,\n    fy,\n    he,\n    hr,\n    hu,\n    id,\n    it,\n    ja,\n    kk,\n    ko,\n    lt,\n    lv,\n    nb,\n    nl,\n    pl,\n    pt,\n    ro,\n    ru,\n    sk,\n    sl,\n    sr,\n    sv,\n    tet,\n    tg,\n    th,\n    tr,\n    uk,\n    uz,\n    vi,\n    zh,\n    'zh-TW': zhTW,\n    is,\n    mn,\n};\n\nexport { ar, az, bg, bs, ca, createI18nPlugin, cs, da, date, de, el, en, es, fa, fi, fr, fy, he, hr, hu, id, is, it, ja, kk, ko, list, locales, lt, lv, mn, nb, nl, order, pl, pt, ro, ru, sentence, sk, sl, sr, sv, tet, tg, th, tr, uk, uz, vi, zh, zhTW };\n","import { FORMKIT_VERSION } from '@formkit/core';\n\n/**\n * This package contains the official themes for FormKit. Read the\n * {@link https://formkit.com/getting-started/installation |\n * installation documentation} for more information.\n *\n * @packageDocumentation\n */\n/**\n * A function to generate FormKit class functions from a JavaScript object.\n * @param classes - An object of input types with nested objects of sectionKeys and class lists.\n * @returns An object of sectionKeys with class functions.\n * @public\n */\nfunction generateClasses(classes) {\n    const classesBySectionKey = {};\n    Object.keys(classes).forEach((type) => {\n        Object.keys(classes[type]).forEach((sectionKey) => {\n            if (!classesBySectionKey[sectionKey]) {\n                classesBySectionKey[sectionKey] = {\n                    [type]: classes[type][sectionKey],\n                };\n            }\n            else {\n                classesBySectionKey[sectionKey][type] = classes[type][sectionKey];\n            }\n        });\n    });\n    Object.keys(classesBySectionKey).forEach((sectionKey) => {\n        const classesObject = classesBySectionKey[sectionKey];\n        classesBySectionKey[sectionKey] = function (node, sectionKey) {\n            return addClassesBySection(node, sectionKey, classesObject);\n        };\n    });\n    return classesBySectionKey;\n}\n/**\n * Updates a class list for a given sectionKey\n * @param node - the FormKit node being operated on\n * @param sectionKey - The section key to which the class list will be applied\n * @param classByType - Object containing mappings of class lists to section keys\n * @returns\n * @public\n */\nfunction addClassesBySection(node, _sectionKey, classesByType) {\n    const type = node.props.type;\n    const family = node.props.family;\n    let classList = '';\n    if (classesByType.global) {\n        classList += classesByType.global + ' ';\n    }\n    if (classesByType[`family:${family}`]) {\n        classList += classesByType[`family:${family}`] + ' ';\n    }\n    if (classesByType[type]) {\n        classList += classesByType[type];\n    }\n    const listParts = classList.split('$reset');\n    if (listParts.length > 1) {\n        return `$reset ${listParts[listParts.length - 1].trim()}`;\n    }\n    return listParts[0].trim();\n}\n/**\n * The document's computed CSS styles\n */\nlet documentStyles = undefined;\nlet documentThemeLinkTag = null;\n/**\n * Stores the state of theme loading\n */\nlet themeDidLoad;\nlet themeHasLoaded = false;\nlet themeWasRequested = false;\nconst themeLoaded = /* #__PURE__ */ new Promise((res) => {\n    themeDidLoad = () => {\n        themeHasLoaded = true;\n        res();\n    };\n});\n/**\n * Check if we are client-side\n */\nconst isClient = typeof window !== 'undefined' && typeof fetch !== 'undefined';\ndocumentStyles = isClient\n    ? /* #__PURE__ */ getComputedStyle(document.documentElement)\n    : undefined;\n/**\n * The FormKit icon Registry - a global record of loaded icons.\n * @public\n */\nconst iconRegistry = {};\n/**\n * A collection of existing icon requests to avoid duplicate fetching\n */\nconst iconRequests = {};\n/**\n * Creates the theme plugin based on a given theme name.\n * @param theme - The name or id of the theme to apply.\n * @param icons - Icons you want to add to the global icon registry.\n * @param iconLoaderUrl - A function that returns a remote url for retrieving an\n * SVG icon by name.\n * @param iconLoader - A function that handles loading an icon when it is not\n * found in the registry.\n * @public\n */\nfunction createThemePlugin(theme, icons, iconLoaderUrl, iconLoader) {\n    if (icons) {\n        // add any user-provided icons to the registry\n        Object.assign(iconRegistry, icons);\n    }\n    // if we have a theme declared, request it\n    if (isClient &&\n        !themeWasRequested &&\n        (documentStyles === null || documentStyles === void 0 ? void 0 : documentStyles.getPropertyValue('--formkit-theme'))) {\n        // we have the theme loaded locally\n        themeDidLoad();\n        themeWasRequested = true;\n    }\n    else if (theme && !themeWasRequested && isClient) {\n        // we have the theme name but need to request it remotely\n        loadTheme(theme);\n    }\n    else if (!themeWasRequested && isClient) {\n        // we don't have a discoverable theme, so don't wait for it\n        themeDidLoad();\n    }\n    const themePlugin = function themePlugin(node) {\n        var _a, _b;\n        // register the icon handler, and override with local prop value if it exists\n        node.addProps(['iconLoader', 'iconLoaderUrl']);\n        node.props.iconHandler = createIconHandler(((_a = node.props) === null || _a === void 0 ? void 0 : _a.iconLoader) ? node.props.iconLoader : iconLoader, ((_b = node.props) === null || _b === void 0 ? void 0 : _b.iconLoaderUrl) ? node.props.iconLoaderUrl : iconLoaderUrl);\n        loadIconPropIcons(node, node.props.iconHandler);\n        node.on('created', () => {\n            var _a;\n            // set up the `-icon` click handlers\n            if ((_a = node === null || node === void 0 ? void 0 : node.context) === null || _a === void 0 ? void 0 : _a.handlers) {\n                node.context.handlers.iconClick = (sectionKey) => {\n                    const clickHandlerProp = `on${sectionKey\n                        .charAt(0)\n                        .toUpperCase()}${sectionKey.slice(1)}IconClick`;\n                    const handlerFunction = node.props[clickHandlerProp];\n                    if (handlerFunction && typeof handlerFunction === 'function') {\n                        return (e) => {\n                            return handlerFunction(node, e);\n                        };\n                    }\n                    return undefined;\n                };\n            }\n        });\n    };\n    themePlugin.iconHandler = createIconHandler(iconLoader, iconLoaderUrl);\n    return themePlugin;\n}\n/**\n * Loads a FormKit theme\n */\nfunction loadTheme(theme) {\n    if (!theme || !isClient || typeof getComputedStyle !== 'function') {\n        // if we're not client-side then bail\n        return;\n    }\n    // since we're client-side, flag that we've requested the theme\n    themeWasRequested = true;\n    documentThemeLinkTag = document.getElementById('formkit-theme');\n    // retrieve document styles on plugin creation when the window object exists\n    if (theme &&\n        // if we have a window object\n        isClient &&\n        // we don't have an existing theme OR the theme being set up is different\n        ((!(documentStyles === null || documentStyles === void 0 ? void 0 : documentStyles.getPropertyValue('--formkit-theme')) &&\n            !documentThemeLinkTag) ||\n            ((documentThemeLinkTag === null || documentThemeLinkTag === void 0 ? void 0 : documentThemeLinkTag.getAttribute('data-theme')) &&\n                (documentThemeLinkTag === null || documentThemeLinkTag === void 0 ? void 0 : documentThemeLinkTag.getAttribute('data-theme')) !== theme))) {\n        // if for some reason we didn't overwrite the __FKV__ token during publish\n        // then use the `latest` tag for CDN fetching. (this applies to local dev as well)\n        const formkitVersion = FORMKIT_VERSION.startsWith('__')\n            ? 'latest'\n            : FORMKIT_VERSION;\n        const themeUrl = `https://cdn.jsdelivr.net/npm/@formkit/themes@${formkitVersion}/dist/${theme}/theme.css`;\n        const link = document.createElement('link');\n        link.type = 'text/css';\n        link.rel = 'stylesheet';\n        link.id = 'formkit-theme';\n        link.setAttribute('data-theme', theme);\n        link.onload = () => {\n            documentStyles = getComputedStyle(document.documentElement); // grab new variables from theme\n            themeDidLoad();\n        };\n        document.head.appendChild(link);\n        link.href = themeUrl;\n        // if we had an existing theme being loaded, remove it.\n        if (documentThemeLinkTag) {\n            documentThemeLinkTag.remove();\n        }\n    }\n}\n/**\n * Returns a function responsible for loading an icon by name.\n * @param iconLoader - a function for loading an icon when it's not found in the\n * iconRegistry.\n * @param iconLoaderUrl - a function that returns a remote URL for retrieving an\n * SVG icon by name.\n * @public\n */\nfunction createIconHandler(iconLoader, iconLoaderUrl) {\n    return (iconName) => {\n        // bail if we got something that wasn't string\n        if (typeof iconName !== 'string')\n            return;\n        // if we're dealing with an inline SVG, just use it as-is\n        if (iconName.startsWith('<svg')) {\n            return iconName;\n        }\n        // is this a default icon that should only load from a stylesheet?\n        const isDefault = iconName.startsWith('default:');\n        iconName = isDefault ? iconName.split(':')[1] : iconName;\n        // check if we've already loaded the icon before\n        const iconWasAlreadyLoaded = iconName in iconRegistry;\n        let loadedIcon = undefined;\n        if (iconWasAlreadyLoaded) {\n            return iconRegistry[iconName];\n        }\n        else if (!iconRequests[iconName]) {\n            loadedIcon = getIconFromStylesheet(iconName);\n            loadedIcon =\n                isClient && typeof loadedIcon === 'undefined'\n                    ? Promise.resolve(loadedIcon)\n                    : loadedIcon;\n            if (loadedIcon instanceof Promise) {\n                iconRequests[iconName] = loadedIcon\n                    .then((iconValue) => {\n                    if (!iconValue && typeof iconName === 'string' && !isDefault) {\n                        return (loadedIcon =\n                            typeof iconLoader === 'function'\n                                ? iconLoader(iconName)\n                                : getRemoteIcon(iconName, iconLoaderUrl));\n                    }\n                    return iconValue;\n                })\n                    .then((finalIcon) => {\n                    if (typeof iconName === 'string') {\n                        iconRegistry[isDefault ? `default:${iconName}` : iconName] =\n                            finalIcon;\n                    }\n                    return finalIcon;\n                });\n            }\n            else if (typeof loadedIcon === 'string') {\n                iconRegistry[isDefault ? `default:${iconName}` : iconName] = loadedIcon;\n                return loadedIcon;\n            }\n        }\n        return iconRequests[iconName];\n    };\n}\nfunction getIconFromStylesheet(iconName) {\n    if (!isClient)\n        return;\n    if (themeHasLoaded) {\n        return loadStylesheetIcon(iconName);\n    }\n    else {\n        return themeLoaded.then(() => {\n            return loadStylesheetIcon(iconName);\n        });\n    }\n}\nfunction loadStylesheetIcon(iconName) {\n    const cssVarIcon = documentStyles === null || documentStyles === void 0 ? void 0 : documentStyles.getPropertyValue(`--fk-icon-${iconName}`);\n    if (cssVarIcon) {\n        // if we have a matching icon in the CSS properties, then decode it\n        const icon = atob(cssVarIcon);\n        if (icon.startsWith('<svg')) {\n            iconRegistry[iconName] = icon;\n            return icon;\n        }\n    }\n    return undefined;\n}\n/**\n * Attempts to fetch a remote icon from the FormKit CDN\n * @param iconName - The string name of the icon\n * @public\n */\nfunction getRemoteIcon(iconName, iconLoaderUrl) {\n    const formkitVersion = FORMKIT_VERSION.startsWith('__')\n        ? 'latest'\n        : FORMKIT_VERSION;\n    const fetchUrl = typeof iconLoaderUrl === 'function'\n        ? iconLoaderUrl(iconName)\n        : `https://cdn.jsdelivr.net/npm/@formkit/icons@${formkitVersion}/dist/icons/${iconName}.svg`;\n    if (!isClient)\n        return undefined;\n    return fetch(`${fetchUrl}`)\n        .then(async (r) => {\n        const icon = await r.text();\n        if (icon.startsWith('<svg')) {\n            return icon;\n        }\n        return undefined;\n    })\n        .catch((e) => {\n        console.error(e);\n        return undefined;\n    });\n}\n/**\n * Loads icons for the matching `-icon` props on a given node\n */\nfunction loadIconPropIcons(node, iconHandler) {\n    const iconRegex = /^[a-zA-Z-]+(?:-icon|Icon)$/;\n    const iconProps = Object.keys(node.props).filter((prop) => {\n        return iconRegex.test(prop);\n    });\n    iconProps.forEach((sectionKey) => {\n        return loadPropIcon(node, iconHandler, sectionKey);\n    });\n}\n/**\n * Loads an icon from an icon-prop declaration eg. suffix-icon=\"settings\"\n */\nfunction loadPropIcon(node, iconHandler, sectionKey) {\n    const iconName = node.props[sectionKey];\n    const loadedIcon = iconHandler(iconName);\n    const rawIconProp = `_raw${sectionKey\n        .charAt(0)\n        .toUpperCase()}${sectionKey.slice(1)}`;\n    const clickHandlerProp = `on${sectionKey\n        .charAt(0)\n        .toUpperCase()}${sectionKey.slice(1)}Click`;\n    node.addProps([rawIconProp, clickHandlerProp]);\n    // listen for changes to the icon prop\n    node.on(`prop:${sectionKey}`, reloadIcon);\n    if (loadedIcon instanceof Promise) {\n        return loadedIcon.then((svg) => {\n            node.props[rawIconProp] = svg;\n        });\n    }\n    else {\n        node.props[rawIconProp] = loadedIcon;\n    }\n    return;\n}\n/**\n * reloads an icon when the prop value changes\n */\nfunction reloadIcon(event) {\n    var _a;\n    const node = event.origin;\n    const iconName = event.payload;\n    const iconHandler = (_a = node === null || node === void 0 ? void 0 : node.props) === null || _a === void 0 ? void 0 : _a.iconHandler;\n    const sectionKey = event.name.split(':')[1];\n    const rawIconProp = `_raw${sectionKey\n        .charAt(0)\n        .toUpperCase()}${sectionKey.slice(1)}`;\n    if (iconHandler && typeof iconHandler === 'function') {\n        const loadedIcon = iconHandler(iconName);\n        if (loadedIcon instanceof Promise) {\n            return loadedIcon.then((svg) => {\n                node.props[rawIconProp] = svg;\n            });\n        }\n        else {\n            node.props[rawIconProp] = loadedIcon;\n        }\n    }\n}\n\nexport { createIconHandler, createThemePlugin, generateClasses, iconRegistry };\n","import { errorHandler, warningHandler } from '@formkit/core';\n\n/**\n * Catalog of the error message codes in FormKit.\n * @public\n */\nconst errors = {\n    /**\n     * FormKit errors:\n     */\n    100: ({ data: node }) => `Only groups, lists, and forms can have children (${node.name}).`,\n    101: ({ data: node }) => `You cannot directly modify the store (${node.name}). See: https://formkit.com/advanced/core#message-store`,\n    102: ({ data: [node, property], }) => `You cannot directly assign node.${property} (${node.name})`,\n    103: ({ data: [operator] }) => `Schema expressions cannot start with an operator (${operator})`,\n    104: ({ data: [operator, expression] }) => `Schema expressions cannot end with an operator (${operator} in \"${expression}\")`,\n    105: ({ data: expression }) => `Invalid schema expression: ${expression}`,\n    106: ({ data: name }) => `Cannot submit because (${name}) is not in a form.`,\n    107: ({ data: [node, value] }) => `Cannot set ${node.name} to non object value: ${value}`,\n    108: ({ data: [node, value] }) => `Cannot set ${node.name} to non array value: ${value}`,\n    /**\n     * Input specific errors:\n     */\n    300: ({ data: [node] }) => `Cannot set behavior prop to overscroll (on ${node.name} input) when options prop is a function.`,\n    /**\n     * FormKit vue errors:\n     */\n    600: ({ data: node }) => `Unknown input type${typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''} (\"${node.name}\")`,\n    601: ({ data: node }) => `Input definition${typeof node.props.type === 'string' ? ' \"' + node.props.type + '\"' : ''} is missing a schema or component property (${node.name}).`,\n};\n/**\n * Catalog of the warning message codes in FormKit.\n * @public\n */\nconst warnings = {\n    /**\n     * Core warnings:\n     */\n    150: ({ data: fn }) => `Schema function \"${fn}()\" is not a valid function.`,\n    151: ({ data: id }) => `No form element with id: ${id}`,\n    152: ({ data: id }) => `No input element with id: ${id}`,\n    /**\n     * Input specific warnings:\n     */\n    350: ({ data: { node, inputType }, }) => `Invalid options prop for ${node.name} input (${inputType}). See https://formkit.com/inputs/${inputType}`,\n    /**\n     * Vue warnings:\n     */\n    650: 'Schema \"$get()\" must use the id of an input to access.',\n    651: ({ data: id }) => `Cannot setErrors() on \"${id}\" because no such id exists.`,\n    652: ({ data: id }) => `Cannot clearErrors() on \"${id}\" because no such id exists.`,\n    /**\n     * Deprecation warnings:\n     */\n    800: ({ data: name }) => `${name} is deprecated.`,\n};\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeErrors = (error, next) => {\n    if (error.code in errors) {\n        const err = errors[error.code];\n        error.message = typeof err === 'function' ? err(error) : err;\n    }\n    return next(error);\n};\nlet registered = false;\n/**\n * Register the dev handler (idempotent).\n *\n * @public\n */\nfunction register() {\n    if (!registered) {\n        errorHandler(decodeErrors);\n        warningHandler(decodeWarnings);\n        registered = true;\n    }\n}\n/**\n * Decodes an error that is being emitted and console logs it.\n * @param error - The error currently being handled\n * @param next - Call additional handlers\n * @returns\n */\nconst decodeWarnings = (warning, next) => {\n    if (warning.code in warnings) {\n        const warn = warnings[warning.code];\n        warning.message = typeof warn === 'function' ? warn(warning) : warn;\n    }\n    return next(warning);\n};\n\nexport { errors, register, warnings };\n","import { warn, getNode, watchRegistry, isNode, sugar, isDOM, isComponent as isComponent$1, isConditional, compile, error, createConfig, clearErrors, setErrors, submitForm, reset, createNode, createMessage, createClasses, generateClassList } from '@formkit/core';\nexport { clearErrors, errorHandler, reset, resetCount, setErrors, submitForm } from '@formkit/core';\nimport { defineComponent, getCurrentInstance, watch, watchEffect, reactive, onUnmounted, ref, isRef, createTextVNode, resolveComponent, h, markRaw, provide, inject, onMounted, computed, toRef, onBeforeUnmount, Suspense, nextTick, triggerRef, isReactive } from 'vue';\nimport { has, isPojo, cloneAny, extend, undefine, camel, kebab, nodeProps, only, except, oncePerTick, slugify, shallowClone, eq, isObject, token, empty } from '@formkit/utils';\nimport { runtimeProps, createSection, useSchema, localize, createLibraryPlugin, inputs } from '@formkit/inputs';\nimport * as defaultRules from '@formkit/rules';\nimport { createValidationPlugin } from '@formkit/validation';\nimport { createI18nPlugin, en } from '@formkit/i18n';\nimport { createThemePlugin, createIconHandler } from '@formkit/themes';\nimport { createObserver } from '@formkit/observer';\nimport { register } from '@formkit/dev';\n\n/**\n * A flag indicating if this is (likely) a server context.\n */\nconst isServer$2 = typeof window === 'undefined';\n/**\n * A map of Vue applications to a set of callbacks to be flushed after SSR is\n * complete.\n */\nconst ssrCompleteRegistry = new Map();\n/**\n * Flush all callbacks registered with onSSRComplete for a given app.\n * @param app - The Vue application.\n * @public\n */\nfunction ssrComplete(app) {\n    if (!isServer$2)\n        return;\n    const callbacks = ssrCompleteRegistry.get(app);\n    if (!callbacks)\n        return;\n    for (const callback of callbacks) {\n        callback();\n    }\n    callbacks.clear();\n    ssrCompleteRegistry.delete(app);\n}\n/**\n * Register a callback for when SSR is complete. No-op if not in a server\n * context.\n * @param app - The Vue application.\n * @param callback - The callback to be called after SSR is complete.\n * @public\n */\nfunction onSSRComplete(app, callback) {\n    var _a;\n    if (!isServer$2 || !app)\n        return;\n    if (!ssrCompleteRegistry.has(app))\n        ssrCompleteRegistry.set(app, new Set());\n    (_a = ssrCompleteRegistry.get(app)) === null || _a === void 0 ? void 0 : _a.add(callback);\n}\n\n/**\n * A simple flag to tell if we are running on the server or not.\n */\nconst isServer$1 = typeof window === 'undefined';\n/**\n * A registry of memoized schemas (in JSON) to their respective render function\n * and provider registry.\n */\nconst memo = {};\n/**\n * A map of memoized keys to how many instances of that memo are currently in\n * use.\n */\nconst memoKeys = {};\n/**\n * This object represents the current component instance during render. It is\n * critical for linking the current instance to the data required for render.\n */\nlet instanceKey;\n/**\n * A registry of scoped data produced during runtime that is keyed by the\n * instance object. For example data from: for-loop instances and slot data.\n */\n// NOTE: This is a hack to get around the fact that the TS compiler doesn't\n// understand WeakMap's allowing us to use a object as a keys, see:\n// https://github.com/microsoft/TypeScript/issues/52534\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst instanceScopes = new WeakMap();\n/**\n * Indicates the a section of the schema is raw.\n */\nconst raw = '__raw__';\n/**\n * Is a class prop.\n */\nconst isClassProp = /[a-zA-Z0-9\\-][cC]lass$/;\n/**\n * Returns a reference as a placeholder to a specific location on an object.\n * @param data - A reactive data object\n * @param token - A dot-syntax string representing the object path\n * @returns\n */\nfunction getRef(token, data) {\n    const value = ref(null);\n    if (token === 'get') {\n        const nodeRefs = {};\n        value.value = get.bind(null, nodeRefs);\n        return value;\n    }\n    const path = token.split('.');\n    watchEffect(() => {\n        value.value = getValue(isRef(data) ? data.value : data, path);\n    });\n    return value;\n}\n/**\n * Returns a value inside a set of data objects.\n * @param sets - An array of objects to search through\n * @param path - A array of string paths easily produced by split()\n * @returns\n */\nfunction getValue(set, path) {\n    if (Array.isArray(set)) {\n        for (const subset of set) {\n            const value = subset !== false && getValue(subset, path);\n            if (value !== undefined)\n                return value;\n        }\n        return undefined;\n    }\n    let foundValue = undefined;\n    let obj = set;\n    for (const i in path) {\n        const key = path[i];\n        if (typeof obj !== 'object' || obj === null) {\n            foundValue = undefined;\n            break;\n        }\n        const currentValue = obj[key];\n        if (Number(i) === path.length - 1 && currentValue !== undefined) {\n            // When the value is a function, we need to bind the `this` value\n            // before providing this back to the compiler.\n            foundValue =\n                typeof currentValue === 'function'\n                    ? currentValue.bind(obj)\n                    : currentValue;\n            break;\n        }\n        obj = currentValue;\n    }\n    return foundValue;\n}\n/**\n * Get the node from the global registry\n * @param id - A dot-syntax string where the node is located.\n */\nfunction get(nodeRefs, id) {\n    if (typeof id !== 'string')\n        return warn(650);\n    if (!(id in nodeRefs))\n        nodeRefs[id] = ref(undefined);\n    if (nodeRefs[id].value === undefined) {\n        nodeRefs[id].value = null;\n        const root = getNode(id);\n        if (root)\n            nodeRefs[id].value = root.context;\n        watchRegistry(id, ({ payload: node }) => {\n            nodeRefs[id].value = isNode(node) ? node.context : node;\n        });\n    }\n    return nodeRefs[id].value;\n}\n/**\n *\n * @param library - A library of concrete components to use\n * @param schema -\n * @returns\n */\nfunction parseSchema(library, schema, memoKey) {\n    /**\n     * Given an if/then/else schema node, pre-compile the node and return the\n     * artifacts for the render function.\n     * @param data - The schema context object\n     * @param library - The available components\n     * @param node - The node to parse\n     */\n    function parseCondition(library, node) {\n        const condition = provider(compile(node.if), { if: true });\n        const children = createElements(library, node.then);\n        const alternate = node.else ? createElements(library, node.else) : null;\n        return [condition, children, alternate];\n    }\n    /**\n     * Parses a conditional if/then/else attribute statement.\n     * @param data - The data object\n     * @param attr - The attribute\n     * @param _default - The default value\n     * @returns\n     */\n    function parseConditionAttr(attr, _default) {\n        var _a, _b;\n        const condition = provider(compile(attr.if));\n        let b = () => _default;\n        let a = () => _default;\n        if (typeof attr.then === 'object') {\n            a = parseAttrs(attr.then, undefined);\n        }\n        else if (typeof attr.then === 'string' && ((_a = attr.then) === null || _a === void 0 ? void 0 : _a.startsWith('$'))) {\n            a = provider(compile(attr.then));\n        }\n        else {\n            a = () => attr.then;\n        }\n        if (has(attr, 'else')) {\n            if (typeof attr.else === 'object') {\n                b = parseAttrs(attr.else);\n            }\n            else if (typeof attr.else === 'string' && ((_b = attr.else) === null || _b === void 0 ? void 0 : _b.startsWith('$'))) {\n                b = provider(compile(attr.else));\n            }\n            else {\n                b = () => attr.else;\n            }\n        }\n        return () => (condition() ? a() : b());\n    }\n    /**\n     * Parse attributes for dynamic content.\n     * @param attrs - Object of attributes\n     * @returns\n     */\n    function parseAttrs(unparsedAttrs, bindExp, _default = {}) {\n        const explicitAttrs = new Set(Object.keys(unparsedAttrs || {}));\n        const boundAttrs = bindExp ? provider(compile(bindExp)) : () => ({});\n        const setters = [\n            (attrs) => {\n                const bound = boundAttrs();\n                for (const attr in bound) {\n                    if (!explicitAttrs.has(attr)) {\n                        attrs[attr] = bound[attr];\n                    }\n                }\n            },\n        ];\n        if (unparsedAttrs) {\n            if (isConditional(unparsedAttrs)) {\n                // This is a root conditional object that must produce an object of\n                // attributes.\n                const condition = parseConditionAttr(unparsedAttrs, _default);\n                return condition;\n            }\n            // Some attributes are explicitly bound, we need to parse those ones\n            // using the compiler and create a dynamic \"setter\".\n            for (let attr in unparsedAttrs) {\n                const value = unparsedAttrs[attr];\n                let getValue;\n                const isStr = typeof value === 'string';\n                if (attr.startsWith(raw)) {\n                    // attributes prefixed with __raw__ should not be parsed\n                    attr = attr.substring(7);\n                    getValue = () => value;\n                }\n                else if (isStr &&\n                    value.startsWith('$') &&\n                    value.length > 1 &&\n                    !(value.startsWith('$reset') && isClassProp.test(attr))) {\n                    // Most attribute values starting with $ should be compiled\n                    // -class attributes starting with `$reset` should not be compiled\n                    getValue = provider(compile(value));\n                }\n                else if (typeof value === 'object' && isConditional(value)) {\n                    // Conditional attrs require further processing\n                    getValue = parseConditionAttr(value, undefined);\n                }\n                else if (typeof value === 'object' && isPojo(value)) {\n                    // Sub-parse pojos\n                    getValue = parseAttrs(value);\n                }\n                else {\n                    // In all other cases, the value is static\n                    getValue = () => value;\n                }\n                setters.push((attrs) => {\n                    attrs[attr] = getValue();\n                });\n            }\n        }\n        return () => {\n            const attrs = Array.isArray(unparsedAttrs) ? [] : {};\n            setters.forEach((setter) => setter(attrs));\n            return attrs;\n        };\n    }\n    /**\n     * Given a single schema node, parse it and extract the value.\n     * @param data - A state object provided to each node\n     * @param node - The schema node being parsed\n     * @returns\n     */\n    function parseNode(library, _node) {\n        let element = null;\n        let attrs = () => null;\n        let condition = false;\n        let children = null;\n        let alternate = null;\n        let iterator = null;\n        let resolve = false;\n        const node = sugar(_node);\n        if (isDOM(node)) {\n            // This is an actual HTML DOM element\n            element = node.$el;\n            attrs =\n                node.$el !== 'text' ? parseAttrs(node.attrs, node.bind) : () => null;\n        }\n        else if (isComponent$1(node)) {\n            // This is a Vue Component\n            if (typeof node.$cmp === 'string') {\n                if (has(library, node.$cmp)) {\n                    element = library[node.$cmp];\n                }\n                else {\n                    element = node.$cmp;\n                    resolve = true;\n                }\n            }\n            else {\n                // in this case it must be an actual component\n                element = node.$cmp;\n            }\n            attrs = parseAttrs(node.props, node.bind);\n        }\n        else if (isConditional(node)) {\n            [condition, children, alternate] = parseCondition(library, node);\n        }\n        // This is the same as a \"v-if\" statement — not an if/else statement\n        if (!isConditional(node) && 'if' in node) {\n            condition = provider(compile(node.if));\n        }\n        else if (!isConditional(node) && element === null) {\n            // In this odd case our element is actually a partial and\n            // we only want to render the children.\n            condition = () => true;\n        }\n        // Compile children down to a function\n        if ('children' in node && node.children) {\n            if (typeof node.children === 'string') {\n                // We are dealing with a raw string value\n                if (node.children.startsWith('$slots.')) {\n                    // this is a lone text node, turn it into a slot\n                    element = element === 'text' ? 'slot' : element;\n                    children = provider(compile(node.children));\n                }\n                else if (node.children.startsWith('$') && node.children.length > 1) {\n                    const value = provider(compile(node.children));\n                    children = () => String(value());\n                }\n                else {\n                    children = () => String(node.children);\n                }\n            }\n            else if (Array.isArray(node.children)) {\n                // We are dealing with node sub-children\n                children = createElements(library, node.children);\n            }\n            else {\n                // This is a conditional if/else clause\n                const [childCondition, c, a] = parseCondition(library, node.children);\n                children = (iterationData) => childCondition && childCondition()\n                    ? c && c(iterationData)\n                    : a && a(iterationData);\n            }\n        }\n        if (isComponent$1(node)) {\n            if (children) {\n                // Children of components need to be provided as an object of slots\n                // so we provide an object with the default slot provided as children.\n                // We also create a new scope for this default slot, and then on each\n                // render pass the scoped slot props to the scope.\n                const produceChildren = children;\n                children = (iterationData) => {\n                    return {\n                        default(slotData, key) {\n                            var _a, _b, _c, _d;\n                            // We need to switch the current instance key back to the one that\n                            // originally called this component's render function.\n                            const currentKey = instanceKey;\n                            if (key)\n                                instanceKey = key;\n                            if (slotData)\n                                (_a = instanceScopes.get(instanceKey)) === null || _a === void 0 ? void 0 : _a.unshift(slotData);\n                            if (iterationData)\n                                (_b = instanceScopes.get(instanceKey)) === null || _b === void 0 ? void 0 : _b.unshift(iterationData);\n                            const c = produceChildren(iterationData);\n                            // Ensure our instance key never changed during runtime\n                            if (slotData)\n                                (_c = instanceScopes.get(instanceKey)) === null || _c === void 0 ? void 0 : _c.shift();\n                            if (iterationData)\n                                (_d = instanceScopes.get(instanceKey)) === null || _d === void 0 ? void 0 : _d.shift();\n                            instanceKey = currentKey;\n                            return c;\n                        },\n                    };\n                };\n                children.slot = true;\n            }\n            else {\n                // If we dont have any children, we still need to provide an object\n                // instead of an empty array (which raises a warning in vue)\n                children = () => ({});\n            }\n        }\n        // Compile the for loop down\n        if ('for' in node && node.for) {\n            const values = node.for.length === 3 ? node.for[2] : node.for[1];\n            const getValues = typeof values === 'string' && values.startsWith('$')\n                ? provider(compile(values))\n                : () => values;\n            iterator = [\n                getValues,\n                node.for[0],\n                node.for.length === 3 ? String(node.for[1]) : null,\n            ];\n        }\n        return [condition, element, attrs, children, alternate, iterator, resolve];\n    }\n    /**\n     * Given a particular function that produces children, ensure that the second\n     * argument of all these slots is the original instance key being used to\n     * render the slots.\n     * @param children - The children() function that will produce slots\n     */\n    function createSlots(children, iterationData) {\n        const slots = children(iterationData);\n        const currentKey = instanceKey;\n        return Object.keys(slots).reduce((allSlots, slotName) => {\n            const slotFn = slots && slots[slotName];\n            allSlots[slotName] = (data) => {\n                return (slotFn && slotFn(data, currentKey)) || null;\n            };\n            return allSlots;\n        }, {});\n    }\n    /**\n     * Creates an element\n     * @param data - The context data available to the node\n     * @param node - The schema node to render\n     * @returns\n     */\n    function createElement(library, node) {\n        // Parses the schema node into pertinent parts\n        const [condition, element, attrs, children, alternate, iterator, resolve] = parseNode(library, node);\n        // This is a sub-render function (called within a render function). It must\n        // only use pre-compiled features, and be organized in the most efficient\n        // manner possible.\n        let createNodes = ((iterationData) => {\n            if (condition && element === null && children) {\n                // Handle conditional if/then statements\n                return condition()\n                    ? children(iterationData)\n                    : alternate && alternate(iterationData);\n            }\n            if (element && (!condition || condition())) {\n                // handle text nodes\n                if (element === 'text' && children) {\n                    return createTextVNode(String(children()));\n                }\n                // Handle lone slots\n                if (element === 'slot' && children)\n                    return children(iterationData);\n                // Handle resolving components\n                const el = resolve ? resolveComponent(element) : element;\n                // If we are rendering slots as children, ensure their instanceKey is properly added\n                const slots = (children === null || children === void 0 ? void 0 : children.slot)\n                    ? createSlots(children, iterationData)\n                    : null;\n                // Handle dom elements and components\n                return h(el, attrs(), (slots || (children ? children(iterationData) : [])));\n            }\n            return typeof alternate === 'function'\n                ? alternate(iterationData)\n                : alternate;\n        });\n        if (iterator) {\n            const repeatedNode = createNodes;\n            const [getValues, valueName, keyName] = iterator;\n            createNodes = (() => {\n                const _v = getValues();\n                const values = Number.isFinite(_v)\n                    ? Array(Number(_v))\n                        .fill(0)\n                        .map((_, i) => i)\n                    : _v;\n                const fragment = [];\n                if (typeof values !== 'object')\n                    return null;\n                const instanceScope = instanceScopes.get(instanceKey) || [];\n                const isArray = Array.isArray(values);\n                for (const key in values) {\n                    if (isArray && key in Array.prototype)\n                        continue; // Fix #299\n                    const iterationData = Object.defineProperty({\n                        ...instanceScope.reduce((previousIterationData, scopedData) => {\n                            if (previousIterationData.__idata) {\n                                return { ...previousIterationData, ...scopedData };\n                            }\n                            return scopedData;\n                        }, {}),\n                        [valueName]: values[key],\n                        ...(keyName !== null\n                            ? { [keyName]: isArray ? Number(key) : key }\n                            : {}),\n                    }, '__idata', { enumerable: false, value: true });\n                    instanceScope.unshift(iterationData);\n                    fragment.push(repeatedNode.bind(null, iterationData)());\n                    instanceScope.shift();\n                }\n                return fragment;\n            });\n        }\n        return createNodes;\n    }\n    /**\n     * Given a schema, parse it and return the resulting renderable nodes.\n     * @param data - The schema context object\n     * @param library - The available components\n     * @param node - The node to parse\n     * @returns\n     */\n    function createElements(library, schema) {\n        if (Array.isArray(schema)) {\n            const els = schema.map(createElement.bind(null, library));\n            return (iterationData) => els.map((element) => element(iterationData));\n        }\n        // Single node to render\n        const element = createElement(library, schema);\n        return (iterationData) => element(iterationData);\n    }\n    /**\n     * Data providers produced as a result of the compiler.\n     */\n    const providers = [];\n    /**\n     * Append the requisite compiler provider and return the compiled function.\n     * @param compiled - A compiled function\n     * @returns\n     */\n    function provider(compiled, hints = {}) {\n        const compiledFns = new WeakMap();\n        providers.push((callback, key) => {\n            compiledFns.set(key, compiled.provide((tokens) => callback(tokens, hints)));\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return () => compiledFns.get(instanceKey)();\n    }\n    /**\n     * Creates a new instance of a given schema — this either comes from a\n     * memoized copy of the parsed schema or a freshly parsed version. An object\n     * instance key, and dataProvider functions are passed in.\n     * @param providerCallback - A function that is called for each required provider\n     * @param key - a object representing the current instance\n     */\n    function createInstance(providerCallback, key) {\n        var _a;\n        memoKey !== null && memoKey !== void 0 ? memoKey : (memoKey = JSON.stringify(schema));\n        const [render, compiledProviders] = has(memo, memoKey)\n            ? memo[memoKey]\n            : [createElements(library, schema), providers];\n        if (!isServer$1) {\n            (_a = memoKeys[memoKey]) !== null && _a !== void 0 ? _a : (memoKeys[memoKey] = 0);\n            memoKeys[memoKey]++;\n            memo[memoKey] = [render, compiledProviders];\n        }\n        compiledProviders.forEach((compiledProvider) => {\n            compiledProvider(providerCallback, key);\n        });\n        return () => {\n            // Set the instance key for this pass of rendering.\n            instanceKey = key;\n            return render();\n        };\n    }\n    return createInstance;\n}\n/**\n * Checks the current runtime scope for data.\n * @param token - The token to lookup in the current scope\n * @param defaultValue - The default ref value to use if no scope is found.\n */\nfunction useScope(token, defaultValue) {\n    const scopedData = instanceScopes.get(instanceKey) || [];\n    let scopedValue = undefined;\n    if (scopedData.length) {\n        scopedValue = getValue(scopedData, token.split('.'));\n    }\n    return scopedValue === undefined ? defaultValue : scopedValue;\n}\n/**\n * Get the current scoped data and flatten it.\n */\nfunction slotData(data, key) {\n    return new Proxy(data, {\n        get(...args) {\n            let data = undefined;\n            const property = args[1];\n            if (typeof property === 'string') {\n                const prevKey = instanceKey;\n                instanceKey = key;\n                data = useScope(property, undefined);\n                instanceKey = prevKey;\n            }\n            return data !== undefined ? data : Reflect.get(...args);\n        },\n    });\n}\n/**\n * Provides data to a parsed schema.\n * @param provider - The SchemaProvider (output of calling parseSchema)\n * @param data - Data to fetch values from\n * @returns\n */\nfunction createRenderFn(instanceCreator, data, instanceKey) {\n    return instanceCreator((requirements, hints = {}) => {\n        return requirements.reduce((tokens, token) => {\n            if (token.startsWith('slots.')) {\n                const slot = token.substring(6);\n                const hasSlot = () => data.slots &&\n                    has(data.slots, slot) &&\n                    typeof data.slots[slot] === 'function';\n                if (hints.if) {\n                    // If statement — dont render the slot, check if it exists\n                    tokens[token] = hasSlot;\n                }\n                else if (data.slots) {\n                    // Render the slot with current scope data\n                    const scopedData = slotData(data, instanceKey);\n                    tokens[token] = () => hasSlot() ? data.slots[slot](scopedData) : null;\n                }\n            }\n            else {\n                const value = getRef(token, data);\n                tokens[token] = () => useScope(token, value.value);\n            }\n            return tokens;\n        }, {});\n    }, instanceKey);\n}\n/**\n * Removes the schema from the memo and cleans up the instance scope.\n * @param schema - The schema to remove from memo.\n * @param instanceKey - The instance key to remove.\n */\nfunction clean(schema, memoKey, instanceKey) {\n    memoKey !== null && memoKey !== void 0 ? memoKey : (memoKey = JSON.stringify(schema));\n    memoKeys[memoKey]--;\n    if (memoKeys[memoKey] === 0) {\n        delete memoKeys[memoKey];\n        const [, providers] = memo[memoKey];\n        delete memo[memoKey];\n        providers.length = 0;\n    }\n    instanceScopes.delete(instanceKey);\n}\n/**\n * The FormKitSchema vue component:\n *\n * @public\n */\nconst FormKitSchema = /* #__PURE__ */ defineComponent({\n    name: 'FormKitSchema',\n    props: {\n        schema: {\n            type: [Array, Object],\n            required: true,\n        },\n        data: {\n            type: Object,\n            default: () => ({}),\n        },\n        library: {\n            type: Object,\n            default: () => ({}),\n        },\n        memoKey: {\n            type: String,\n            required: false,\n        },\n    },\n    setup(props, context) {\n        var _a;\n        const instance = getCurrentInstance();\n        let instanceKey = {};\n        instanceScopes.set(instanceKey, []);\n        let provider = parseSchema(props.library, props.schema, props.memoKey);\n        let render;\n        let data;\n        // // Re-parse the schema if it changes:\n        if (!isServer$1) {\n            watch(() => props.schema, (newSchema, oldSchema) => {\n                var _a;\n                const oldKey = instanceKey;\n                instanceKey = {};\n                instanceScopes.set(instanceKey, []);\n                provider = parseSchema(props.library, props.schema, props.memoKey);\n                render = createRenderFn(provider, data, instanceKey);\n                if (newSchema === oldSchema) {\n                    ((_a = instance === null || instance === void 0 ? void 0 : instance.proxy) === null || _a === void 0 ? void 0 : _a.$forceUpdate)();\n                }\n                clean(props.schema, props.memoKey, oldKey);\n            }, { deep: true });\n        }\n        // // Watch the data object explicitly\n        watchEffect(() => {\n            var _a;\n            data = Object.assign(reactive((_a = props.data) !== null && _a !== void 0 ? _a : {}), {\n                slots: context.slots,\n            });\n            context.slots;\n            render = createRenderFn(provider, data, instanceKey);\n        });\n        /**\n         * Perform cleanup operations when the component is unmounted. This should\n         * remove any memory allocations that were made during the render process.\n         */\n        function cleanUp() {\n            // Perform cleanup operations\n            clean(props.schema, props.memoKey, instanceKey);\n            /* eslint-disable @typescript-eslint/no-non-null-assertion */\n            if (data.node)\n                data.node.destroy();\n            data.slots = null;\n            data = null;\n            render = null;\n            /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        }\n        // For browser rendering:\n        onUnmounted(cleanUp);\n        // For SSR rendering:\n        onSSRComplete((_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.appContext.app, cleanUp);\n        return () => (render ? render() : null);\n    },\n});\n\n/**\n * Flag to determine if we are running on the server.\n */\nconst isServer = typeof window === 'undefined';\n/**\n * The symbol that represents the formkit parent injection value.\n *\n * @public\n */\nconst parentSymbol = Symbol('FormKitParent');\n/**\n * This variable is set to the node that is currently having its schema created.\n *\n * @internal\n */\nlet currentSchemaNode = null;\n/**\n * Returns the node that is currently having its schema created.\n *\n * @public\n */\nconst getCurrentSchemaNode = () => currentSchemaNode;\n/**\n * The actual runtime setup function for the FormKit component.\n *\n * @param props - The props passed to the component.\n * @param context - The context passed to the component.\n */\nfunction FormKit(props, context) {\n    const node = useInput(props, context);\n    if (!node.props.definition)\n        error(600, node);\n    if (node.props.definition.component) {\n        return () => {\n            var _a;\n            return h((_a = node.props.definition) === null || _a === void 0 ? void 0 : _a.component, {\n                context: node.context,\n            }, { ...context.slots });\n        };\n    }\n    const schema = ref([]);\n    let memoKey = node.props.definition.schemaMemoKey;\n    const generateSchema = () => {\n        var _a, _b;\n        const schemaDefinition = (_b = (_a = node.props) === null || _a === void 0 ? void 0 : _a.definition) === null || _b === void 0 ? void 0 : _b.schema;\n        if (!schemaDefinition)\n            error(601, node);\n        if (typeof schemaDefinition === 'function') {\n            currentSchemaNode = node;\n            schema.value = schemaDefinition({ ...props.sectionsSchema });\n            currentSchemaNode = null;\n            if ((memoKey && props.sectionsSchema) ||\n                ('memoKey' in schemaDefinition &&\n                    typeof schemaDefinition.memoKey === 'string')) {\n                memoKey =\n                    (memoKey !== null && memoKey !== void 0 ? memoKey : schemaDefinition === null || schemaDefinition === void 0 ? void 0 : schemaDefinition.memoKey) +\n                        JSON.stringify(props.sectionsSchema);\n            }\n        }\n        else {\n            schema.value = schemaDefinition;\n        }\n    };\n    generateSchema();\n    // // If someone emits the schema event, we re-generate the schema\n    if (!isServer) {\n        node.on('schema', () => {\n            memoKey += '♻️';\n            generateSchema();\n        });\n    }\n    context.emit('node', node);\n    const definitionLibrary = node.props.definition.library;\n    const library = {\n        FormKit: markRaw(formkitComponent),\n        ...definitionLibrary,\n    };\n    // // Expose the FormKitNode to template refs.\n    context.expose({ node });\n    return () => h(FormKitSchema, { schema: schema.value, data: node.context, library, memoKey }, { ...context.slots });\n}\n/**\n * The root FormKit component. Use it to craft all inputs and structure of your\n * forms. For example:\n *\n * ```vue\n * <FormKit\n *  type=\"text\"\n *  label=\"Name\"\n *  help=\"Please enter your name\"\n *  validation=\"required|length:2\"\n * />\n * ```\n *\n * @public\n */\nconst formkitComponent = /* #__PURE__ */ defineComponent(FormKit, {\n    props: runtimeProps,\n    inheritAttrs: false,\n});\n\n/**\n * The symbol that represents the formkit’s root element injection value.\n *\n * @public\n */\nconst rootSymbol = Symbol();\n/**\n * The FormKitRoot wrapper component used to provide context to FormKit about\n * whether a FormKit input is booting in a Document or ShadowRoot. This is\n * generally only necessary when booting FormKit nodes in contexts that do not\n * have a document. For example, if running code like this:\n *\n * ```ts\n * document.getElementById(node.props.id)\n * ```\n *\n * does not work because the `document` is not available or is not in the same\n * scope, you can place a `<FormKitRoot>` component somewhere near the root of\n * of your shadowRoot and it will inform any FormKitNode child (at any depth)\n * that it is running in a shadow root. The \"root\" (`Document` or `ShadowRoot`)\n * will be made available to all child nodes at `node.context._root`\n *\n * @public\n */\nconst FormKitRoot = /* #__PURE__ */ defineComponent((_p, context) => {\n    const boundary = ref(null);\n    const showBody = ref(false);\n    const shadowRoot = ref(undefined);\n    const stopWatch = watch(boundary, (el) => {\n        let parent = el;\n        let root = null;\n        while ((parent = parent === null || parent === void 0 ? void 0 : parent.parentNode)) {\n            root = parent;\n            if (root instanceof ShadowRoot || root instanceof Document) {\n                foundRoot(root);\n                break;\n            }\n        }\n        stopWatch();\n        showBody.value = true;\n    });\n    provide(rootSymbol, shadowRoot);\n    function foundRoot(root) {\n        shadowRoot.value = root;\n    }\n    return () => showBody.value && context.slots.default\n        ? context.slots.default()\n        : h('template', { ref: boundary });\n});\n\n/**\n * The Create a new instance of the FormKit plugin for Vue.\n *\n * @param app - A Vue application\n * @param config - FormKit Vue plugin configuration options\n *\n * @internal\n */\nfunction createPlugin(app, options) {\n    app\n        .component(options.alias || 'FormKit', formkitComponent)\n        .component(options.schemaAlias || 'FormKitSchema', FormKitSchema);\n    return {\n        get: getNode,\n        setLocale: (locale) => {\n            var _a;\n            if ((_a = options.config) === null || _a === void 0 ? void 0 : _a.rootConfig) {\n                options.config.rootConfig.locale = locale;\n            }\n        },\n        clearErrors,\n        setErrors,\n        submit: submitForm,\n        reset,\n    };\n}\n/**\n * The symbol key for accessing the FormKit node options.\n *\n * @public\n */\nconst optionsSymbol = Symbol.for('FormKitOptions');\n/**\n * The symbol key for accessing FormKit root configuration.\n *\n * @public\n */\nconst configSymbol = Symbol.for('FormKitConfig');\n/**\n * Create the FormKit plugin.\n *\n * @public\n */\nconst plugin = {\n    install(app, _options) {\n        /**\n         * Extend the default configuration options.\n         */\n        const options = Object.assign({\n            alias: 'FormKit',\n            schemaAlias: 'FormKitSchema',\n        }, typeof _options === 'function' ? _options() : _options);\n        /**\n         * The root configuration options.\n         */\n        const rootConfig = createConfig(options.config || {});\n        /**\n         * We dont want to explicitly provide any \"config\" options, only a root\n         * config option — so here we override the existing config options.\n         */\n        options.config = { rootConfig };\n        /**\n         * Register the global $formkit plugin property.\n         */\n        app.config.globalProperties.$formkit = createPlugin(app, options);\n        /**\n         * Provide the config to the application for injection.\n         */\n        app.provide(optionsSymbol, options);\n        /**\n         * Provide the root config to the application.\n         */\n        app.provide(configSymbol, rootConfig);\n    },\n};\n\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Props that are extracted from the attrs object.\n * TODO: Currently local, this should probably exported to a inputs or another\n * package.\n */\nconst pseudoProps = [\n    'help',\n    'label',\n    'ignore',\n    'disabled',\n    'preserve',\n    /^preserve(-e|E)rrors/,\n    /^[a-z]+(?:-visibility|Visibility|-behavior|Behavior)$/,\n    /^[a-zA-Z-]+(?:-class|Class)$/,\n    'prefixIcon',\n    'suffixIcon',\n    /^[a-zA-Z-]+(?:-icon|Icon)$/,\n];\n/**\n * Given some props, map those props to individualized props internally.\n * @param node - A formkit node\n * @param props - Some props that may include a classes object\n */\nfunction classesToNodeProps(node, props) {\n    if (props.classes) {\n        Object.keys(props.classes).forEach((key) => {\n            if (typeof key === 'string') {\n                node.props[`_${key}Class`] = props.classes[key];\n                // We need to ensure Vue is aware that we want to actually observe the\n                // child values too, so we touch them here.\n                if (isObject(props.classes[key]) && key === 'inner')\n                    Object.values(props.classes[key]);\n            }\n        });\n    }\n}\n/**\n * Extracts known FormKit listeners.\n * @param props - Extract known FormKit listeners.\n * @returns\n */\nfunction onlyListeners(props) {\n    if (!props)\n        return {};\n    const knownListeners = ['Submit', 'SubmitRaw', 'SubmitInvalid'].reduce((listeners, listener) => {\n        const name = `on${listener}`;\n        if (name in props) {\n            if (typeof props[name] === 'function') {\n                listeners[name] = props[name];\n            }\n        }\n        return listeners;\n    }, {});\n    return knownListeners;\n}\n/**\n * A composable for creating a new FormKit node.\n *\n * @param type - The type of node (input, group, list)\n * @param attrs - The FormKit \"props\" — which is really the attrs list.\n *\n * @returns {@link @formkit/core#FormKitNode | FormKitNode}\n *\n * @public\n */\nfunction useInput(props, context, options = {}) {\n    var _a;\n    /**\n     * The configuration options, these are provided by either the plugin or by\n     * explicit props.\n     */\n    const config = Object.assign({}, inject(optionsSymbol) || {}, options);\n    /**\n     * The root element — generally this is either a Document or ShadowRoot.\n     */\n    const __root = inject(rootSymbol, ref(isBrowser ? document : undefined));\n    /**\n     * The current instance.\n     */\n    const instance = getCurrentInstance();\n    /**\n     * Extracts the listeners.\n     */\n    const listeners = onlyListeners(instance === null || instance === void 0 ? void 0 : instance.vnode.props);\n    /**\n     * Determines if the prop is v-modeled. Credit to:\n     * {@link https://github.com/LinusBorg | Thorsten Lünborg}\n     * for coming up with this solution.\n     */\n    const isVModeled = ['modelValue', 'model-value'].some((prop) => { var _a; return prop in ((_a = instance === null || instance === void 0 ? void 0 : instance.vnode.props) !== null && _a !== void 0 ? _a : {}); });\n    // Track if the input has mounted or not.\n    let isMounted = false;\n    onMounted(() => {\n        isMounted = true;\n    });\n    /**\n     * Determines if the object being passed as a v-model is reactive.\n     */\n    // const isReactiveVModel = isVModeled && isReactive(props.modelValue)\n    /**\n     * Define the initial component\n     */\n    const value = props.modelValue !== undefined\n        ? props.modelValue\n        : cloneAny(context.attrs.value);\n    /**\n     * Creates the node's initial props from the context, props, and definition\n     * @returns\n     */\n    function createInitialProps() {\n        var _a;\n        const initialProps = {\n            ...nodeProps(props),\n            ...listeners,\n            type: (_a = props.type) !== null && _a !== void 0 ? _a : 'text',\n            __root: __root.value,\n            __slots: context.slots,\n        };\n        const attrs = except(nodeProps(context.attrs), pseudoProps);\n        if (!attrs.key)\n            attrs.key = token();\n        initialProps.attrs = attrs;\n        const propValues = only(nodeProps(context.attrs), pseudoProps);\n        for (const propName in propValues) {\n            initialProps[camel(propName)] = propValues[propName];\n        }\n        const classesProps = { props: {} };\n        classesToNodeProps(classesProps, props);\n        Object.assign(initialProps, classesProps.props);\n        if (typeof initialProps.type !== 'string') {\n            initialProps.definition = initialProps.type;\n            delete initialProps.type;\n        }\n        return initialProps;\n    }\n    /**\n     * Create the FormKitNode.\n     */\n    const initialProps = createInitialProps();\n    /**\n     * The parent node.\n     */\n    const parent = initialProps.ignore\n        ? null\n        : props.parent || inject(parentSymbol, null);\n    const node = createNode(extend(config || {}, {\n        name: props.name || undefined,\n        value,\n        parent,\n        plugins: (config.plugins || []).concat((_a = props.plugins) !== null && _a !== void 0 ? _a : []),\n        config: props.config || {},\n        props: initialProps,\n        index: props.index,\n        sync: !!undefine(context.attrs.sync || context.attrs.dynamic),\n    }, false, true));\n    /**\n     * If no definition has been assigned at this point — we're out!\n     */\n    if (!node.props.definition)\n        error(600, node);\n    /**\n     * All props that are bound \"late\" (after node creation) — are added to a set\n     * which is used to watch the context.attrs object.\n     */\n    const lateBoundProps = ref(new Set(node.props.definition.props || []));\n    /**\n     * Any additional props added at a \"later\" time should also be part of the\n     * late bound props.\n     */\n    node.on('added-props', ({ payload: lateProps }) => {\n        if (Array.isArray(lateProps))\n            lateProps.forEach((newProp) => lateBoundProps.value.add(newProp));\n    });\n    /**\n     * These prop names must be assigned.\n     */\n    const pseudoPropNames = computed(() => pseudoProps.concat([...lateBoundProps.value]).reduce((names, prop) => {\n        if (typeof prop === 'string') {\n            names.push(camel(prop));\n            names.push(kebab(prop));\n        }\n        else {\n            names.push(prop);\n        }\n        return names;\n    }, []));\n    /* Splits Classes object into discrete props for each key */\n    watchEffect(() => classesToNodeProps(node, props));\n    /**\n     * The props object already has properties even if they start as \"undefined\"\n     * so we can loop over them and individual watchEffect to prevent responding\n     * inappropriately.\n     */\n    const passThrough = nodeProps(props);\n    for (const prop in passThrough) {\n        watch(() => props[prop], () => {\n            if (props[prop] !== undefined) {\n                node.props[prop] = props[prop];\n            }\n        });\n    }\n    // Ensure the root always stays up to date.\n    watchEffect(() => {\n        node.props.__root = __root.value;\n    });\n    /**\n     * Watch \"pseudoProp\" attributes explicitly.\n     */\n    const attributeWatchers = new Set();\n    const possibleProps = nodeProps(context.attrs);\n    watchEffect(() => {\n        watchAttributes(only(possibleProps, pseudoPropNames.value));\n    });\n    /**\n     * Defines attributes that should be used as props.\n     * @param attrProps - Attributes that should be used as props instead\n     */\n    function watchAttributes(attrProps) {\n        attributeWatchers.forEach((stop) => {\n            stop();\n            attributeWatchers.delete(stop);\n        });\n        for (const prop in attrProps) {\n            const camelName = camel(prop);\n            attributeWatchers.add(watch(() => context.attrs[prop], () => {\n                node.props[camelName] = context.attrs[prop];\n            }));\n        }\n    }\n    /**\n     * Watch and dynamically set attribute values, those values that are not\n     * props and are not pseudoProps\n     */\n    watchEffect(() => {\n        const attrs = except(nodeProps(context.attrs), pseudoPropNames.value);\n        // An explicit exception to ensure naked \"multiple\" attributes appear on the\n        // outer wrapper as data-multiple=\"true\"\n        if ('multiple' in attrs)\n            attrs.multiple = undefine(attrs.multiple);\n        if (typeof attrs.onBlur === 'function') {\n            attrs.onBlur = oncePerTick(attrs.onBlur);\n        }\n        node.props.attrs = Object.assign({}, node.props.attrs || {}, attrs);\n    });\n    /**\n     * Add any/all \"prop\" errors to the store.\n     */\n    watchEffect(() => {\n        var _a;\n        const messages = ((_a = props.errors) !== null && _a !== void 0 ? _a : []).map((error) => createMessage({\n            key: slugify(error),\n            type: 'error',\n            value: error,\n            meta: { source: 'prop' },\n        }));\n        node.store.apply(messages, (message) => message.type === 'error' && message.meta.source === 'prop');\n    });\n    /**\n     * Add input errors.\n     */\n    if (node.type !== 'input') {\n        const sourceKey = `${node.name}-prop`;\n        watchEffect(() => {\n            var _a;\n            const inputErrors = (_a = props.inputErrors) !== null && _a !== void 0 ? _a : {};\n            const keys = Object.keys(inputErrors);\n            if (!keys.length)\n                node.clearErrors(true, sourceKey);\n            const messages = keys.reduce((messages, key) => {\n                let value = inputErrors[key];\n                if (typeof value === 'string')\n                    value = [value];\n                if (Array.isArray(value)) {\n                    messages[key] = value.map((error) => createMessage({\n                        key: error,\n                        type: 'error',\n                        value: error,\n                        meta: { source: sourceKey },\n                    }));\n                }\n                return messages;\n            }, {});\n            node.store.apply(messages, (message) => message.type === 'error' && message.meta.source === sourceKey);\n        });\n    }\n    /**\n     * Watch the config prop for any changes.\n     */\n    watchEffect(() => Object.assign(node.config, props.config));\n    /**\n     * Produce another parent object.\n     */\n    if (node.type !== 'input') {\n        provide(parentSymbol, node);\n    }\n    // let inputTimeout: number | undefined\n    let clonedValueBeforeVmodel = undefined;\n    /**\n     * Explicitly watch the input value, and emit changes (lazy)\n     */\n    node.on('modelUpdated', () => {\n        var _a, _b;\n        // Emit the values after commit\n        context.emit('inputRaw', (_a = node.context) === null || _a === void 0 ? void 0 : _a.value, node);\n        if (isMounted) {\n            context.emit('input', (_b = node.context) === null || _b === void 0 ? void 0 : _b.value, node);\n        }\n        if (isVModeled && node.context) {\n            clonedValueBeforeVmodel = cloneAny(node.value);\n            context.emit('update:modelValue', shallowClone(node.value));\n        }\n    });\n    /**\n     * Enabled support for v-model, using this for groups/lists is not recommended\n     */\n    if (isVModeled) {\n        watch(toRef(props, 'modelValue'), (value) => {\n            if (!eq(clonedValueBeforeVmodel, value)) {\n                node.input(value, false);\n            }\n        }, { deep: true });\n        /**\n         * On initialization, if the node’s value was updated (like in a plugin\n         * hook) then we should emit a `modelUpdated` event.\n         */\n        if (node.value !== value) {\n            node.emit('modelUpdated');\n        }\n    }\n    /**\n     * When this input shuts down, we need to \"delete\" the node too.\n     */\n    onBeforeUnmount(() => node.destroy());\n    return node;\n}\n\nlet totalCreated = 1;\n/**\n * Determine if the given object is a vue component.\n *\n * @param obj - Object or function\n * @returns\n * @public\n */\nfunction isComponent(obj) {\n    return ((typeof obj === 'function' && obj.length === 2) ||\n        (typeof obj === 'object' &&\n            !Array.isArray(obj) &&\n            !('$el' in obj) &&\n            !('$cmp' in obj) &&\n            !('if' in obj)));\n}\n/**\n * Creates a new input from schema or a Vue component with the \"standard\"\n * FormKit features in place such as labels, help text, validation messages, and\n * class support.\n *\n * @param schemaOrComponent - The actual schema of the input or the component.\n * @param definitionOptions - Any options in the FormKitTypeDefinition you want\n * to define.\n *\n * @returns {@link @formkit/core#FormKitTypeDefinition | FormKitTypeDefinition}\n *\n * @public\n */\nfunction createInput(schemaOrComponent, definitionOptions = {}) {\n    const definition = {\n        type: 'input',\n        ...definitionOptions,\n    };\n    let schema;\n    if (isComponent(schemaOrComponent)) {\n        const cmpName = `SchemaComponent${totalCreated++}`;\n        schema = createSection('input', () => ({\n            $cmp: cmpName,\n            props: {\n                context: '$node.context',\n            },\n        }));\n        definition.library = { [cmpName]: markRaw(schemaOrComponent) };\n    }\n    else if (typeof schemaOrComponent === 'function') {\n        schema = schemaOrComponent;\n    }\n    else {\n        schema = createSection('input', () => cloneAny(schemaOrComponent));\n    }\n    // Use the default wrapping schema\n    definition.schema = useSchema(schema || 'Schema undefined');\n    if (!definition.schemaMemoKey) {\n        definition.schemaMemoKey = `${Math.random()}`;\n    }\n    return definition;\n}\n\nfunction defineFormKitConfig(config) {\n    return () => (typeof config === 'function' ? config() : config);\n}\n\n/**\n * @internal\n */\nconst messages$1 = createSection('messages', () => ({\n    $el: 'ul',\n    if: '$fns.length($messages)',\n}));\n/**\n * @internal\n */\nconst message$1 = createSection('message', () => ({\n    $el: 'li',\n    for: ['message', '$messages'],\n    attrs: {\n        key: '$message.key',\n        id: `$id + '-' + $message.key`,\n        'data-message-type': '$message.type',\n    },\n}));\n/**\n * The actual schema to render for the messages.\n */\nconst definition$1 = /* #__PURE__ */ messages$1(/* #__PURE__ */ message$1('$message.value'));\n/**\n * Renders the messages for a parent node, or any node explicitly passed to it.\n * @public\n */\nconst FormKitMessages = /* #__PURE__ */ defineComponent({\n    props: {\n        node: {\n            type: Object,\n            required: false,\n        },\n        sectionsSchema: {\n            type: Object,\n            default: {},\n        },\n        defaultPosition: {\n            type: [String, Boolean],\n            default: false,\n        },\n    },\n    setup(props, context) {\n        const node = computed(() => {\n            return props.node || inject(parentSymbol, undefined);\n        });\n        watch(node, () => {\n            var _a;\n            if (((_a = node.value) === null || _a === void 0 ? void 0 : _a.context) && !undefine(props.defaultPosition)) {\n                node.value.context.defaultMessagePlacement = false;\n            }\n        }, { immediate: true });\n        const schema = definition$1(props.sectionsSchema || {});\n        const data = computed(() => {\n            var _a, _b, _c, _d, _e, _f;\n            return {\n                messages: ((_b = (_a = node.value) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.messages) || {},\n                fns: ((_d = (_c = node.value) === null || _c === void 0 ? void 0 : _c.context) === null || _d === void 0 ? void 0 : _d.fns) || {},\n                classes: ((_f = (_e = node.value) === null || _e === void 0 ? void 0 : _e.context) === null || _f === void 0 ? void 0 : _f.classes) || {},\n            };\n        });\n        return () => {\n            var _a;\n            return ((_a = node.value) === null || _a === void 0 ? void 0 : _a.context)\n                ? h(FormKitSchema, { schema, data: data.value }, { ...context.slots })\n                : null;\n        };\n    },\n});\n\nfunction useConfig(config) {\n    const options = Object.assign({\n        alias: 'FormKit',\n        schemaAlias: 'FormKitSchema',\n    }, typeof config === 'function' ? config() : config);\n    /**\n     * The root configuration options.\n     */\n    const rootConfig = createConfig(options.config || {});\n    /**\n     * We dont want to explicitly provide any \"config\" options, only a root\n     * config option — so here we override the existing config options.\n     */\n    options.config = { rootConfig };\n    /**\n     * Provide the config to children.\n     */\n    provide(optionsSymbol, options);\n    /**\n     * Provide the root config to the children.\n     */\n    provide(configSymbol, rootConfig);\n}\n/**\n * The FormKitProvider component provides the FormKit config to the children.\n *\n * @public\n */\nconst FormKitProvider = /* #__PURE__ */ defineComponent(function FormKitProvider(props, { slots }) {\n    const options = {};\n    if (props.config) {\n        useConfig(props.config);\n    }\n    return () => (slots.default ? slots.default(options) : null);\n}, { props: ['config'], name: 'FormKitProvider' });\n/**\n * The FormKitConfigLoader is an async component (meaning it needs a parent or\n * grandparent Suspense component to render) that loads the FormKit config and\n * provides it to the children.\n *\n * @internal\n */\nconst FormKitConfigLoader = /* #__PURE__ */ defineComponent(async function FormKitConfigLoader(props, context) {\n    var _a;\n    let config = {};\n    if (props.configFile) {\n        const configFile = await import(\n        /*@__formkit.config.ts__*/ /* @vite-ignore */ props.configFile);\n        config = 'default' in configFile ? configFile.default : configFile;\n    }\n    // Ensure this a factory function for runtimeConfig in nuxt.\n    if (typeof config === 'function') {\n        config = config();\n    }\n    /* @__default-config__ */\n    const useDefaultConfig = (_a = props.defaultConfig) !== null && _a !== void 0 ? _a : true;\n    if (useDefaultConfig) {\n        const { defaultConfig } = await Promise.resolve().then(function () { return defaultConfig$1; });\n        config = /* @__PURE__ */ defaultConfig(config);\n    }\n    /* @__default-config__ */\n    return () => h(FormKitProvider, { config }, context.slots);\n}, {\n    props: ['defaultConfig', 'configFile'],\n});\n/**\n * The FormKitLazyProvider component performs 2 HOC functions:\n *\n * 1. It checks if a FormKit config has already been provided, if it has it will\n *   render the children immediately.\n * 2. If a config has not been provided, it will render a Suspense component\n *    which will render the children once the config has been loaded by using\n *    the FormKitConfigLoader component.\n *\n * @public\n */\nconst FormKitLazyProvider = /* #__PURE__ */ defineComponent(function FormKitLazyProvider(props, context) {\n    const config = inject(optionsSymbol, null);\n    if (config) {\n        // If there is already a config provided, render the children immediately.\n        return () => { var _a; return (((_a = context.slots) === null || _a === void 0 ? void 0 : _a.default) ? context.slots.default() : null); };\n    }\n    const instance = getCurrentInstance();\n    if (instance.suspense) {\n        // If there is a suspense boundary already in place, we can render the\n        // config loader without another suspense boundary.\n        return () => h(FormKitConfigLoader, props, {\n            default: () => { var _a; return ((_a = context.slots) === null || _a === void 0 ? void 0 : _a.default) ? context.slots.default() : null; },\n        });\n    }\n    // If there is no suspense boundary, and no config, we render the suspense\n    // boundary and the config loader.\n    return () => h(Suspense, null, {\n        ...context.slots,\n        default: () => h(FormKitConfigLoader, props, context.slots),\n    });\n}, {\n    props: ['defaultConfig', 'configFile'],\n});\n\nconst summary = createSection('summary', () => ({\n    $el: 'div',\n    attrs: {\n        'aria-live': 'polite',\n    },\n}));\nconst summaryInner = createSection('summaryInner', () => ({\n    $el: 'div',\n    if: '$summaries.length && $showSummaries',\n}));\n/**\n * @internal\n */\nconst messages = createSection('messages', () => ({\n    $el: 'ul',\n    if: '$summaries.length && $showSummaries',\n}));\n/**\n * @internal\n */\nconst message = createSection('message', () => ({\n    $el: 'li',\n    for: ['summary', '$summaries'],\n    attrs: {\n        key: '$summary.key',\n        'data-message-type': '$summary.type',\n    },\n}));\nconst summaryHeader = createSection('summaryHeader', () => ({\n    $el: 'h2',\n    attrs: {\n        id: '$id',\n    },\n}));\nconst messageLink = createSection('messageLink', () => ({\n    $el: 'a',\n    attrs: {\n        id: '$summary.key',\n        href: '$: \"#\" + $summary.id',\n        onClick: '$jumpLink',\n    },\n}));\n/**\n * The actual schema to render for the messages.\n */\nconst definition = /* #__PURE__ */ summary(/* #__PURE__ */ summaryInner(/* #__PURE__ */ summaryHeader('$summaryHeader'), /* #__PURE__ */ messages(/* #__PURE__ */ message(/* #__PURE__ */ messageLink('$summary.message')))));\n/**\n * Renders the messages for a parent node, or any node explicitly passed to it.\n * @public\n */\nconst FormKitSummary = /* #__PURE__ */ defineComponent({\n    props: {\n        node: {\n            type: Object,\n            required: false,\n        },\n        sectionsSchema: {\n            type: Object,\n            default: {},\n        },\n    },\n    emits: {\n        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n        show: (_summaries) => true,\n    },\n    setup(props, context) {\n        var _a, _b;\n        const id = `summary-${token()}`;\n        const node = computed(() => {\n            return props.node || inject(parentSymbol, undefined);\n        });\n        if (!node)\n            throw new Error('FormKitSummary must have a FormKit parent or use the node prop.');\n        const summaryContexts = ref([]);\n        const showSummaries = ref(false);\n        const summaries = computed(() => {\n            const summarizedMessages = [];\n            summaryContexts.value.forEach((context) => {\n                for (const idx in context.messages) {\n                    const message = context.messages[idx];\n                    if (typeof message.value !== 'string')\n                        continue;\n                    summarizedMessages.push({\n                        message: message.value,\n                        id: context.id,\n                        key: `${context.id}-${message.key}`,\n                        type: message.type,\n                    });\n                }\n            });\n            return summarizedMessages;\n        });\n        const addContexts = () => {\n            var _a;\n            summaryContexts.value = [];\n            (_a = node.value) === null || _a === void 0 ? void 0 : _a.walk((child) => child.context && summaryContexts.value.push(child.context));\n        };\n        (_a = node.value) === null || _a === void 0 ? void 0 : _a.on('submit-raw', async () => {\n            var _a, _b;\n            addContexts();\n            if (summaries.value.length === 0)\n                return;\n            context.emit('show', summaries.value);\n            showSummaries.value = true;\n            await nextTick();\n            if (typeof window !== 'undefined') {\n                (_a = document.getElementById(id)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' });\n                if (summaries.value[0]) {\n                    (_b = document.getElementById(summaries.value[0].key)) === null || _b === void 0 ? void 0 : _b.focus();\n                }\n            }\n        });\n        (_b = node.value) === null || _b === void 0 ? void 0 : _b.on('child', addContexts);\n        function jumpLink(e) {\n            var _a, _b, _c;\n            if (e.target instanceof HTMLAnchorElement) {\n                e.preventDefault();\n                const id = (_a = e.target.getAttribute('href')) === null || _a === void 0 ? void 0 : _a.substring(1);\n                if (id) {\n                    (_b = document.getElementById(id)) === null || _b === void 0 ? void 0 : _b.scrollIntoView({ behavior: 'smooth' });\n                    (_c = document.getElementById(id)) === null || _c === void 0 ? void 0 : _c.focus();\n                }\n            }\n        }\n        localize('summaryHeader', 'There were errors in your form.')(node.value);\n        const schema = definition(props.sectionsSchema || {});\n        const data = computed(() => {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            return {\n                id,\n                fns: ((_b = (_a = node.value) === null || _a === void 0 ? void 0 : _a.context) === null || _b === void 0 ? void 0 : _b.fns) || {},\n                classes: ((_d = (_c = node.value) === null || _c === void 0 ? void 0 : _c.context) === null || _d === void 0 ? void 0 : _d.classes) || {},\n                summaries: summaries.value,\n                showSummaries: showSummaries.value,\n                summaryHeader: ((_h = (_g = (_f = (_e = node.value) === null || _e === void 0 ? void 0 : _e.context) === null || _f === void 0 ? void 0 : _f.ui) === null || _g === void 0 ? void 0 : _g.summaryHeader) === null || _h === void 0 ? void 0 : _h.value) || '',\n                jumpLink,\n            };\n        });\n        return () => {\n            var _a;\n            return ((_a = node.value) === null || _a === void 0 ? void 0 : _a.context)\n                ? h(FormKitSchema, { schema, data: data.value }, { ...context.slots })\n                : null;\n        };\n    },\n});\n\n/**\n * A plugin that creates Vue-specific context object on each given node.\n *\n * @param node - FormKitNode to create the context on.\n *\n * @public\n */\nconst vueBindings = function vueBindings(node) {\n    /**\n     * Start a validity counter on all blocking messages.\n     */\n    node.ledger.count('blocking', (m) => m.blocking);\n    const isValid = ref(!node.ledger.value('blocking'));\n    /**\n     * Start an error message counter.\n     */\n    node.ledger.count('errors', (m) => m.type === 'error');\n    const hasErrors = ref(!!node.ledger.value('errors'));\n    /**\n     * Keep track of the first time a Vue tick cycle has passed.\n     */\n    let hasTicked = false;\n    nextTick(() => {\n        hasTicked = true;\n    });\n    /**\n     * All messages with the visibility state set to true.\n     */\n    const availableMessages = reactive(node.store.reduce((store, message) => {\n        if (message.visible) {\n            store[message.key] = message;\n        }\n        return store;\n    }, {}));\n    /**\n     * A flag that determines when validation messages should be displayed.\n     */\n    const validationVisibility = ref(node.props.validationVisibility ||\n        (node.props.type === 'checkbox' ? 'dirty' : 'blur'));\n    node.on('prop:validationVisibility', ({ payload }) => {\n        validationVisibility.value = payload;\n    });\n    /**\n     * Keep track of if this input has ever shown validation errors.\n     */\n    const hasShownErrors = ref(validationVisibility.value === 'live');\n    /**\n     * An array of unique identifiers that should only be used for iterating\n     * inside a synced list.\n     */\n    const items = ref(node.children.map((child) => child.uid));\n    /**\n     * The current visibility state of validation messages.\n     */\n    const validationVisible = computed(() => {\n        if (!context.state)\n            return false;\n        if (context.state.submitted)\n            return true;\n        if (!hasShownErrors.value && !context.state.settled) {\n            return false;\n        }\n        switch (validationVisibility.value) {\n            case 'live':\n                return true;\n            case 'blur':\n                return context.state.blurred;\n            case 'dirty':\n                return context.state.dirty;\n            default:\n                return false;\n        }\n    });\n    /**\n     * Determines if the input should be considered \"complete\".\n     */\n    const isComplete = computed(() => {\n        return context && hasValidation.value\n            ? isValid.value && !hasErrors.value\n            : context.state.dirty && !empty(context.value);\n    });\n    /**\n     * If the input has validation rules or not.\n     */\n    const hasValidation = ref(Array.isArray(node.props.parsedRules) && node.props.parsedRules.length > 0);\n    node.on('prop:parsedRules', ({ payload: rules }) => {\n        hasValidation.value = Array.isArray(rules) && rules.length > 0;\n    });\n    /**\n     * All messages that are currently on display to an end user. This changes\n     * based on the current message type visibility, like errorVisibility.\n     */\n    const messages = computed(() => {\n        const visibleMessages = {};\n        for (const key in availableMessages) {\n            const message = availableMessages[key];\n            if (message.type !== 'validation' || validationVisible.value) {\n                visibleMessages[key] = message;\n            }\n        }\n        return visibleMessages;\n    });\n    /**\n     * UI Messages.\n     */\n    const ui = reactive(node.store.reduce((messages, message) => {\n        if (message.type === 'ui' && message.visible)\n            messages[message.key] = message;\n        return messages;\n    }, {}));\n    /**\n     * This is the reactive data object that is provided to all schemas and\n     * forms. It is a subset of data in the core node object.\n     */\n    const cachedClasses = reactive({});\n    const classes = new Proxy(cachedClasses, {\n        get(...args) {\n            const [target, property] = args;\n            let className = Reflect.get(...args);\n            if (!className && typeof property === 'string') {\n                if (!has(target, property) && !property.startsWith('__v')) {\n                    const observedNode = createObserver(node);\n                    observedNode.watch((node) => {\n                        const rootClasses = typeof node.config.rootClasses === 'function'\n                            ? node.config.rootClasses(property, node)\n                            : {};\n                        const globalConfigClasses = node.config.classes\n                            ? createClasses(property, node, node.config.classes[property])\n                            : {};\n                        const classesPropClasses = createClasses(property, node, node.props[`_${property}Class`]);\n                        const sectionPropClasses = createClasses(property, node, node.props[`${property}Class`]);\n                        className = generateClassList(node, property, rootClasses, globalConfigClasses, classesPropClasses, sectionPropClasses);\n                        target[property] = className !== null && className !== void 0 ? className : '';\n                    });\n                }\n            }\n            return className;\n        },\n    });\n    const describedBy = computed(() => {\n        const describers = [];\n        if (context.help) {\n            describers.push(`help-${node.props.id}`);\n        }\n        for (const key in messages.value) {\n            describers.push(`${node.props.id}-${key}`);\n        }\n        return describers.length ? describers.join(' ') : undefined;\n    });\n    const value = ref(node.value);\n    const _value = ref(node.value);\n    const context = reactive({\n        _value,\n        attrs: node.props.attrs,\n        disabled: node.props.disabled,\n        describedBy,\n        fns: {\n            length: (obj) => Object.keys(obj).length,\n            number: (value) => Number(value),\n            string: (value) => String(value),\n            json: (value) => JSON.stringify(value),\n            eq,\n        },\n        handlers: {\n            blur: (e) => {\n                if (!node)\n                    return;\n                node.store.set(createMessage({ key: 'blurred', visible: false, value: true }));\n                if (typeof node.props.attrs.onBlur === 'function') {\n                    node.props.attrs.onBlur(e);\n                }\n            },\n            touch: () => {\n                var _a;\n                const doCompare = context.dirtyBehavior === 'compare';\n                if (((_a = node.store.dirty) === null || _a === void 0 ? void 0 : _a.value) && !doCompare)\n                    return;\n                const isDirty = !eq(node.props._init, node._value);\n                if (!isDirty && !doCompare)\n                    return;\n                node.store.set(createMessage({ key: 'dirty', visible: false, value: isDirty }));\n            },\n            DOMInput: (e) => {\n                node.input(e.target.value);\n                node.emit('dom-input-event', e);\n            },\n        },\n        help: node.props.help,\n        id: node.props.id,\n        items,\n        label: node.props.label,\n        messages,\n        node: markRaw(node),\n        options: node.props.options,\n        defaultMessagePlacement: true,\n        slots: node.props.__slots,\n        state: {\n            blurred: false,\n            complete: isComplete,\n            dirty: false,\n            empty: empty(value),\n            submitted: false,\n            settled: node.isSettled,\n            valid: isValid,\n            errors: hasErrors,\n            rules: hasValidation,\n            validationVisible,\n        },\n        type: node.props.type,\n        family: node.props.family,\n        ui,\n        value,\n        classes,\n    });\n    /**\n     * Ensure the context object is properly configured after booting up.\n     */\n    node.on('created', () => {\n        if (!eq(context.value, node.value)) {\n            _value.value = node.value;\n            value.value = node.value;\n            triggerRef(value);\n            triggerRef(_value);\n        }\n        (async () => {\n            await node.settled;\n            if (node)\n                node.props._init = cloneAny(node.value);\n        })();\n    });\n    /**\n     * Sets the settled state.\n     */\n    node.on('settled', ({ payload: isSettled }) => {\n        context.state.settled = isSettled;\n    });\n    /**\n     * Observes node.props properties explicitly and updates them in the context\n     * object.\n     * @param observe - Props to observe and register as context data.\n     */\n    function observeProps(observe) {\n        observe.forEach((prop) => {\n            prop = camel(prop);\n            if (!has(context, prop)) {\n                context[prop] = node.props[prop];\n            }\n            node.on(`prop:${prop}`, ({ payload }) => {\n                context[prop] = payload;\n            });\n        });\n    }\n    /**\n     * We use a node observer to individually observe node props.\n     */\n    const rootProps = () => {\n        const props = [\n            '__root',\n            'help',\n            'label',\n            'disabled',\n            'options',\n            'type',\n            'attrs',\n            'preserve',\n            'preserveErrors',\n            'id',\n            'dirtyBehavior',\n        ];\n        const iconPattern = /^[a-zA-Z-]+(?:-icon|Icon)$/;\n        const matchingProps = Object.keys(node.props).filter((prop) => {\n            return iconPattern.test(prop);\n        });\n        return props.concat(matchingProps);\n    };\n    observeProps(rootProps());\n    /**\n     * Once the input is defined, deal with it.\n     * @param definition - Type definition.\n     */\n    function definedAs(definition) {\n        if (definition.props)\n            observeProps(definition.props);\n    }\n    node.props.definition && definedAs(node.props.definition);\n    /**\n     * When new props are added to the core node as \"props\" (ie not attrs) then\n     * we automatically need to start tracking them here.\n     */\n    node.on('added-props', ({ payload }) => observeProps(payload));\n    /**\n     * Watch for input events from core.\n     */\n    node.on('input', ({ payload }) => {\n        if (node.type !== 'input' && !isRef(payload) && !isReactive(payload)) {\n            _value.value = shallowClone(payload);\n        }\n        else {\n            _value.value = payload;\n            triggerRef(_value);\n        }\n    });\n    /**\n     * Model updates from core. This is the raw value and should emitted as a\n     * model update even if the value did not update internally. Why? Because\n     * the model that created this event may have not be the same value as our\n     * internal value.\n     *\n     * See test: \"emits a modelUpdated event even when the value results in the\n     * same value\"\n     */\n    node.on('commitRaw', ({ payload }) => {\n        if (node.type !== 'input' && !isRef(payload) && !isReactive(payload)) {\n            value.value = _value.value = shallowClone(payload);\n        }\n        else {\n            value.value = _value.value = payload;\n            triggerRef(value);\n        }\n        node.emit('modelUpdated');\n    });\n    /**\n     * Watch for input commits from core.\n     */\n    node.on('commit', ({ payload }) => {\n        // The input is dirty after a value has been input by a user\n        if ((!context.state.dirty || context.dirtyBehavior === 'compare') &&\n            node.isCreated &&\n            hasTicked) {\n            context.handlers.touch();\n        }\n        if (isComplete &&\n            node.type === 'input' &&\n            hasErrors.value &&\n            !undefine(node.props.preserveErrors)) {\n            node.store.filter((message) => { var _a; return !(message.type === 'error' && ((_a = message.meta) === null || _a === void 0 ? void 0 : _a.autoClear) === true); });\n        }\n        if (node.type === 'list' && node.sync) {\n            items.value = node.children.map((child) => child.uid);\n        }\n        context.state.empty = empty(payload);\n    });\n    /**\n     * Update the local state in response to messages.\n     * @param message - A formkit message\n     */\n    const updateState = async (message) => {\n        if (message.type === 'ui' &&\n            message.visible &&\n            !message.meta.showAsMessage) {\n            ui[message.key] = message;\n        }\n        else if (message.visible) {\n            availableMessages[message.key] = message;\n        }\n        else if (message.type === 'state') {\n            // await node.settled\n            context.state[message.key] = !!message.value;\n        }\n    };\n    /**\n     * Listen to message events and modify the local message data values.\n     */\n    node.on('message-added', (e) => updateState(e.payload));\n    node.on('message-updated', (e) => updateState(e.payload));\n    node.on('message-removed', ({ payload: message }) => {\n        delete ui[message.key];\n        delete availableMessages[message.key];\n        delete context.state[message.key];\n    });\n    node.on('settled:blocking', () => {\n        isValid.value = true;\n    });\n    node.on('unsettled:blocking', () => {\n        isValid.value = false;\n    });\n    node.on('settled:errors', () => {\n        hasErrors.value = false;\n    });\n    node.on('unsettled:errors', () => {\n        hasErrors.value = true;\n    });\n    /**\n     * Watch the validation visible prop and set the hasShownErrors state.\n     */\n    watch(validationVisible, (value) => {\n        if (value) {\n            hasShownErrors.value = true;\n        }\n    });\n    node.context = context;\n    // The context is complete\n    node.emit('context', node, false);\n    node.on('destroyed', () => {\n        node.context = undefined;\n        /* @ts-ignore */ // eslint-disable-line\n        node = null;\n    });\n};\n\n/**\n * Default configuration options. Includes all validation rules,\n * en i18n messages.\n *\n * @public\n */\nconst defaultConfig = (options = {}) => {\n    register();\n    const { rules = {}, locales = {}, inputs: inputs$1 = {}, messages = {}, locale = undefined, theme = undefined, iconLoaderUrl = undefined, iconLoader = undefined, icons = {}, ...nodeOptions } = options;\n    /**\n     * The default configuration includes the validation plugin,\n     * with all core-available validation rules.\n     */\n    const validation = createValidationPlugin({\n        ...defaultRules,\n        ...(rules || {}),\n    });\n    /**\n     * Includes the i18n plugin with only the english language\n     * messages.\n     */\n    const i18n = createI18nPlugin(extend({ en, ...(locales || {}) }, messages));\n    /**\n     * Create the library of inputs that are generally available. This default\n     * config imports all \"native\" inputs by default, but\n     */\n    const library = createLibraryPlugin(inputs, inputs$1);\n    /**\n     * Create the theme plugin for the user provided theme\n     */\n    const themePlugin = createThemePlugin(theme, icons, iconLoaderUrl, iconLoader);\n    return extend({\n        plugins: [library, themePlugin, vueBindings, i18n, validation],\n        ...(!locale ? {} : { config: { locale } }),\n    }, nodeOptions || {}, true);\n};\n\nvar defaultConfig$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultConfig: defaultConfig\n});\n\n/**\n * Renders an icon using the current IconLoader set at the root FormKit config\n *\n * @public\n */\nconst FormKitIcon = /* #__PURE__ */ defineComponent({\n    name: 'FormKitIcon',\n    props: {\n        icon: {\n            type: String,\n            default: '',\n        },\n        iconLoader: {\n            type: Function,\n            default: null,\n        },\n        iconLoaderUrl: {\n            type: Function,\n            default: null,\n        },\n    },\n    setup(props) {\n        var _a, _b;\n        const icon = ref(undefined);\n        const config = inject(optionsSymbol, {});\n        const parent = inject(parentSymbol, null);\n        let iconHandler = undefined;\n        function loadIcon() {\n            if (!iconHandler || typeof iconHandler !== 'function')\n                return;\n            const iconOrPromise = iconHandler(props.icon);\n            if (iconOrPromise instanceof Promise) {\n                iconOrPromise.then((iconValue) => {\n                    icon.value = iconValue;\n                });\n            }\n            else {\n                icon.value = iconOrPromise;\n            }\n        }\n        if (props.iconLoader && typeof props.iconLoader === 'function') {\n            // if we have a locally supplied loader, then use it\n            iconHandler = createIconHandler(props.iconLoader);\n        }\n        else if (parent && ((_a = parent.props) === null || _a === void 0 ? void 0 : _a.iconLoader)) {\n            // otherwise try to inherit from a parent\n            iconHandler = createIconHandler(parent.props.iconLoader);\n        }\n        else if (props.iconLoaderUrl &&\n            typeof props.iconLoaderUrl === 'function') {\n            iconHandler = createIconHandler(iconHandler, props.iconLoaderUrl);\n        }\n        else {\n            // grab our iconHandler from the global config\n            const iconPlugin = (_b = config === null || config === void 0 ? void 0 : config.plugins) === null || _b === void 0 ? void 0 : _b.find((plugin) => {\n                return (typeof plugin\n                    .iconHandler === 'function');\n            });\n            if (iconPlugin) {\n                iconHandler = iconPlugin.iconHandler;\n            }\n        }\n        watch(() => props.icon, () => {\n            loadIcon();\n        }, { immediate: true });\n        return () => {\n            if (props.icon && icon.value) {\n                return h('span', {\n                    class: 'formkit-icon',\n                    innerHTML: icon.value,\n                });\n            }\n            return null;\n        };\n    },\n});\n\nexport { formkitComponent as FormKit, FormKitIcon, FormKitLazyProvider, FormKitMessages, FormKitProvider, FormKitRoot, FormKitSchema, FormKitSummary, vueBindings as bindings, configSymbol, createInput, defaultConfig, defineFormKitConfig, getCurrentSchemaNode, onSSRComplete, optionsSymbol, parentSymbol, plugin, rootSymbol, ssrComplete, useConfig, useInput };\n"],"names":["isBrowser","explicitKeys","token","dedupe","arr1","arr2","original","item","has","obj","property","eq","valA","valB","deep","explicit","eqRegExp","k","key","x","y","empty","value","type","_i","escapeExp","string","regexForFormat","format","escaped","formats","tokens","regex","isRecord","o","isObject","isPojo","ctor","prot","extend","additional","extendArrays","ignoreUndefined","merged","isQuotedString","str","quoteType","p","rmEscapes","clean","lastChar","char","nodeProps","sets","valid","props","name","modelValue","config","plugins","validProps","parseArgs","args","arg","depth","quote","except","toRemove","exps","n","keysToRemove","exp","only","include","camel","_s","g","kebab","trail","cap","shallowClone","returnObject","applyExplicit","clone","newObj","cloneAny","getAt","addr","segments","segment","undefine","init","slugify","whenAvailable","childId","callback","root","el","observer","oncePerTick","fn","called","createDispatcher","middleware","currentIndex","use","dispatchable","dispatch","payload","current","explicitPayload","index","createEmitter","listeners","receipts","buffer","emitter","node","event","wrapper","eventName","listener","modifiers","receipt","_a","eventListeners","child","events","emit$1","context","bubble","meta","_context","isNode","on","_node","off","errorHandler","error","next","warningHandler","warning","result","warn","code","data","createMessage","conf","m","storeTraps","applyMessages","setMessage","removeMessage","filterMessages","reduceMessages","releaseBuffer","touchMessages","createStore","_buffer","messages","_b","_m","_r","store","_target","_t","prop","releaseMissed","messageStore","message","previous","e","buffered","_store","reducer","accumulator","_messageStore","clear","applied","address","missed","createMessages","errors","sourceKey","make","errorSet","misses","createLedger","ledger","createCounter","add","merge","counterName","condition","increment","parseCondition","counter","sum","count","initial","post","r","delta","parent","remove","originalParent","registry","reflected","emit","register","deregister","id","getNode$1","watchRegistry","configChange","usingFallback","createConfig$1","options","nodes","target","t","submitForm","formElement","clearState","reset","resetTo","resetValue","defaultConfig","useIndex","valueRemoved","valueMoved","valueInserted","isList","invalidSetter","traps","trap","getContext","addChild","addProps","getAddress","getNode","clearErrors$1","calm","define","disturb","destroy","hydrate","getIndex","setIndex","input","eachChild","find","setParent","removeChild","getRoot","resetConfig","setErrors$1","submit","text","getName","walkTree","createTraps","getter","setter","curryGetter","createHooks","hooks","_","nameCount","idCount","createName","createValue","async","validateInput","commit","partial","from","insert","_value","syncListNodes","childValue","newChildren","unused","placeholderValues","i","indexes","emptyIndexes","createPlaceholder","isPlaceholder","resolve","definition","feature","attrs","attr","camelName","parentContext","listIndex","existingNode","_property","childIndex","preserve","stopIfFalse","skipSubtreeOnFalse","val","createConfig","plugin","run","library","children","oldIndex","locator","first","pointer","c","select","selector","matches","action","argStr","searchTerm","searcher","bfs","tree","searchValue","searchGoal","search","stack","localValue","parentVal","rootValue","didSet","fragment","localErrors","childErrors","clearChildErrors","createProps","isEmitting","originalValue","receiver","findDefinition","createContext","nodeInit","_f","hasInitialId","_g","createNode","ops","isDOM","isComponent","isConditional","isSugar","sugar","iterator","bind","compile","expr","provideTokens","requirements","operand","operatorRegistry","l","operatorSymbols","s","operatorChars","getOp","symbols","expression","candidates","symbol","getStep","direction","reversed","start","operators","getTail","pos","tail","length","parseLogicals","step","op","left","operation","parenthetical","parenQuote","startP","addTo","hasTail","lStep","rStep","evaluate","v","fnToken","userFuncReturn","tailCall","userFunc","subTokens","rootTokens","tokenSet","cleaned","compiled","reqs","provide","createClasses","propertyKey","sectionClassList","generateClassList","combinedClassList","finalClassList","currentClassList","handleNegativeClasses","$reset","classList","removalToken","hasNegativeClassValue","applicableClasses","className","negativeClass","targetClass","setErrors","clearErrors","clearChildren","FORMKIT_VERSION","createLibraryPlugin","libraries","lib","runtimeProps","isGroupOption","option","normalizeOptions","optionValue","found","shouldSelect","valueA","valueB","createSection","section","extendable","extensions","extendSchema","createRoot","rootSection","isSchemaObject","schema","extension","actions","box","boxHelp","boxInner","boxLabel","boxOption","boxOptions","boxWrapper","buttonInput","buttonLabel","decorator","fieldset","fileInput","fileItem","fileList","fileName","fileRemove","formInput","help","icon","sectionKey","rawIconProp","inner","label","legend","noFiles","optGroup","optionSlot","outer","prefix","selectInput$1","submitInput","suffix","textInput","textareaInput","normalizeBoxes","toggleChecked$1","existingValue","isChecked$1","checkboxes","defaultIcon","disables","localize","removeHover","preventStrayDrop","files","file","loading","handleSubmit","submitEvent","submitNonce","setSubmitted","retVal","autoDisable","form$1","ignore","initialValue","casts","strict","numericValue","toggleChecked","isChecked","radios","radioInstance","renamesRadios","renamesRadiosPlugin","isSelected","optionA","containsValue","deferChange","selectInput","applyPlaceholder","placeholder","firstValue","select$1","_c","isMultiple","hasMatchingValue","isSlotCondition","useSchema","inputSection","$if","then","otherwise","conditionalNode","$extend","extendWith","button","checkbox","form","group","hidden","list","radio","textarea","accepted","date_after","compare","timestamp","fieldValue","alpha","set","selectedSet","alpha_spaces","alphanumeric","date_before","between","to","a","b","hasConfirm","confirm","comparison","foreignValue","contains_alpha","contains_alpha_spaces","contains_alphanumeric","contains_lowercase","contains_numeric","contains_symbol","contains_uppercase","date_between","dateA","dateB","compareTo","date_format","email","ends_with","is","second","min","max","lowercase","pattern","maximum","minimum","not","number","require_one","inputNames","required","starts_with","uppercase","url","protocols","revokedObservers","createObserver","dependencies","deps","addDependency","observeProps","observeLedger","observe","observed","revoke","block","after","watch","old","newDeps","removeListeners","subArgs","subValue","applyListeners","toAdd","depNode","nodeReceipts","doAfterObservation","res","diffDeps","oldDeps","eventsToAdd","previousEvents","eventsToRemove","newEvents","isKilled","validatingMessage","createValidationPlugin","baseRules","propRules","availableRules","observedNode","state","validation","reboot","newValidation","newRules","parseRules","validate","validations","removeImmediately","complete","currentRun","createFailedMessage","runRule","createI18nArgs","i18nArgs","customMessage","createCustomMessage","createMessageName","hintPattern","rulePattern","ruleExtractor","hintExtractor","debounceExtractor","hasDebounce","defaultHints","rules","extractRules","rule","hints","ruleName","parsedHints","parseHints","fnHints","parsedRule","parseRule","trimmed","map","hintGroups","hint","existingHints","sentence","items","conjunction","oxford","date","dateTime","order","ui$A","validation$A","labels","dependentNode","en","createI18nPlugin","localeKey","parseLocale","locale","lang","availableLocales","generateClasses","classes","classesBySectionKey","classesObject","addClassesBySection","_sectionKey","classesByType","family","listParts","documentStyles","documentThemeLinkTag","themeDidLoad","themeHasLoaded","themeWasRequested","themeLoaded","isClient","iconRegistry","iconRequests","createThemePlugin","theme","icons","iconLoaderUrl","iconLoader","loadTheme","themePlugin","createIconHandler","loadIconPropIcons","clickHandlerProp","handlerFunction","themeUrl","link","iconName","isDefault","iconWasAlreadyLoaded","loadedIcon","getIconFromStylesheet","iconValue","getRemoteIcon","finalIcon","loadStylesheetIcon","cssVarIcon","formkitVersion","fetchUrl","iconHandler","iconRegex","loadPropIcon","reloadIcon","svg","operator","warnings","inputType","decodeErrors","err","registered","decodeWarnings","isServer$2","ssrCompleteRegistry","onSSRComplete","app","isServer$1","memo","memoKeys","instanceKey","instanceScopes","raw","isClassProp","getRef","ref","nodeRefs","get","path","watchEffect","getValue","isRef","subset","foundValue","currentValue","parseSchema","memoKey","provider","createElements","alternate","parseConditionAttr","_default","parseAttrs","unparsedAttrs","bindExp","explicitAttrs","boundAttrs","setters","bound","isStr","parseNode","element","isComponent$1","childCondition","iterationData","produceChildren","slotData","_d","currentKey","values","createSlots","slots","allSlots","slotName","slotFn","createElement","createNodes","createTextVNode","resolveComponent","h","repeatedNode","getValues","valueName","keyName","_v","instanceScope","isArray","previousIterationData","scopedData","els","providers","compiledFns","createInstance","providerCallback","render","compiledProviders","compiledProvider","useScope","defaultValue","scopedValue","prevKey","createRenderFn","instanceCreator","slot","hasSlot","FormKitSchema","defineComponent","instance","getCurrentInstance","newSchema","oldSchema","oldKey","reactive","cleanUp","onUnmounted","isServer","parentSymbol","FormKit","useInput","generateSchema","schemaDefinition","definitionLibrary","markRaw","formkitComponent","rootSymbol","createPlugin","optionsSymbol","configSymbol","_options","rootConfig","pseudoProps","classesToNodeProps","onlyListeners","inject","__root","isVModeled","isMounted","onMounted","createInitialProps","initialProps","propValues","propName","classesProps","lateBoundProps","lateProps","newProp","pseudoPropNames","computed","names","passThrough","attributeWatchers","possibleProps","watchAttributes","attrProps","stop","inputErrors","keys","clonedValueBeforeVmodel","toRef","onBeforeUnmount","totalCreated","createInput","schemaOrComponent","definitionOptions","cmpName","vueBindings","isValid","hasErrors","hasTicked","nextTick","availableMessages","validationVisibility","hasShownErrors","validationVisible","isComplete","hasValidation","visibleMessages","ui","cachedClasses","rootClasses","globalConfigClasses","classesPropClasses","sectionPropClasses","describedBy","describers","doCompare","isDirty","triggerRef","isSettled","iconPattern","matchingProps","definedAs","isReactive","updateState","locales","inputs$1","nodeOptions","defaultRules","i18n","inputs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}